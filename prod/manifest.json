{ "metadata": { "dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v7.json", "dbt_version": "1.3.3", "generated_at": "2023-04-06T20:19:49.168731Z", "invocation_id": "d3c8689a-fae6-498d-8368-6891ca7c84c8", "env": { "DBT_CLOUD_PROJECT_ID": "88168", "DBT_CLOUD_RUN_ID": "137931897", "DBT_CLOUD_JOB_ID": "128558", "DBT_CLOUD_RUN_REASON": "Merging code to main", "DBT_CLOUD_RUN_REASON_CATEGORY": "other" }, "project_id": "8330e1b1d54365ea716dbeca47bf2cf6", "user_id": "93497217-b7be-4939-892d-e17c32774fe9", "send_anonymous_usage_stats": true, "adapter_type": "snowflake" }, "nodes": { "model.tpch.stg_yahooquery__link_clicked": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "source.tpch.yahooquery.link_clicked" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "staging", "segment", "yahooquery", "stg_yahooquery__link_clicked" ], "unique_id": "model.tpch.stg_yahooquery__link_clicked", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('yahooquery', 'link_clicked') }}\n\n),\n\nrenamed as (\n\n select\n id,\n original_timestamp,\n received_at,\n timestamp,\n anonymous_id,\n context_ip,\n context_user_agent,\n link,\n context_library_version,\n event,\n event_text,\n uuid_ts,\n context_page_title,\n context_page_url,\n sent_at,\n context_library_name,\n context_locale,\n context_page_path,\n context_page_referrer\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/segment/yahooquery/stg_yahooquery__link_clicked.sql", "original_file_path": "models/staging/segment/yahooquery/stg_yahooquery__link_clicked.sql", "name": "stg_yahooquery__link_clicked", "alias": "stg_yahooquery__link_clicked", "checksum": { "name": "sha256", "checksum": "ccb23ee9374cc58f406278fa4d1a449cc32af9c061c0f7d6730ceeb57b27f09c" }, "tags": [], "refs": [], "sources": [ [ "yahooquery", "link_clicked" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "use_anonymous_sproc": true }, "created_at": 1680812391.0943806 }, "model.tpch.stg_yahooquery__pages": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_parameter", "macro.dbt.split_part" ], "nodes": [ "source.tpch.yahooquery.pages" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "staging", "segment", "yahooquery", "stg_yahooquery__pages" ], "unique_id": "model.tpch.stg_yahooquery__pages", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('yahooquery', 'pages') }}\n\n),\n\nrenamed as (\n\n select\n anonymous_id,\n context_locale,\n context_page_referrer,\n url,\n uuid_ts,\n context_library_name,\n context_library_version,\n id,\n received_at,\n title,\n context_page_title,\n path,\n referrer,\n timestamp,\n original_timestamp,\n sent_at,\n context_ip,\n context_page_path,\n context_page_url,\n context_user_agent,\n\n -- calculated\n {{ dbt_utils.get_url_host('url') }} as page_url_host,\n replace(\n {{ dbt_utils.get_url_host('referrer') }},\n 'www.',\n ''\n ) as referrer_host,\n {{ dbt_utils.get_url_parameter('url', 'gclid') }} as gclid,\n case\n when lower(context_user_agent) like '%android%' then 'Android'\n else replace(\n {{ dbt.split_part(dbt.split_part('context_user_agent', \"'('\", 2), \"' '\", 1) }},\n ';', '')\n end as device,\n case\n when device = 'iPhone' then 'iPhone'\n when device = 'Android' then 'Android'\n when device in ('iPad', 'iPod') then 'Tablet'\n when device in ('Windows', 'Macintosh', 'X11') then 'Desktop'\n else 'Uncategorized'\n end as device_category\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/segment/yahooquery/stg_yahooquery__pages.sql", "original_file_path": "models/staging/segment/yahooquery/stg_yahooquery__pages.sql", "name": "stg_yahooquery__pages", "alias": "stg_yahooquery__pages", "checksum": { "name": "sha256", "checksum": "e22feec5240886ddc4717b48d5c71647c37dfa2a2a8537d024e69dbb24d22b20" }, "tags": [], "refs": [], "sources": [ [ "yahooquery", "pages" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "use_anonymous_sproc": true }, "created_at": 1680812391.1086922 }, "model.tpch.stg_yahooquery__tracks": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "source.tpch.yahooquery.tracks" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "staging", "segment", "yahooquery", "stg_yahooquery__tracks" ], "unique_id": "model.tpch.stg_yahooquery__tracks", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('yahooquery', 'tracks') }}\n\n),\n\nrenamed as (\n\n select\n event_text,\n context_library_version,\n context_page_referrer,\n context_page_url,\n event,\n context_ip,\n context_page_path,\n context_page_title,\n received_at,\n sent_at,\n timestamp,\n uuid_ts,\n context_locale,\n context_user_agent,\n id,\n original_timestamp,\n anonymous_id,\n context_library_name\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/segment/yahooquery/stg_yahooquery__tracks.sql", "original_file_path": "models/staging/segment/yahooquery/stg_yahooquery__tracks.sql", "name": "stg_yahooquery__tracks", "alias": "stg_yahooquery__tracks", "checksum": { "name": "sha256", "checksum": "960a4378102a02a712d82507f7824acfb5f0e103e5bdc1875460785a3e2bb584" }, "tags": [], "refs": [], "sources": [ [ "yahooquery", "tracks" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "use_anonymous_sproc": true }, "created_at": 1680812391.13873 }, "model.tpch.stg_dbtc__link_clicked": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "source.tpch.dbtc.link_clicked" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "staging", "segment", "dbtc", "stg_dbtc__link_clicked" ], "unique_id": "model.tpch.stg_dbtc__link_clicked", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('dbtc', 'link_clicked') }}\n\n),\n\nrenamed as (\n\n select\n id,\n original_timestamp,\n received_at,\n timestamp,\n anonymous_id,\n context_ip,\n context_user_agent,\n link,\n context_library_version,\n event,\n event_text,\n uuid_ts,\n context_page_title,\n context_page_url,\n sent_at,\n context_library_name,\n context_locale,\n context_page_path,\n context_page_referrer\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/segment/dbtc/stg_dbtc__link_clicked.sql", "original_file_path": "models/staging/segment/dbtc/stg_dbtc__link_clicked.sql", "name": "stg_dbtc__link_clicked", "alias": "stg_dbtc__link_clicked", "checksum": { "name": "sha256", "checksum": "ba4a57664b958ff259a303983885fde946ca9fa6e50922612702b3619740e45e" }, "tags": [], "refs": [], "sources": [ [ "dbtc", "link_clicked" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "use_anonymous_sproc": true }, "created_at": 1680812391.141494 }, "model.tpch.stg_dbtc__tracks": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "source.tpch.dbtc.tracks" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "staging", "segment", "dbtc", "stg_dbtc__tracks" ], "unique_id": "model.tpch.stg_dbtc__tracks", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('dbtc', 'tracks') }}\n\n),\n\nrenamed as (\n\n select\n event_text,\n context_library_version,\n context_page_referrer,\n context_page_url,\n event,\n context_ip,\n context_page_path,\n context_page_title,\n received_at,\n sent_at,\n timestamp,\n uuid_ts,\n context_locale,\n context_user_agent,\n id,\n original_timestamp,\n anonymous_id,\n context_library_name\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/segment/dbtc/stg_dbtc__tracks.sql", "original_file_path": "models/staging/segment/dbtc/stg_dbtc__tracks.sql", "name": "stg_dbtc__tracks", "alias": "stg_dbtc__tracks", "checksum": { "name": "sha256", "checksum": "0d1a293a81f079f7057e2f6eb4df3a1c5d0d26c1d010f3315b1384f89142aaae" }, "tags": [], "refs": [], "sources": [ [ "dbtc", "tracks" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "use_anonymous_sproc": true }, "created_at": 1680812391.144548 }, "model.tpch.stg_dbtc__pages": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_parameter", "macro.dbt.split_part" ], "nodes": [ "source.tpch.dbtc.pages" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "staging", "segment", "dbtc", "stg_dbtc__pages" ], "unique_id": "model.tpch.stg_dbtc__pages", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('dbtc', 'pages') }}\n\n),\n\nrenamed as (\n\n select\n anonymous_id,\n context_locale,\n context_page_referrer,\n url,\n uuid_ts,\n context_library_name,\n context_library_version,\n id,\n received_at,\n title,\n context_page_title,\n path,\n referrer,\n timestamp,\n original_timestamp,\n sent_at,\n context_ip,\n context_page_path,\n context_page_url,\n context_user_agent,\n\n -- calculated\n {{ dbt_utils.get_url_host('url') }} as page_url_host,\n replace(\n {{ dbt_utils.get_url_host('referrer') }},\n 'www.',\n ''\n ) as referrer_host,\n {{ dbt_utils.get_url_parameter('url', 'gclid') }} as gclid,\n case\n when lower(context_user_agent) like '%android%' then 'Android'\n else replace(\n {{ dbt.split_part(dbt.split_part('context_user_agent', \"'('\", 2), \"' '\", 1) }},\n ';', '')\n end as device,\n case\n when device = 'iPhone' then 'iPhone'\n when device = 'Android' then 'Android'\n when device in ('iPad', 'iPod') then 'Tablet'\n when device in ('Windows', 'Macintosh', 'X11') then 'Desktop'\n else 'Uncategorized'\n end as device_category\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/segment/dbtc/stg_dbtc__pages.sql", "original_file_path": "models/staging/segment/dbtc/stg_dbtc__pages.sql", "name": "stg_dbtc__pages", "alias": "stg_dbtc__pages", "checksum": { "name": "sha256", "checksum": "85a2474eeb2f7444d654ec9b76b79717fd562534842fb58c20ad504a7c690f0e" }, "tags": [], "refs": [], "sources": [ [ "dbtc", "pages" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "use_anonymous_sproc": true }, "created_at": 1680812391.1472225 }, "model.tpch.stg_tpch_line_items": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt_utils.generate_surrogate_key" ], "nodes": [ "source.tpch.tpch.lineitem" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "staging", "tpch", "stg_tpch_line_items" ], "unique_id": "model.tpch.stg_tpch_line_items", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('tpch', 'lineitem') }}\n\n),\n\nrenamed as (\n\n select\n \n {{ dbt_utils.generate_surrogate_key(\n ['l_orderkey', \n 'l_linenumber']) }}\n as order_item_key,\n l_orderkey as order_key,\n l_partkey as part_key,\n l_suppkey as supplier_key,\n l_linenumber as line_number,\n l_quantity as quantity,\n l_extendedprice as extended_price,\n l_discount as discount_percentage,\n l_tax as tax_rate,\n l_returnflag as return_flag,\n l_linestatus as status_code,\n l_shipdate as ship_date,\n l_commitdate as commit_date,\n l_receiptdate as receipt_date,\n l_shipinstruct as ship_instructions,\n l_shipmode as ship_mode,\n l_comment as comment\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/tpch/stg_tpch_line_items.sql", "original_file_path": "models/staging/tpch/stg_tpch_line_items.sql", "name": "stg_tpch_line_items", "alias": "stg_tpch_line_items", "checksum": { "name": "sha256", "checksum": "f6b2ba6705c49b2e2263b3fc9fcb43454a7b9df0073790517b917396f7ca71cb" }, "tags": [], "refs": [], "sources": [ [ "tpch", "lineitem" ] ], "metrics": [], "description": "staging layer for line items data", "columns": { "order_item_key": { "name": "order_item_key", "description": "surrogate key for the model -- combo of order_key + line_number", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "order_key": { "name": "order_key", "description": "foreign key to stg_tpch_orders", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "part_key": { "name": "part_key", "description": "foreign key to stg_tpch_part_suppliers", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "supplier_key": { "name": "supplier_key", "description": "foreign key to stg_tpch_suppliers", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "line_number": { "name": "line_number", "description": "sequence of the order items within the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "quantity": { "name": "quantity", "description": "total units", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "extended_price": { "name": "extended_price", "description": "line item price", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "discount_percentage": { "name": "discount_percentage", "description": "percentage of the discount", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "tax_rate": { "name": "tax_rate", "description": "tax rate of the order item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "return_flag": { "name": "return_flag", "description": "letter determining the status of the return", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "status_code": { "name": "status_code", "description": "status code of the order item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "ship_date": { "name": "ship_date", "description": "the date the order item is being shipped", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "commit_date": { "name": "commit_date", "description": "the date the order item is being commited", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "receipt_date": { "name": "receipt_date", "description": "the receipt date of the order item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "ship_instructions": { "name": "ship_instructions", "description": "additional instructions on the shipment", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "ship_mode": { "name": "ship_mode", "description": "method of shipping", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "comment": { "name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/staging/tpch/_tpch__models.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "use_anonymous_sproc": true }, "created_at": 1680812392.1322887 }, "model.tpch.stg_tpch_nations": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "source.tpch.tpch.nation" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": { "joins": [ { "join": "stg_tpch_regions", "sql_on": "${stg_tpch_nations.region_key} = ${stg_tpch_regions.region_key}" } ] }, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "staging", "tpch", "stg_tpch_nations" ], "unique_id": "model.tpch.stg_tpch_nations", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('tpch', 'nation') }}\n\n),\n\nrenamed as (\n\n select\n \n n_nationkey as nation_key,\n n_name as name,\n n_regionkey as region_key,\n n_comment as comment\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/tpch/stg_tpch_nations.sql", "original_file_path": "models/staging/tpch/stg_tpch_nations.sql", "name": "stg_tpch_nations", "alias": "stg_tpch_nations", "checksum": { "name": "sha256", "checksum": "b864eb71cb7121aaa9324c726e4b731790d1051663f5d0800cc333984f469a07" }, "tags": [], "refs": [], "sources": [ [ "tpch", "nation" ] ], "metrics": [], "description": "staging layer for nations data", "columns": { "nation_key": { "name": "nation_key", "description": "primary key of the model", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "nation name", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "region_key": { "name": "region_key", "description": "foreign key to stg_tpch_regions", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "comment": { "name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": { "joins": [ { "join": "stg_tpch_regions", "sql_on": "${stg_tpch_nations.region_key} = ${stg_tpch_regions.region_key}" } ] }, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/staging/tpch/_tpch__models.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "use_anonymous_sproc": true, "meta": { "joins": [ { "join": "stg_tpch_regions", "sql_on": "${stg_tpch_nations.region_key} = ${stg_tpch_regions.region_key}" } ] } }, "created_at": 1680812392.1375701 }, "model.tpch.stg_tpch_customers": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "source.tpch.tpch.customer" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": { "joins": [ { "join": "stg_tpch_nations", "sql_on": "${stg_tpch_customers.nation_key} = ${stg_tpch_nations.nation_key}" } ] }, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "staging", "tpch", "stg_tpch_customers" ], "unique_id": "model.tpch.stg_tpch_customers", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('tpch', 'customer') }}\n\n),\n\ncleanup as (\n\n select\n \n c_custkey as customer_key,\n c_name as name,\n c_address as address, \n c_nationkey as nation_key,\n c_phone as phone_number,\n c_acctbal as account_balance,\n c_mktsegment as market_segment,\n c_comment as comment\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from cleanup", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/tpch/stg_tpch_customers.sql", "original_file_path": "models/staging/tpch/stg_tpch_customers.sql", "name": "stg_tpch_customers", "alias": "stg_tpch_customers", "checksum": { "name": "sha256", "checksum": "a0a7b20e3b34c3caa64f2ef26ae05aabc77bb8e1a9ed1211475f759024735696" }, "tags": [], "refs": [], "sources": [ [ "tpch", "customer" ] ], "metrics": [], "description": "staging layer for customers data", "columns": { "customer_key": { "name": "customer_key", "description": "primary key of the model", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "customer id", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "address": { "name": "address", "description": "address of the customer", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "nation_key": { "name": "nation_key", "description": "foreign key to stg_tpch_nations", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "phone_number": { "name": "phone_number", "description": "phone number of the customer", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "account_balance": { "name": "account_balance", "description": "total account balance from the customer", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "market_segment": { "name": "market_segment", "description": "market segment of the customer", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "comment": { "name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": { "joins": [ { "join": "stg_tpch_nations", "sql_on": "${stg_tpch_customers.nation_key} = ${stg_tpch_nations.nation_key}" } ] }, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/staging/tpch/_tpch__models.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "use_anonymous_sproc": true, "meta": { "joins": [ { "join": "stg_tpch_nations", "sql_on": "${stg_tpch_customers.nation_key} = ${stg_tpch_nations.nation_key}" } ] } }, "created_at": 1680812392.1228323 }, "model.tpch.stg_tpch_parts": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "source.tpch.tpch.part" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "staging", "tpch", "stg_tpch_parts" ], "unique_id": "model.tpch.stg_tpch_parts", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('tpch', 'part') }}\n\n),\n\nrenamed as (\n\n select\n \n p_partkey as part_key,\n p_name as name,\n p_mfgr as manufacturer,\n p_brand as brand,\n p_type as type,\n p_size as size,\n p_container as container,\n p_retailprice as retail_price,\n p_comment as comment\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/tpch/stg_tpch_parts.sql", "original_file_path": "models/staging/tpch/stg_tpch_parts.sql", "name": "stg_tpch_parts", "alias": "stg_tpch_parts", "checksum": { "name": "sha256", "checksum": "8ffc7b305f598ea1db84ec708219e456b237e7de5e2048b3bb3efc4c230192ef" }, "tags": [], "refs": [], "sources": [ [ "tpch", "part" ] ], "metrics": [], "description": "staging layer for parts data", "columns": { "part_key": { "name": "part_key", "description": "primary key of the model", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "name of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "manufacturer": { "name": "manufacturer", "description": "manufacturer of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "brand": { "name": "brand", "description": "brand of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "type": { "name": "type", "description": "type of part including material", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "size": { "name": "size", "description": "size of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "container": { "name": "container", "description": "container of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "retail_price": { "name": "retail_price", "description": "raw retail price", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "comment": { "name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/staging/tpch/_tpch__models.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "use_anonymous_sproc": true }, "created_at": 1680812392.155313 }, "model.tpch.stg_tpch_regions": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "source.tpch.tpch.region" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "staging", "tpch", "stg_tpch_regions" ], "unique_id": "model.tpch.stg_tpch_regions", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('tpch', 'region') }}\n\n),\n\nrenamed as (\n\n select\n r_regionkey as region_key,\n r_name as name,\n r_comment as comment\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/tpch/stg_tpch_regions.sql", "original_file_path": "models/staging/tpch/stg_tpch_regions.sql", "name": "stg_tpch_regions", "alias": "stg_tpch_regions", "checksum": { "name": "sha256", "checksum": "5c45bba024d6d0699e21c20e64896613725601f2f269a33888c66cf659937ca1" }, "tags": [], "refs": [], "sources": [ [ "tpch", "region" ] ], "metrics": [], "description": "staging layer for regions data", "columns": { "region_key": { "name": "region_key", "description": "primary key of the model", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "region name", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "comment": { "name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/staging/tpch/_tpch__models.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "use_anonymous_sproc": true }, "created_at": 1680812392.1575255 }, "model.tpch.stg_tpch_suppliers": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "source.tpch.tpch.supplier" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": { "joins": [ { "join": "stg_tpch_nations", "sql_on": "${stg_tpch_suppliers.nation_key} = ${stg_tpch_nations.nation_key}" } ] }, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "staging", "tpch", "stg_tpch_suppliers" ], "unique_id": "model.tpch.stg_tpch_suppliers", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('tpch', 'supplier') }}\n\n),\n\nrenamed as (\n\n select\n \n s_suppkey as supplier_key,\n s_name as supplier_name,\n s_address as supplier_address,\n s_nationkey as nation_key,\n s_phone as phone_number,\n s_acctbal as account_balance,\n s_comment as comment\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/tpch/stg_tpch_suppliers.sql", "original_file_path": "models/staging/tpch/stg_tpch_suppliers.sql", "name": "stg_tpch_suppliers", "alias": "stg_tpch_suppliers", "checksum": { "name": "sha256", "checksum": "39e217e9757437fcc72c0938f2729a5f5fec76f79d911f216377459f8890a766" }, "tags": [], "refs": [], "sources": [ [ "tpch", "supplier" ] ], "metrics": [], "description": "staging layer for suppliers data", "columns": { "supplier_key": { "name": "supplier_key", "description": "primary key of the model", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "supplier_name": { "name": "supplier_name", "description": "id of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "supplier_address": { "name": "supplier_address", "description": "address of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "nation_key": { "name": "nation_key", "description": "foreign key to stg_tpch_nations", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "phone_number": { "name": "phone_number", "description": "phone number of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "account_balance": { "name": "account_balance", "description": "raw account balance", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "comment": { "name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": { "joins": [ { "join": "stg_tpch_nations", "sql_on": "${stg_tpch_suppliers.nation_key} = ${stg_tpch_nations.nation_key}" } ] }, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/staging/tpch/_tpch__models.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "use_anonymous_sproc": true, "meta": { "joins": [ { "join": "stg_tpch_nations", "sql_on": "${stg_tpch_suppliers.nation_key} = ${stg_tpch_nations.nation_key}" } ] } }, "created_at": 1680812392.1642272 }, "model.tpch.stg_tpch_part_suppliers": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt_utils.generate_surrogate_key" ], "nodes": [ "source.tpch.tpch.partsupp" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": { "joins": [ { "join": "stg_tpch_suppliers", "sql_on": "${stg_tpch_part_suppliers.supplier_key} = ${stg_tpch_suppliers.supplier_key}" } ] }, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "staging", "tpch", "stg_tpch_part_suppliers" ], "unique_id": "model.tpch.stg_tpch_part_suppliers", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('tpch', 'partsupp') }}\n\n),\n\nrenamed as (\n\n select\n \n {{ dbt_utils.generate_surrogate_key(\n ['ps_partkey', \n 'ps_suppkey']) }} \n as part_supplier_key,\n ps_partkey as part_key,\n ps_suppkey as supplier_key,\n ps_availqty as available_quantity,\n ps_supplycost as cost,\n ps_comment as comment\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/tpch/stg_tpch_part_suppliers.sql", "original_file_path": "models/staging/tpch/stg_tpch_part_suppliers.sql", "name": "stg_tpch_part_suppliers", "alias": "stg_tpch_part_suppliers", "checksum": { "name": "sha256", "checksum": "8d6fd06f1a895d7dcff7fe7c806b575e6bacc1380863ae8f6455e1272ef75dd8" }, "tags": [], "refs": [], "sources": [ [ "tpch", "partsupp" ] ], "metrics": [], "description": "staging layer for suppliers data", "columns": { "part_supplier_key": { "name": "part_supplier_key", "description": "surrogate key for the model -- combo of ps_partkey + ps_suppkey", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "part_key": { "name": "part_key", "description": "foreign key to stg_tpch_parts", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "supplier_key": { "name": "supplier_key", "description": "foreign key to stg_tpch_suppliers", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "available_quantity": { "name": "available_quantity", "description": "raw available quantity", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "cost": { "name": "cost", "description": "raw cost", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "comment": { "name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": { "joins": [ { "join": "stg_tpch_suppliers", "sql_on": "${stg_tpch_part_suppliers.supplier_key} = ${stg_tpch_suppliers.supplier_key}" } ] }, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/staging/tpch/_tpch__models.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "use_anonymous_sproc": true, "meta": { "joins": [ { "join": "stg_tpch_suppliers", "sql_on": "${stg_tpch_part_suppliers.supplier_key} = ${stg_tpch_suppliers.supplier_key}" } ] } }, "created_at": 1680812392.1497657 }, "model.tpch.stg_tpch_orders": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "source.tpch.tpch.orders" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "staging", "tpch", "stg_tpch_orders" ], "unique_id": "model.tpch.stg_tpch_orders", "raw_code": "with source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('tpch', 'orders') }}\n\n),\n\nrenamed as (\n\n select\n \n o_orderkey as order_key,\n o_custkey as customer_key,\n o_orderstatus as status_code,\n o_totalprice as total_price,\n o_orderdate as order_date,\n o_orderpriority as priority_code,\n o_clerk as clerk_name,\n o_shippriority as ship_priority,\n o_comment as comment\n\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/tpch/stg_tpch_orders.sql", "original_file_path": "models/staging/tpch/stg_tpch_orders.sql", "name": "stg_tpch_orders", "alias": "stg_tpch_orders", "checksum": { "name": "sha256", "checksum": "d23aed43cfca1bd253f9b4a6eea76aae293f85e237b695dcdb7590ced8e0902d" }, "tags": [], "refs": [], "sources": [ [ "tpch", "orders" ] ], "metrics": [], "description": "staging layer for orders data", "columns": { "order_key": { "name": "order_key", "description": "primary key of the model", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "customer_key": { "name": "customer_key", "description": "foreign key to stg_tpch_customers", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "status_code": { "name": "status_code", "description": "status of the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "total_price": { "name": "total_price", "description": "raw price", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "order_date": { "name": "order_date", "description": "date the order was made", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "priority_code": { "name": "priority_code", "description": "code associated with the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "clerk_name": { "name": "clerk_name", "description": "id of the clerk", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "ship_priority": { "name": "ship_priority", "description": "numeric representation of the shipping priority, zero being the default", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "comment": { "name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/staging/tpch/_tpch__models.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "use_anonymous_sproc": true }, "created_at": 1680812392.1437225 }, "model.tpch.all_days": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt_utils.date_spine" ], "nodes": [] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "utils", "all_days" ], "unique_id": "model.tpch.all_days", "raw_code": "{{ dbt_utils.date_spine(\n datepart=\"day\",\n start_date=\"to_date('01/01/1992', 'mm/dd/yyyy')\",\n end_date=\"dateadd(year, 1, current_date)\"\n )\n}}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "utils/all_days.sql", "original_file_path": "models/utils/all_days.sql", "name": "all_days", "alias": "all_days", "checksum": { "name": "sha256", "checksum": "085c7fe9dcf86861369fae49eacbccaaec2d689fbfc92edb07e18b17e21821e8" }, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "This model is an example of how to create a date spine using dbt_utils. Rather than writing a bunch of code to create this, we're able to three lines of code.", "columns": { "date_day": { "name": "date_day", "description": "date generated by the macro", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/utils/utils.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true }, "created_at": 1680812392.2508173 }, "model.tpch.revenue_weekly_by_ship_mode": { "resource_type": "model", "depends_on": { "macros": [ "macro.metrics.calculate" ], "nodes": [ "model.metrics.dbt_metrics_default_calendar", "metric.tpch.total_revenue" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "metrics", "revenue_weekly_by_ship_mode" ], "unique_id": "model.tpch.revenue_weekly_by_ship_mode", "raw_code": "select\n *\nfrom {{ metrics.calculate(\n metric('total_revenue'),\n grain='week',\n dimensions=['ship_mode']\n) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "metrics/revenue_weekly_by_ship_mode.sql", "original_file_path": "models/metrics/revenue_weekly_by_ship_mode.sql", "name": "revenue_weekly_by_ship_mode", "alias": "revenue_weekly_by_ship_mode", "checksum": { "name": "sha256", "checksum": "493bc1776cae8ae11f40b8a10e51c96fb03cc8260e73be2cb7cfad428f25d330" }, "tags": [], "refs": [ [ "dbt_metrics_default_calendar" ] ], "sources": [], "metrics": [ [ "total_revenue" ] ], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true }, "created_at": 1680812391.2328537 }, "model.tpch.order_items": { "resource_type": "model", "depends_on": { "macros": [ "macro.tpch.money" ], "nodes": [ "model.tpch.stg_tpch_orders", "model.tpch.stg_tpch_line_items" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "marts", "intermediate", "order_items" ], "unique_id": "model.tpch.order_items", "raw_code": "with orders as (\n \n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('stg_tpch_orders') }}\n\n),\n\nline_item as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('stg_tpch_line_items') }}\n\n)\nselect \n\n line_item.order_item_key,\n orders.order_key,\n orders.customer_key,\n line_item.part_key,\n line_item.supplier_key,\n orders.order_date,\n orders.status_code as order_status_code,\n\n\n line_item.return_flag,\n \n line_item.line_number,\n line_item.status_code as order_item_status_code,\n line_item.ship_date,\n line_item.commit_date,\n line_item.receipt_date,\n line_item.ship_mode,\n line_item.extended_price,\n line_item.quantity,\n \n -- extended_price is actually the line item total,\n -- so we back out the extended price per item\n (line_item.extended_price/nullif(line_item.quantity, 0)){{ money() }} as base_price,\n line_item.discount_percentage,\n (base_price README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests (1 - line_item.discount_percentage)){{ money() }} as discounted_price,\n\n line_item.extended_price as gross_item_sales_amount,\n (line_item.extended_price README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests (1 - line_item.discount_percentage)){{ money() }} as discounted_item_sales_amount,\n -- We model discounts as negative amounts\n (-1 README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests line_item.extended_price README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests line_item.discount_percentage){{ money() }} as item_discount_amount,\n line_item.tax_rate,\n ((gross_item_sales_amount + item_discount_amount) README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests line_item.tax_rate){{ money() }} as item_tax_amount,\n (\n gross_item_sales_amount + \n item_discount_amount + \n item_tax_amount\n ){{ money() }} as net_item_sales_amount\n\nfrom\n orders\ninner join line_item\n on orders.order_key = line_item.order_key\norder by\n orders.order_date", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "marts/intermediate/order_items.sql", "original_file_path": "models/marts/intermediate/order_items.sql", "name": "order_items", "alias": "order_items", "checksum": { "name": "sha256", "checksum": "d11fd9a70eb441891b3d3893243cadc9c6c8d1c9fa589a94e4719b0cdea833d6" }, "tags": [], "refs": [ [ "stg_tpch_orders" ], [ "stg_tpch_line_items" ] ], "sources": [], "metrics": [], "description": "Intermediate model where we calculate item price, discounts and tax. This model is at the order item level.", "columns": { "order_item_key": { "name": "order_item_key", "description": "surrogate key for the model -- combo of order_key + line_number", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "order_key": { "name": "order_key", "description": "foreign key for orders", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "customer_key": { "name": "customer_key", "description": "foreign key for customers", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "part_key": { "name": "part_key", "description": "foreign key for part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "supplier_key": { "name": "supplier_key", "description": "foreign key for suppliers", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "order_date": { "name": "order_date", "description": "date of the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "order_status_code": { "name": "order_status_code", "description": "status of the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "return_flag": { "name": "return_flag", "description": "letter determining the status of the return", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "line_number": { "name": "line_number", "description": "sequence of the order items within the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "order_item_status_code": { "name": "order_item_status_code", "description": "status of the order item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "ship_date": { "name": "ship_date", "description": "the date the order item is being shipped", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "commit_date": { "name": "commit_date", "description": "the date the order item is being commited", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "receipt_date": { "name": "receipt_date", "description": "the receipt date of the order item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "ship_mode": { "name": "ship_mode", "description": "method of shipping", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "extended_price": { "name": "extended_price", "description": "line item price", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "quantity": { "name": "quantity", "description": "total units", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "base_price": { "name": "base_price", "description": "since extended_price is the line item total, we back out the price per item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "discount_percentage": { "name": "discount_percentage", "description": "percentage of the discount", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "discounted_price": { "name": "discounted_price", "description": "factoring in the discount_percentage, the line item discount total", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "gross_item_sales_amount": { "name": "gross_item_sales_amount", "description": "same as extended_price", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "discounted_item_sales_amount": { "name": "discounted_item_sales_amount", "description": "line item (includes quantity) discount amount", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "item_discount_amount": { "name": "item_discount_amount", "description": "item level discount amount. this is always a negative number", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "tax_rate": { "name": "tax_rate", "description": "tax rate of the order item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "item_tax_amount": { "name": "item_tax_amount", "description": "item level tax total", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "net_item_sales_amount": { "name": "net_item_sales_amount", "description": "the net total which factors in discount and tax", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/intermediate/intermediate.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true }, "created_at": 1680812392.3057976 }, "model.tpch.part_suppliers": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.tpch.stg_tpch_parts", "model.tpch.stg_tpch_suppliers", "model.tpch.stg_tpch_part_suppliers" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "marts", "intermediate", "part_suppliers" ], "unique_id": "model.tpch.part_suppliers", "raw_code": "with part as (\n \n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('stg_tpch_parts') }}\n\n),\n\nsupplier as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('stg_tpch_suppliers') }}\n\n),\n\npart_supplier as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('stg_tpch_part_suppliers') }}\n\n),\n\nfinal as (\n select \n\n part_supplier.part_supplier_key,\n part.part_key,\n part.name as part_name,\n part.manufacturer,\n part.brand,\n part.type as part_type,\n part.size as part_size,\n part.container,\n part.retail_price,\n\n supplier.supplier_key,\n supplier.supplier_name,\n supplier.supplier_address,\n supplier.phone_number,\n supplier.account_balance,\n supplier.nation_key,\n\n part_supplier.available_quantity,\n part_supplier.cost\nfrom\n part \ninner join \n part_supplier\n on part.part_key = part_supplier.part_key\ninner join\n supplier\n on part_supplier.supplier_key = supplier.supplier_key\norder by\n part.part_key\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from final", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "marts/intermediate/part_suppliers.sql", "original_file_path": "models/marts/intermediate/part_suppliers.sql", "name": "part_suppliers", "alias": "part_suppliers", "checksum": { "name": "sha256", "checksum": "e0c44dc244c520b7d9a6af7e10c91899d8778c2c92e01d0f042eb2996dd25680" }, "tags": [], "refs": [ [ "stg_tpch_parts" ], [ "stg_tpch_suppliers" ], [ "stg_tpch_part_suppliers" ] ], "sources": [], "metrics": [], "description": "Intermediate model where we join part, supplier and part_supplier. This model is at the part supplier level.", "columns": { "part_supplier_key": { "name": "part_supplier_key", "description": "primary key of the models", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "part_key": { "name": "part_key", "description": "foreign key for part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "part_name": { "name": "part_name", "description": "name of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "manufacturer": { "name": "manufacturer", "description": "manufacturer of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "brand": { "name": "brand", "description": "brand of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "part_type": { "name": "part_type", "description": "type of part including material", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "part_size": { "name": "part_size", "description": "size of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "container": { "name": "container", "description": "container of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "retail_price": { "name": "retail_price", "description": "raw retail price", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "supplier_key": { "name": "supplier_key", "description": "foreign key for supplier", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "supplier_name": { "name": "supplier_name", "description": "id of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "supplier_address": { "name": "supplier_address", "description": "address of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "phone_number": { "name": "phone_number", "description": "phone number of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "account_balance": { "name": "account_balance", "description": "raw account balance", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "nation_key": { "name": "nation_key", "description": "foreign key for nation", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "available_quantity": { "name": "available_quantity", "description": "raw available quantity", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "cost": { "name": "cost", "description": "raw cost", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/intermediate/intermediate.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true }, "created_at": 1680812392.3151574 }, "model.tpch.agg_ship_modes_hardcoded_pivot": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.tpch.fct_order_items" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "marts", "aggregates", "agg_ship_modes_hardcoded_pivot" ], "unique_id": "model.tpch.agg_ship_modes_hardcoded_pivot", "raw_code": "/* Create a pivot table with hard-coded columns based on a query of the ship modes that are in the system */\n\nwith merged as (\n select\n date_part('year', order_date) as order_year,\n ship_mode,\n gross_item_sales_amount\n from {{ ref('fct_order_items') }}\n)\n\nselect\n README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests \nfrom\n merged\n -- have to manually map strings in the pivot operation\n pivot(sum(gross_item_sales_amount) for ship_mode in (\n 'AIR',\n 'REG AIR',\n 'FOB',\n 'RAIL',\n 'MAIL',\n 'SHIP',\n 'TRUCK'\n )) as p \n\norder by order_year", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "marts/aggregates/agg_ship_modes_hardcoded_pivot.sql", "original_file_path": "models/marts/aggregates/agg_ship_modes_hardcoded_pivot.sql", "name": "agg_ship_modes_hardcoded_pivot", "alias": "agg_ship_modes_hardcoded_pivot", "checksum": { "name": "sha256", "checksum": "4d9c470a572092b0132991809aa9eb9eb462edfd26511faa66376204561cfc01" }, "tags": [], "refs": [ [ "fct_order_items" ] ], "sources": [], "metrics": [], "description": "Example of creating a pivot table with dynamic columns based on the ship modes that are in the system", "columns": { "order_year": { "name": "order_year", "description": "year of the order", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/aggregates/aggregates.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true }, "created_at": 1680812392.3248794 }, "model.tpch.agg_ship_modes_dynamic_pivot": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt.statement" ], "nodes": [ "model.tpch.fct_order_items" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "marts", "aggregates", "agg_ship_modes_dynamic_pivot" ], "unique_id": "model.tpch.agg_ship_modes_dynamic_pivot", "raw_code": "/* Create a pivot table with dynamic columns based on the ship modes that are in the system */\n\n{%- call statement('result', fetch_result=True) -%}\n\n {# this pulls the unique ship modes from the fct_order_items table #}\n select ship_mode from {{ ref('fct_order_items') }} group by 1 \n\n{%- endcall %}\n\n{% set ship_modes = load_result('result').table.columns[0].values() %}\n\nselect\n date_part('year', order_date) as order_year,\n\n {# Loop over ship_modes array from above, and sum based on whether the record matches the ship mode #}\n {%- for ship_mode in ship_modes -%}\n sum(case when ship_mode = '{{ship_mode}}' then gross_item_sales_amount end) as \"{{ship_mode|replace(' ', '_')}}_amount\"\n {%- if not loop.last -%},{% endif %}\n {% endfor %}\n\nfrom {{ ref('fct_order_items') }}\ngroup by 1", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "marts/aggregates/agg_ship_modes_dynamic_pivot.sql", "original_file_path": "models/marts/aggregates/agg_ship_modes_dynamic_pivot.sql", "name": "agg_ship_modes_dynamic_pivot", "alias": "agg_ship_modes_dynamic_pivot", "checksum": { "name": "sha256", "checksum": "c748fa7968e0f5846c77aedf657ef43248f4ac38b7db6bc50e5947992b0fc4bd" }, "tags": [], "refs": [ [ "fct_order_items" ] ], "sources": [], "metrics": [], "description": "Example of creating a pivot table with hard-coded columns based on a query of the ship modes that are in the system", "columns": { "order_year": { "name": "order_year", "description": "year of the order", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/aggregates/aggregates.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true }, "created_at": 1680812392.3260872 }, "model.tpch.dim_customers": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.tpch.stg_tpch_customers", "model.tpch.stg_tpch_nations", "model.tpch.stg_tpch_regions" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": { "joins": [ { "join": "stg_tpch_customers", "sql_on": "${dim_customers.customer_key} = ${stg_tpch_customers.customer_key}" }, { "join": "stg_tpch_nations", "sql_on": "${stg_tpch_customers.nation_key} = ${stg_tpch_nations.nation_key}" } ] }, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "transient": false, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "marts", "core", "dim_customers" ], "unique_id": "model.tpch.dim_customers", "raw_code": "{{\n config(\n materialized = 'table',\n transient=false\n )\n}}\n\nwith customer as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('stg_tpch_customers') }}\n\n),\nnation as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('stg_tpch_nations') }}\n),\nregion as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('stg_tpch_regions') }}\n\n),\nfinal as (\n select \n customer.customer_key,\n customer.name,\n customer.address,\n {# nation.nation_key as nation_key, #}\n nation.name as nation,\n {# region.region_key as region_key, #}\n region.name as region,\n customer.phone_number,\n customer.account_balance,\n customer.market_segment\n from\n customer\n inner join nation\n on customer.nation_key = nation.nation_key\n inner join region\n on nation.region_key = region.region_key\n)\nselect \n *\nfrom\n final\norder by\n customer_key", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "marts/core/dim_customers.sql", "original_file_path": "models/marts/core/dim_customers.sql", "name": "dim_customers", "alias": "dim_customers", "checksum": { "name": "sha256", "checksum": "dcf60af3e63cb41dc2d440386e06e108d2deb4a19da3df4d45d828f75a5e8da4" }, "tags": [], "refs": [ [ "stg_tpch_customers" ], [ "stg_tpch_nations" ], [ "stg_tpch_regions" ] ], "sources": [], "metrics": [], "description": "Customer dimensions table", "columns": { "customer_key": { "name": "customer_key", "description": "Primary key on the customers table", "meta": { "metrics": { "total_unique_customers": { "type": "count" } } }, "data_type": null, "quote": null, "tags": [] }, "region": { "name": "region", "description": "region name", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "customer id", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "address": { "name": "address", "description": "address of the customer", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "nation": { "name": "nation", "description": "nation name", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "phone_number": { "name": "phone_number", "description": "phone number of the customer", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "account_balance": { "name": "account_balance", "description": "raw account balance", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "market_segment": { "name": "market_segment", "description": "market segment of the customer", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": { "joins": [ { "join": "stg_tpch_customers", "sql_on": "${dim_customers.customer_key} = ${stg_tpch_customers.customer_key}" }, { "join": "stg_tpch_nations", "sql_on": "${stg_tpch_customers.nation_key} = ${stg_tpch_nations.nation_key}" } ] }, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/core/core.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true, "meta": { "joins": [ { "join": "stg_tpch_customers", "sql_on": "${dim_customers.customer_key} = ${stg_tpch_customers.customer_key}" }, { "join": "stg_tpch_nations", "sql_on": "${stg_tpch_customers.nation_key} = ${stg_tpch_nations.nation_key}" } ] }, "transient": false }, "created_at": 1680812392.341833 }, "model.tpch.dim_suppliers": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.tpch.stg_tpch_suppliers", "model.tpch.stg_tpch_nations", "model.tpch.stg_tpch_regions" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": { "joins": [ { "join": "stg_tpch_suppliers", "sql_on": "${dim_suppliers.supplier_key} = ${stg_tpch_suppliers.supplier_key}" } ] }, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "marts", "core", "dim_suppliers" ], "unique_id": "model.tpch.dim_suppliers", "raw_code": "{{\n config(\n materialized = 'table'\n )\n}}\n\nwith supplier as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('stg_tpch_suppliers') }}\n\n),\nnation as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('stg_tpch_nations') }}\n),\nregion as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('stg_tpch_regions') }}\n\n),\nfinal as (\n\n select \n supplier.supplier_key,\n supplier.supplier_name,\n supplier.supplier_address,\n nation.name as nation,\n region.name as region,\n supplier.phone_number,\n supplier.account_balance\n from\n supplier\n inner join nation\n on supplier.nation_key = nation.nation_key\n inner join region \n on nation.region_key = region.region_key\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from final", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "marts/core/dim_suppliers.sql", "original_file_path": "models/marts/core/dim_suppliers.sql", "name": "dim_suppliers", "alias": "dim_suppliers", "checksum": { "name": "sha256", "checksum": "eb62e16e163c39fc7bd243f710c42674229767264b8ce909744234a7e96b6821" }, "tags": [], "refs": [ [ "stg_tpch_suppliers" ], [ "stg_tpch_nations" ], [ "stg_tpch_regions" ] ], "sources": [], "metrics": [], "description": "Suppliers dimensions table", "columns": { "supplier_key": { "name": "supplier_key", "description": "primary key of the model", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "supplier_name": { "name": "supplier_name", "description": "id of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "supplier_address": { "name": "supplier_address", "description": "address of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "nation": { "name": "nation", "description": "nation name", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "region": { "name": "region", "description": "region name", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "phone_number": { "name": "phone_number", "description": "phone number of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "account_balance": { "name": "account_balance", "description": "raw account balance", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": { "joins": [ { "join": "stg_tpch_suppliers", "sql_on": "${dim_suppliers.supplier_key} = ${stg_tpch_suppliers.supplier_key}" } ] }, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/core/core.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true, "meta": { "joins": [ { "join": "stg_tpch_suppliers", "sql_on": "${dim_suppliers.supplier_key} = ${stg_tpch_suppliers.supplier_key}" } ] } }, "created_at": 1680812392.353748 }, "model.tpch.dim_parts": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.tpch.stg_tpch_parts" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "marts", "core", "dim_parts" ], "unique_id": "model.tpch.dim_parts", "raw_code": "{{\n config(\n materialized = 'table'\n )\n}}\nwith part as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ref('stg_tpch_parts')}}\n\n),\n\nfinal as (\n select \n part_key,\n manufacturer,\n name,\n brand,\n type,\n size,\n container,\n retail_price\n from\n part\n)\nselect *\nfrom final \norder by part_key", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "marts/core/dim_parts.sql", "original_file_path": "models/marts/core/dim_parts.sql", "name": "dim_parts", "alias": "dim_parts", "checksum": { "name": "sha256", "checksum": "d219372a8f9f61e7f76d160ba914834de7fc5883f1fdc81c03da59c08ad262ba" }, "tags": [], "refs": [ [ "stg_tpch_parts" ] ], "sources": [], "metrics": [], "description": "Parts dimensions table", "columns": { "part_key": { "name": "part_key", "description": "primary key of the model", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "manufacturer": { "name": "manufacturer", "description": "manufacturer of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "name of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "brand": { "name": "brand", "description": "brand of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "type": { "name": "type", "description": "type of part including material", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "size": { "name": "size", "description": "size of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "container": { "name": "container", "description": "container of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "retail_price": { "name": "retail_price", "description": "raw retail price", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/core/core.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true }, "created_at": 1680812392.3467948 }, "model.tpch.fct_orders": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.tpch.stg_tpch_orders", "model.tpch.order_items" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [ "finance" ], "meta": { "joins": [ { "join": "dim_customers", "sql_on": "${fct_orders.customer_key} = ${dim_customers.customer_key}" } ] }, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "marts", "core", "fct_orders" ], "unique_id": "model.tpch.fct_orders", "raw_code": "{{\n config(\n materialized = 'table',\n tags=['finance']\n )\n}}\n\n\nwith orders as (\n \n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('stg_tpch_orders') }}\n\n),\norder_item as (\n \n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('order_items') }}\n\n),\norder_item_summary as (\n\n select \n order_key,\n sum(gross_item_sales_amount) as gross_item_sales_amount,\n sum(item_discount_amount) as item_discount_amount,\n sum(item_tax_amount) as item_tax_amount,\n sum(net_item_sales_amount) as net_item_sales_amount\n from order_item\n group by\n 1\n),\nfinal as (\n\n select \n\n orders.order_key, \n orders.order_date,\n orders.customer_key,\n orders.status_code,\n orders.priority_code,\n orders.clerk_name,\n orders.ship_priority,\n --\n 1 as order_count, \n order_item_summary.gross_item_sales_amount,\n order_item_summary.item_discount_amount,\n order_item_summary.item_tax_amount,\n order_item_summary.net_item_sales_amount\n from\n orders\n inner join order_item_summary\n on orders.order_key = order_item_summary.order_key\n)\nselect \n *\nfrom\n final\n\norder by\n order_date", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "marts/core/fct_orders.sql", "original_file_path": "models/marts/core/fct_orders.sql", "name": "fct_orders", "alias": "fct_orders", "checksum": { "name": "sha256", "checksum": "a9ba3c53318a11d59b0ceef8903e04323594006c1988c78bd4eb1aef915f2a6f" }, "tags": [ "finance" ], "refs": [ [ "stg_tpch_orders" ], [ "order_items" ] ], "sources": [], "metrics": [], "description": "orders fact table", "columns": { "order_key": { "name": "order_key", "description": "primary key of the model", "meta": { "metrics": { "total_orders": { "type": "sum" } } }, "data_type": null, "quote": null, "tags": [] }, "customer_key": { "name": "customer_key", "description": "foreign key for customers", "meta": { "metrics": { "total_unique_customers": { "type": "count_distinct" } } }, "data_type": null, "quote": null, "tags": [] }, "order_date": { "name": "order_date", "description": "date of the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "status_code": { "name": "status_code", "description": "status of the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "priority_code": { "name": "priority_code", "description": "code associated with the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "clerk_name": { "name": "clerk_name", "description": "id of the clerk", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "ship_priority": { "name": "ship_priority", "description": "numeric representation of the shipping priority, zero being the default", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "order_count": { "name": "order_count", "description": "count of order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "gross_item_sales_amount": { "name": "gross_item_sales_amount", "description": "same as extended_price", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "item_discount_amount": { "name": "item_discount_amount", "description": "item level discount amount. this is always a negative number", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "item_tax_amount": { "name": "item_tax_amount", "description": "item level tax total", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "net_item_sales_amount": { "name": "net_item_sales_amount", "description": "the net total which factors in discount and tax", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": { "joins": [ { "join": "dim_customers", "sql_on": "${fct_orders.customer_key} = ${dim_customers.customer_key}" } ] }, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/core/core.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true, "meta": { "joins": [ { "join": "dim_customers", "sql_on": "${fct_orders.customer_key} = ${dim_customers.customer_key}" } ] }, "tags": [ "finance" ] }, "created_at": 1680812392.3840659 }, "model.tpch.fct_orders_stats_sql": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.tpch.fct_orders" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "marts", "core", "fct_orders_stats_sql" ], "unique_id": "model.tpch.fct_orders_stats_sql", "raw_code": "{% set ref_orders = ref('fct_orders') %}\n\nwith \n\norders as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref_orders }}\n\n),\n\ndescribed as (\n\n {% set columns = adapter.get_columns_in_relation(ref_orders) %}\n {% set numeric_cols = [] %}\n {% for col in columns %}\n {% if col.dtype in ('NUMBER', 'FLOAT') %}\n {% do numeric_cols.append(col) %}\n {% endif %}\n {% endfor %}\n \n {% set stats = {\n 'stddev': 'stddev(...)',\n 'min': 'min(...)',\n 'mean': 'avg(...)',\n 'count': 'count(...)',\n 'max': 'max(...)',\n } %}\n \n {% for stat_name, stat_calc in stats.items() %}\n \n select\n '{{ stat_name }}' as metric,\n {% for col in numeric_cols %}\n {{ stat_calc | replace('...', col.name) }} as {{ col.name }}{{ ',' if not loop.last }}\n {% endfor %}\n \n from {{ ref_orders }}\n \n {{ 'union all' if not loop.last }}\n \n {% endfor %}\n \n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from described", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "marts/core/fct_orders_stats_sql.sql", "original_file_path": "models/marts/core/fct_orders_stats_sql.sql", "name": "fct_orders_stats_sql", "alias": "fct_orders_stats_sql", "checksum": { "name": "sha256", "checksum": "94b0034c1b24bf728b17be25b1614a9f8efdacf4948301becb34f200cbc5ce3a" }, "tags": [], "refs": [ [ "fct_orders" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true }, "created_at": 1680812391.3223422 }, "model.tpch.fct_order_items": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.tpch.order_items", "model.tpch.part_suppliers" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [ "finance" ], "meta": { "joins": [ { "join": "dim_customers", "sql_on": "${fct_order_items.customer_key} = ${dim_customers.customer_key}" }, { "join": "stg_tpch_suppliers", "sql_on": "${fct_order_items.supplier_key} = ${stg_tpch_suppliers.supplier_key}" } ] }, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "marts", "core", "fct_order_items" ], "unique_id": "model.tpch.fct_order_items", "raw_code": "{{\n config(\n materialized = 'table',\n tags = ['finance']\n )\n}}\n\nwith order_item as (\n \n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('order_items') }}\n\n),\n\npart_supplier as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('part_suppliers') }}\n\n),\n\nfinal as (\n select \n order_item.order_item_key,\n order_item.order_key,\n order_item.order_date,\n order_item.customer_key,\n order_item.part_key,\n order_item.supplier_key,\n order_item.order_item_status_code,\n order_item.return_flag,\n order_item.line_number,\n order_item.ship_date,\n order_item.commit_date,\n order_item.receipt_date,\n order_item.ship_mode,\n part_supplier.cost as supplier_cost,\n {# ps.retail_price, #}\n order_item.base_price,\n order_item.discount_percentage,\n order_item.discounted_price,\n order_item.tax_rate,\n \n 1 as order_item_count,\n order_item.quantity,\n order_item.gross_item_sales_amount,\n order_item.discounted_item_sales_amount,\n order_item.item_discount_amount,\n order_item.item_tax_amount,\n order_item.net_item_sales_amount\n\n from\n order_item\n inner join part_supplier\n on order_item.part_key = part_supplier.part_key and\n order_item.supplier_key = part_supplier.supplier_key\n)\nselect \n *\nfrom\n final\norder by\n order_date", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "marts/core/fct_order_items.sql", "original_file_path": "models/marts/core/fct_order_items.sql", "name": "fct_order_items", "alias": "fct_order_items", "checksum": { "name": "sha256", "checksum": "930cd392bd55cd77e3dd367b235d47190e54c880832e65610a412de97d6e0c89" }, "tags": [ "finance" ], "refs": [ [ "order_items" ], [ "part_suppliers" ] ], "sources": [], "metrics": [], "description": "order items fact table", "columns": { "order_item_key": { "name": "order_item_key", "description": "surrogate key for the model -- combo of order_key + line_number", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "order_key": { "name": "order_key", "description": "foreign key for orders", "meta": { "metrics": { "items_in_order": { "type": "count_distinct" } } }, "data_type": null, "quote": null, "tags": [] }, "order_date": { "name": "order_date", "description": "date of the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "customer_key": { "name": "customer_key", "description": "foreign key for customers", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "part_key": { "name": "part_key", "description": "foreign key for part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "supplier_key": { "name": "supplier_key", "description": "foreign key for suppliers", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "order_item_status_code": { "name": "order_item_status_code", "description": "status of the order item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "return_flag": { "name": "return_flag", "description": "letter determining the status of the return", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "line_number": { "name": "line_number", "description": "sequence of the order items within the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "ship_date": { "name": "ship_date", "description": "the date the order item is being shipped", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "commit_date": { "name": "commit_date", "description": "the date the order item is being commited", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "receipt_date": { "name": "receipt_date", "description": "the receipt date of the order item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "ship_mode": { "name": "ship_mode", "description": "method of shipping", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "supplier_cost": { "name": "supplier_cost", "description": "raw cost", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "base_price": { "name": "base_price", "description": "since extended_price is the line item total, we back out the price per item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "discount_percentage": { "name": "discount_percentage", "description": "percentage of the discount", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "discounted_price": { "name": "discounted_price", "description": "factoring in the discount_percentage, the line item discount total", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "tax_rate": { "name": "tax_rate", "description": "tax rate of the order item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "order_item_count": { "name": "order_item_count", "description": "count of order items", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "quantity": { "name": "quantity", "description": "total units", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "gross_item_sales_amount": { "name": "gross_item_sales_amount", "description": "same as extended_price", "meta": { "metrics": { "total_revenue": { "type": "sum", "show_underlying_values": [ "return_flag", "order_item_status_code", "supplier_key", "ship_mode" ] } } }, "data_type": null, "quote": null, "tags": [] }, "discounted_item_sales_amount": { "name": "discounted_item_sales_amount", "description": "line item (includes quantity) discount amount", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "item_discount_amount": { "name": "item_discount_amount", "description": "item level discount amount. this is always a negative number", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "item_tax_amount": { "name": "item_tax_amount", "description": "item level tax total", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "net_item_sales_amount": { "name": "net_item_sales_amount", "description": "the net total which factors in discount and tax", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": { "joins": [ { "join": "dim_customers", "sql_on": "${fct_order_items.customer_key} = ${dim_customers.customer_key}" }, { "join": "stg_tpch_suppliers", "sql_on": "${fct_order_items.supplier_key} = ${stg_tpch_suppliers.supplier_key}" } ] }, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/core/core.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true, "meta": { "joins": [ { "join": "dim_customers", "sql_on": "${fct_order_items.customer_key} = ${dim_customers.customer_key}" }, { "join": "stg_tpch_suppliers", "sql_on": "${fct_order_items.supplier_key} = ${stg_tpch_suppliers.supplier_key}" } ] }, "tags": [ "finance" ] }, "created_at": 1680812392.373275 }, "model.tpch.int_segment__tracks": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.tpch.stg_dbtc__tracks", "model.tpch.stg_yahooquery__tracks" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "marts", "marketing", "int_segment__tracks" ], "unique_id": "model.tpch.int_segment__tracks", "raw_code": "{% set sources = ['dbtc', 'yahooquery'] -%}\n\nwith\n\n{% for source in sources -%}\n\n{{ source }}_source as (\n select\n event_text,\n context_library_version,\n context_page_referrer,\n context_page_url,\n event,\n context_ip,\n context_page_path,\n context_page_title,\n received_at,\n sent_at,\n timestamp,\n uuid_ts,\n context_locale,\n context_user_agent,\n id,\n original_timestamp,\n anonymous_id,\n context_library_name,\n '{{ source }}' as src\n\n from {{ ref('stg_' ~ source ~ '__tracks') }}\n),\n\n{% endfor -%}\n\nunioned_sources as (\n {% for source in sources -%}\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source }}_source\n {% if not loop.last %}union all{% endif %}\n {% endfor -%}\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from unioned_sources", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "marts/marketing/int_segment__tracks.sql", "original_file_path": "models/marts/marketing/int_segment__tracks.sql", "name": "int_segment__tracks", "alias": "int_segment__tracks", "checksum": { "name": "sha256", "checksum": "f2e55ca82a444c66fd823367f9af4bb5b3c61596d02fe3d20cf7e6c412964cff" }, "tags": [], "refs": [ [ "stg_dbtc__tracks" ], [ "stg_yahooquery__tracks" ] ], "sources": [], "metrics": [], "description": "", "columns": { "event_text": { "name": "event_text", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_library_version": { "name": "context_library_version", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_page_referrer": { "name": "context_page_referrer", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_page_url": { "name": "context_page_url", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "event": { "name": "event", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_ip": { "name": "context_ip", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_page_path": { "name": "context_page_path", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_page_title": { "name": "context_page_title", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "received_at": { "name": "received_at", "description": "", "meta": { "dimension": { "type": "timestamp" } }, "data_type": null, "quote": null, "tags": [] }, "sent_at": { "name": "sent_at", "description": "", "meta": { "dimension": { "type": "timestamp" } }, "data_type": null, "quote": null, "tags": [] }, "timestamp": { "name": "timestamp", "description": "", "meta": { "dimension": { "type": "timestamp" } }, "data_type": null, "quote": null, "tags": [] }, "uuid_ts": { "name": "uuid_ts", "description": "", "meta": { "dimension": { "type": "timestamp" } }, "data_type": null, "quote": null, "tags": [] }, "context_locale": { "name": "context_locale", "description": "Locale string for the current user, for example en-US.", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_user_agent": { "name": "context_user_agent", "description": "User agent of the device making the request.", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "id g": { "name": "id g", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "original_timestamp": { "name": "original_timestamp", "description": "", "meta": { "dimension": { "type": "timestamp" } }, "data_type": null, "quote": null, "tags": [] }, "anonymous_id": { "name": "anonymous_id", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_library_name": { "name": "context_library_name", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "src": { "name": "src", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/marketing/_models.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true }, "created_at": 1680812392.4777145 }, "model.tpch.int_segment__pages": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.tpch.stg_dbtc__pages", "model.tpch.stg_yahooquery__pages" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "marts", "marketing", "int_segment__pages" ], "unique_id": "model.tpch.int_segment__pages", "raw_code": "{% set sources = ['dbtc', 'yahooquery'] %}\n\nwith\n\n{% for source in sources %}\n\n{{ source }}_source as (\n select\n anonymous_id,\n context_locale,\n context_page_referrer,\n url,\n uuid_ts,\n context_library_name,\n context_library_version,\n id,\n received_at,\n title,\n context_page_title,\n path,\n referrer,\n timestamp,\n original_timestamp,\n sent_at,\n context_ip,\n context_page_path,\n context_page_url,\n context_user_agent,\n page_url_host,\n referrer_host,\n gclid,\n device,\n device_category,\n '{{ source }}' as src\n\n from {{ ref('stg_' ~ source ~ '__pages') }}\n where url not like 'http://127.0.0.1:8000%'\n and url not like 'http://localhost:8000%'\n),\n\n{% endfor %}\n\nunioned_sources as (\n {% for source in sources %}\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source }}_source\n {% if not loop.last %}union all{% endif %}\n {% endfor %}\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from unioned_sources", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "marts/marketing/int_segment__pages.sql", "original_file_path": "models/marts/marketing/int_segment__pages.sql", "name": "int_segment__pages", "alias": "int_segment__pages", "checksum": { "name": "sha256", "checksum": "994045c36846ffbd384037e011a24217aadbe10c7017ccc761038a37e917904f" }, "tags": [], "refs": [ [ "stg_dbtc__pages" ], [ "stg_yahooquery__pages" ] ], "sources": [], "metrics": [], "description": "", "columns": { "anonymous_id": { "name": "anonymous_id", "description": "A pseudo-unique substitute for a User ID, for cases when you don’t have an absolutely unique identifier. A userId or an anonymousId is required. See the Identities docs for more details.", "meta": { "dimension": { "type": "string" }, "metrics": { "number_of_unique_users": { "type": "sum" } } }, "data_type": null, "quote": null, "tags": [] }, "context_locale": { "name": "context_locale", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_page_referrer": { "name": "context_page_referrer", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "url": { "name": "url", "description": "Page’s full URL. Segment first looks for the canonical URL. If the canonical URL is not provided, Segment uses `location.href` from the DOM API.", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "uuid_ts": { "name": "uuid_ts", "description": "", "meta": { "dimension": { "type": "timestamp" } }, "data_type": null, "quote": null, "tags": [] }, "context_library_name": { "name": "context_library_name", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_library_version": { "name": "context_library_version", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "id": { "name": "id", "description": "", "meta": { "dimension": { "type": "string" }, "metrics": { "total_page_views": { "type": "count_distinct" } } }, "data_type": null, "quote": null, "tags": [] }, "received_at": { "name": "received_at", "description": "Automatically set by Segment, the timestamp of when a message is received by Segment It is an ISO-8601 date string. See the Timestamps fields docs for more detail.", "meta": { "dimension": { "type": "timestamp" } }, "data_type": null, "quote": null, "tags": [] }, "title": { "name": "title", "description": "Page’s title. Equivalent to `document.title` from the DOM API.", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_page_title": { "name": "context_page_title", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "path": { "name": "path", "description": "Path portion of the page's URL. Equivalent to `canonical_path` which defaults to `location.pathname` from the DOM API.", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "referrer": { "name": "referrer", "description": "Previous page’s full URL. Equivalent to `document.referrer` from the DOM API.", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "timestamp": { "name": "timestamp", "description": "Timestamp when the message itself took place, defaulted to the current time by the Segment Tracking API, as a ISO-8601 format date string. If the event just happened, leave it out and we’ll use the server’s time. If you’re importing data from the past, make sure you to provide a timestamp.See the Timestamps fields docs for more detail.", "meta": { "dimension": { "type": "timestamp" } }, "data_type": null, "quote": null, "tags": [] }, "original_timestamp": { "name": "original_timestamp", "description": "", "meta": { "dimension": { "type": "timestamp" } }, "data_type": null, "quote": null, "tags": [] }, "sent_at": { "name": "sent_at", "description": "Timestamp of when a message is sent to Segment, used for clock skew correction It is set automatically by the Segment tracking libraries. It is an ISO-8601 date string. See the Timestamps fields docs for more detail.", "meta": { "dimension": { "type": "timestamp" } }, "data_type": null, "quote": null, "tags": [] }, "context_ip": { "name": "context_ip", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_page_path": { "name": "context_page_path", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_page_url": { "name": "context_page_url", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "context_user_agent": { "name": "context_user_agent", "description": "", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "src": { "name": "src", "description": "The application source", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "device": { "name": "device", "description": "Type of device accessing the page", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "device_category": { "name": "device_category", "description": "Category of device accessing the page", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "page_url_host": { "name": "page_url_host", "description": "Page URL Host", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] }, "referrer_host": { "name": "referrer_host", "description": "Host of the referrer", "meta": { "dimension": { "type": "string" } }, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/marketing/_models.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true }, "created_at": 1680812392.4556487 }, "model.tpch.int_segment__link_clicked": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.tpch.stg_dbtc__link_clicked", "model.tpch.stg_yahooquery__link_clicked" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "marts", "marketing", "int_segment__link_clicked" ], "unique_id": "model.tpch.int_segment__link_clicked", "raw_code": "{% set sources = ['dbtc', 'yahooquery'] %}\n\nwith\n\n{% for source in sources %}\n\n{{ source }}_source as (\n select\n id,\n original_timestamp,\n received_at,\n timestamp,\n anonymous_id,\n context_ip,\n context_user_agent,\n link,\n context_library_version,\n event,\n event_text,\n uuid_ts,\n context_page_title,\n context_page_url,\n sent_at,\n context_library_name,\n context_locale,\n context_page_path,\n context_page_referrer,\n '{{ source }}' as src\n\n from {{ ref('stg_' ~ source ~ '__link_clicked') }}\n),\n\n{% endfor %}\n\nunioned_sources as (\n {% for source in sources %}\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source }}_source\n {% if not loop.last %}union all{% endif %}\n {% endfor %}\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from unioned_sources", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "marts/marketing/int_segment__link_clicked.sql", "original_file_path": "models/marts/marketing/int_segment__link_clicked.sql", "name": "int_segment__link_clicked", "alias": "int_segment__link_clicked", "checksum": { "name": "sha256", "checksum": "a5b55e991cd8a95f7c974762d9ab25ef838612a0b12e6b7ae2b0d341ae444634" }, "tags": [], "refs": [ [ "stg_dbtc__link_clicked" ], [ "stg_yahooquery__link_clicked" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/marketing/_models.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true }, "created_at": 1680812392.4784262 }, "model.tpch.use_variables": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.tpch.fct_order_items", "model.tpch.fct_order_items" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "demo_examples", "use_variables" ], "unique_id": "model.tpch.use_variables", "raw_code": "-- This is here to show that data older than start_date exists - run this first\n-- select min(order_date) from {{ ref('fct_order_items') }}\n\n-- start_date is defined in the dbt_project.yml \n-- to illustrate overriding variables from the command line, run dbt run -m use_variables --vars '{\"start_date\": \"1996-01-01\"}'\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('fct_order_items') }} where order_date >= '{{ var(\"start_date\") }}'", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "demo_examples/use_variables.sql", "original_file_path": "models/demo_examples/use_variables.sql", "name": "use_variables", "alias": "use_variables", "checksum": { "name": "sha256", "checksum": "2c9542a54b800a45ae4a6b5a0eee8e4609f5e15c9745aa48715872e6a4560b32" }, "tags": [], "refs": [ [ "fct_order_items" ], [ "fct_order_items" ] ], "sources": [], "metrics": [], "description": "demo to show variables", "columns": { "order_item_key": { "name": "order_item_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/demo_examples/demo_examples.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true }, "created_at": 1680812392.4812932 }, "model.tpch.materialization_incremental": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt.is_incremental" ], "nodes": [ "source.tpch.tpch.customer" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "demo_examples", "materialization_incremental" ], "unique_id": "model.tpch.materialization_incremental", "raw_code": "{{ config(materialized='incremental') }}\n\nwith source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('tpch', 'customer') }}\n\n),\n\n\nrenamed as (\n\n select\n c_custkey as customer_key,\n c_name as name,\n c_address as address, \n c_nationkey as nation_key,\n c_phone as phone_number,\n c_acctbal as account_balance,\n c_mktsegment as market_segment,\n c_comment as comment\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed\n\n{% if is_incremental() %}\n -- this filter will only be applied on an incremental run\n where customer_key not in (select customer_key from {{this}} )\n\n{% endif %}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "demo_examples/materialization_incremental.sql", "original_file_path": "models/demo_examples/materialization_incremental.sql", "name": "materialization_incremental", "alias": "materialization_incremental", "checksum": { "name": "sha256", "checksum": "2921d9e7dcbf49d7fb31b020db2b9e3ce1fa88b418c833f40738c937d4f92cae" }, "tags": [], "refs": [], "sources": [ [ "tpch", "customer" ] ], "metrics": [], "description": "demo to show incremental model", "columns": { "customer_key": { "name": "customer_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/demo_examples/demo_examples.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "incremental", "use_anonymous_sproc": true }, "created_at": 1680812392.4800248 }, "model.tpch.forecast_score_py": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.tpch.forecast_train_py" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [ "pandas", "prophet" ], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "snowflake_warehouse": "SNOWPARK_WH", "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "ml", "forecast_score_py" ], "unique_id": "model.tpch.forecast_score_py", "raw_code": "import pandas as pd\n\nfrom prophet import Prophet\nfrom prophet.serialize import model_from_json\n\n\ndef model(dbt, session):\n\n # dbt configuration\n dbt.config(packages=['pandas', 'prophet'], snowflake_warehouse='SNOWPARK_WH')\n\n # get trained ML models\n # TODO: filter by trained_at to last X days or something\n models = dbt.ref('forecast_train_py').to_pandas()\n\n # get most recent trained_at\n most_recent_trained_at = models['trained_at'].max()\n\n # filter models by most recent trained_at\n models = models[models['trained_at'] == most_recent_trained_at]\n\n # get list of unique locations dynamically\n locations = sorted(list(models['location'].unique()))\n\n # hydrate models as Prophet objects\n models = {\n location: model_from_json(\n models[models['location'] == location]['model'].iloc[0]\n )\n for location in locations\n }\n\n # create future dataframe to forecast on\n future = models[locations[0]].make_future_dataframe(periods=52 README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests 3, freq='W')\n\n # score model per location\n forecasts = {location: models[location].predict(future) for location in locations}\n\n # dataframe magic (use location to filter forecasts from single table)\n for location, forecast in forecasts.items():\n forecast['location'] = location\n\n # create a single dataframe to return\n df = pd.concat(forecasts.values())\n\n return df", "language": "python", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "ml/forecast_score_py.py", "original_file_path": "models/ml/forecast_score_py.py", "name": "forecast_score_py", "alias": "forecast_score_py", "checksum": { "name": "sha256", "checksum": "1c20c529b9c20f2c7a83d2885b162b9dfce14767deae9e356eb5404e05135e5f" }, "tags": [], "refs": [ [ "forecast_train_py" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true, "packages": [ "pandas", "prophet" ], "snowflake_warehouse": "SNOWPARK_WH" }, "created_at": 1680812391.3828099 }, "model.tpch.forecast_train_py": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.tpch.revenue_weekly_by_ship_mode" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [ "pandas", "prophet" ], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "snowflake_warehouse": "SNOWPARK_WH", "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "ml", "forecast_train_py" ], "unique_id": "model.tpch.forecast_train_py", "raw_code": "import pandas as pd\n\nfrom datetime import datetime\n\nfrom prophet import Prophet\nfrom prophet.serialize import model_to_json\n\n\ndef model(dbt, session):\n\n # dbt configuration\n dbt.config(\n materialized='incremental',\n packages=['pandas', 'prophet'],\n snowflake_warehouse='SNOWPARK_WH',\n )\n\n # get upstream data\n revenue = dbt.ref('revenue_weekly_by_ship_mode').to_pandas()\n\n # rename to match Prophet's expected column names\n renames = {\n 'date_week'.upper(): 'ds',\n 'ship_mode'.upper(): 'location',\n 'total_revenue'.upper(): 'y',\n }\n revenue = revenue.rename(columns=renames)\n\n # get list of unique locations dynamically\n locations = sorted(list(revenue['location'].unique()))\n\n # train the ML models per location\n models = [\n Prophet().fit(revenue[revenue['location'] == location])\n for location in locations\n ]\n\n # use current time to 'version' models\n trained_at = datetime.now()\n\n # persist models -- serialize Prophet as JSON via provided method\n df = pd.DataFrame(\n {\n 'trained_at': [trained_at] README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests len(locations),\n 'location': locations,\n 'model': [model_to_json(model) for model in models],\n }\n )\n\n return df", "language": "python", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "ml/forecast_train_py.py", "original_file_path": "models/ml/forecast_train_py.py", "name": "forecast_train_py", "alias": "forecast_train_py", "checksum": { "name": "sha256", "checksum": "ad2555bf17cf4d66fcde0c27186f19f0e2371eae2c14a2788d6abd462c4b760c" }, "tags": [], "refs": [ [ "revenue_weekly_by_ship_mode" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "incremental", "use_anonymous_sproc": true, "packages": [ "pandas", "prophet" ], "snowflake_warehouse": "SNOWPARK_WH" }, "created_at": 1680812391.3889546 }, "model.tpch.fct_orders_stats_py": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.tpch.fct_orders" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "snowflake_warehouse": "SNOWPARK_WH", "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "marts", "core", "fct_orders_stats_py" ], "unique_id": "model.tpch.fct_orders_stats_py", "raw_code": "def model(dbt, session):\n\n # Access to config block\n dbt.config(\n materialized='table',\n snowflake_warehouse='SNOWPARK_WH'\n )\n\n # Get upstream data\n df = dbt.ref('fct_orders')\n\n # Describe the data\n df = df.describe()\n\n return df", "language": "python", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "marts/core/fct_orders_stats_py.py", "original_file_path": "models/marts/core/fct_orders_stats_py.py", "name": "fct_orders_stats_py", "alias": "fct_orders_stats_py", "checksum": { "name": "sha256", "checksum": "82c61dec8dc48ce00ee01be352e975f664bfb54332224574d13c8c80d8574547" }, "tags": [], "refs": [ [ "fct_orders" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true, "snowflake_warehouse": "SNOWPARK_WH" }, "created_at": 1680812391.3942072 }, "snapshot.tpch.tpch_customer_snapshot": { "resource_type": "snapshot", "depends_on": { "macros": [], "nodes": [ "source.tpch.tpch.customer" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "c_custkey", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "strategy": "timestamp", "target_schema": "snapshots", "target_database": "doug_demo_v2", "updated_at": "_etl_updated_timestamp", "check_cols": null, "post-hook": [], "pre-hook": [] }, "database": "doug_demo_v2", "schema": "snapshots", "fqn": [ "tpch", "tpch", "tpch_customer_snapshot", "tpch_customer_snapshot" ], "unique_id": "snapshot.tpch.tpch_customer_snapshot", "raw_code": "\n\n{{ config(\n target_database='doug_demo_v2',\n target_schema='snapshots',\n unique_key='c_custkey',\n strategy='timestamp',\n updated_at='_etl_updated_timestamp',\n)}}\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('tpch', 'customer') }}\n\n", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "tpch/tpch_customer_snapshot.sql", "original_file_path": "snapshots/tpch/tpch_customer_snapshot.sql", "name": "tpch_customer_snapshot", "alias": "tpch_customer_snapshot", "checksum": { "name": "sha256", "checksum": "ad4d6b254a3d8260e5de6b207da31f0e294b173ea743eeb8e9e0fd9305216d6b" }, "tags": [], "refs": [], "sources": [ [ "tpch", "customer" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "target_database": "doug_demo_v2", "target_schema": "snapshots", "unique_key": "c_custkey", "strategy": "timestamp", "updated_at": "_etl_updated_timestamp" }, "created_at": 1680812391.4124432 }, "snapshot.tpch.tpch_supplier_snapshot": { "resource_type": "snapshot", "depends_on": { "macros": [], "nodes": [ "source.tpch.tpch.supplier" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "s_suppkey", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "strategy": "timestamp", "target_schema": "snapshots", "target_database": "doug_demo_v2", "updated_at": "_etl_updated_timestamp", "check_cols": null, "post-hook": [], "pre-hook": [] }, "database": "doug_demo_v2", "schema": "snapshots", "fqn": [ "tpch", "tpch", "tpch_supplier_snapshot", "tpch_supplier_snapshot" ], "unique_id": "snapshot.tpch.tpch_supplier_snapshot", "raw_code": "\n\n{{ config(\n target_database='doug_demo_v2',\n target_schema='snapshots',\n unique_key='s_suppkey',\n strategy='timestamp',\n updated_at='_etl_updated_timestamp',\n)}}\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('tpch', 'supplier') }}\n\n", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "tpch/tpch_supplier_snapshot.sql", "original_file_path": "snapshots/tpch/tpch_supplier_snapshot.sql", "name": "tpch_supplier_snapshot", "alias": "tpch_supplier_snapshot", "checksum": { "name": "sha256", "checksum": "18b69c9e200356c4b6a0bcd1ef3bf95834e5c1f1f3e4435f6806f8af758bf4a9" }, "tags": [], "refs": [], "sources": [ [ "tpch", "supplier" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "target_database": "doug_demo_v2", "target_schema": "snapshots", "unique_key": "s_suppkey", "strategy": "timestamp", "updated_at": "_etl_updated_timestamp" }, "created_at": 1680812391.42172 }, "snapshot.tpch.tpch_part_snapshot": { "resource_type": "snapshot", "depends_on": { "macros": [], "nodes": [ "source.tpch.tpch.part" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "p_partkey", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "strategy": "timestamp", "target_schema": "snapshots", "target_database": "doug_demo_v2", "updated_at": "_etl_updated_timestamp", "check_cols": null, "post-hook": [], "pre-hook": [] }, "database": "doug_demo_v2", "schema": "snapshots", "fqn": [ "tpch", "tpch", "tpch_part_snapshot", "tpch_part_snapshot" ], "unique_id": "snapshot.tpch.tpch_part_snapshot", "raw_code": "\n\n{{ config(\n target_database='doug_demo_v2',\n target_schema='snapshots',\n unique_key='p_partkey',\n strategy='timestamp',\n updated_at='_etl_updated_timestamp',\n)}}\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ source('tpch', 'part') }}\n\n", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "tpch/tpch_part_snapshot.sql", "original_file_path": "snapshots/tpch/tpch_part_snapshot.sql", "name": "tpch_part_snapshot", "alias": "tpch_part_snapshot", "checksum": { "name": "sha256", "checksum": "052952412b2ba03ba41cb88d43a5709b18063807c98750501b7288d4c7612642" }, "tags": [], "refs": [], "sources": [ [ "tpch", "part" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "target_database": "doug_demo_v2", "target_schema": "snapshots", "unique_key": "p_partkey", "strategy": "timestamp", "updated_at": "_etl_updated_timestamp" }, "created_at": 1680812391.4298055 }, "test.tpch.stg_tpch_orders_assert_positive_price": { "resource_type": "test", "depends_on": { "macros": [], "nodes": [ "model.tpch.stg_tpch_orders" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [ "finance" ], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "stg_tpch_orders_assert_positive_price" ], "unique_id": "test.tpch.stg_tpch_orders_assert_positive_price", "raw_code": "{{\n config(\n enabled=true,\n severity='error',\n tags = ['finance']\n )\n}}\n\nwith orders as ( select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('stg_tpch_orders') }} )\n\nselect *\nfrom orders \nwhere total_price < 0", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "stg_tpch_orders_assert_positive_price.sql", "original_file_path": "tests/stg_tpch_orders_assert_positive_price.sql", "name": "stg_tpch_orders_assert_positive_price", "alias": "stg_tpch_orders_assert_positive_price", "checksum": { "name": "sha256", "checksum": "dca5c812288805c6cf6f8cf1e6f737b7a0fb68b5ff351132039232ad25518abe" }, "tags": [ "finance" ], "refs": [ [ "stg_tpch_orders" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "enabled": true, "severity": "error", "tags": [ "finance" ] }, "created_at": 1680812391.4480574 }, "test.tpch.macro_stg_tpch_orders_assert_pos_price": { "resource_type": "test", "depends_on": { "macros": [ "macro.tpch.test_all_values_gte_zero" ], "nodes": [ "model.tpch.stg_tpch_orders" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [ "finance" ], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "macro_stg_tpch_orders_assert_pos_price" ], "unique_id": "test.tpch.macro_stg_tpch_orders_assert_pos_price", "raw_code": "{{\n config(\n enabled=true,\n severity='error',\n tags = ['finance']\n )\n}}\n\n\n{{ test_all_values_gte_zero('stg_tpch_orders', 'total_price') }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "macro_stg_tpch_orders_assert_pos_price.sql", "original_file_path": "tests/macro_stg_tpch_orders_assert_pos_price.sql", "name": "macro_stg_tpch_orders_assert_pos_price", "alias": "macro_stg_tpch_orders_assert_pos_price", "checksum": { "name": "sha256", "checksum": "bd383c3dbfe817a0fc1b18fa7431a8d3da0e4b53802e70a10f6c8461bbe89e79" }, "tags": [ "finance" ], "refs": [ [ "stg_tpch_orders" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "enabled": true, "severity": "error", "tags": [ "finance" ] }, "created_at": 1680812391.4532697 }, "test.tpch.macro_stg_tphc_suppliers_assert_pos_acct_bal": { "resource_type": "test", "depends_on": { "macros": [ "macro.tpch.test_all_values_gte_zero" ], "nodes": [ "model.tpch.stg_tpch_suppliers" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [ "finance" ], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "macro_stg_tphc_suppliers_assert_pos_acct_bal" ], "unique_id": "test.tpch.macro_stg_tphc_suppliers_assert_pos_acct_bal", "raw_code": "{{\n config(\n enabled=true,\n severity='warn',\n tags = ['finance']\n )\n}}\n\n\n{{ test_all_values_gte_zero('stg_tpch_suppliers', 'account_balance') }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "macro_stg_tphc_suppliers_assert_pos_acct_bal.sql", "original_file_path": "tests/macro_stg_tphc_suppliers_assert_pos_acct_bal.sql", "name": "macro_stg_tphc_suppliers_assert_pos_acct_bal", "alias": "macro_stg_tphc_suppliers_assert_pos_acct_bal", "checksum": { "name": "sha256", "checksum": "bf636d56abefc837b17711ef1da6b27464592065652f29633fa94905b5eea4cc" }, "tags": [ "finance" ], "refs": [ [ "stg_tpch_suppliers" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "enabled": true, "severity": "warn", "tags": [ "finance" ] }, "created_at": 1680812391.4615266 }, "seed.tpch.country_codes": { "resource_type": "seed", "depends_on": { "macros": [], "nodes": [] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "quote_columns": null, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "country_codes" ], "unique_id": "seed.tpch.country_codes", "raw_code": "", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "country_codes.csv", "original_file_path": "seeds/country_codes.csv", "name": "country_codes", "alias": "country_codes", "checksum": { "name": "sha256", "checksum": "ef89ea6f694c374f98a14061acb6674a4337e48262f90b1117e9c8584151b764" }, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "Lookup table for country and two digit ISO codes", "columns": { "Name": { "name": "Name", "description": "Name of the country", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "Code": { "name": "Code", "description": "2-digit ISO code for the country", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://seeds/data.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.5237808 }, "seed.tpch.snowflake_contract_rates": { "resource_type": "seed", "depends_on": { "macros": [], "nodes": [] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": { "effective_date": "DATE", "rate": "NUMBER" }, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "quote_columns": null, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "tpch", "snowflake_contract_rates" ], "unique_id": "seed.tpch.snowflake_contract_rates", "raw_code": "", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "snowflake_contract_rates.csv", "original_file_path": "seeds/snowflake_contract_rates.csv", "name": "snowflake_contract_rates", "alias": "snowflake_contract_rates", "checksum": { "name": "sha256", "checksum": "c6e1cea47545026b5501e22bf1f8756ddc4d1b8456ef90575f3b2aa8e47e1e5d" }, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "This is an example of a seed. Seeds are CSV files in your dbt project (typically in your data directory), that dbt can load into your data warehouse using the dbt seed command.\n", "columns": { "effective_date": { "name": "effective_date", "description": "effective date of contract", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "rate": { "name": "rate", "description": "rate based on the effective date", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://seeds/data.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "column_types": { "effective_date": "DATE", "rate": "NUMBER" } }, "created_at": 1680812392.5220063 }, "model.dbt_artifacts.dim_dbt__models": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.dbt_artifacts.stg_dbt__models" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "dim_dbt__models" ], "unique_id": "model.dbt_artifacts.dim_dbt__models", "raw_code": "with base as (\n\n select *\n from {{ ref('stg_dbt__models') }}\n\n),\n\nmodels as (\n\n select\n model_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n database,\n schema,\n name,\n depends_on_nodes,\n package_name,\n path,\n checksum,\n materialization,\n tags,\n meta,\n alias\n from base\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from models", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "dim_dbt__models.sql", "original_file_path": "models/dim_dbt__models.sql", "name": "dim_dbt__models", "alias": "dim_dbt__models", "checksum": { "name": "sha256", "checksum": "6c5c24260386f0d2c2284d0f6844eb4d55d71bb302b17959d5efbb703b34ff46" }, "tags": [], "refs": [ [ "stg_dbt__models" ] ], "sources": [], "metrics": [], "description": "Dimension model that contains data about models.", "columns": { "checksum": { "name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "database": { "name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "depends_on_nodes": { "name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "materialization": { "name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "model_execution_id": { "name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "path": { "name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "tags": { "name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "meta": { "name": "meta", "description": "The meta field of the config associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/dim_dbt__models.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1680812392.5834544 }, "model.dbt_artifacts.fct_dbt__model_executions": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.dbt_artifacts.stg_dbt__model_executions" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "fct_dbt__model_executions" ], "unique_id": "model.dbt_artifacts.fct_dbt__model_executions", "raw_code": "with base as (\n\n select *\n from {{ ref('stg_dbt__model_executions') }}\n\n),\n\nmodel_executions as (\n\n select\n model_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n was_full_refresh,\n thread_id,\n status,\n compile_started_at,\n query_completed_at,\n total_node_runtime,\n rows_affected,\n {% if target.type == 'bigquery' %}\n bytes_processed,\n {% endif %}\n materialization,\n schema, -- noqa\n name,\n alias\n from base\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from model_executions", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "fct_dbt__model_executions.sql", "original_file_path": "models/fct_dbt__model_executions.sql", "name": "fct_dbt__model_executions", "alias": "fct_dbt__model_executions", "checksum": { "name": "sha256", "checksum": "a111011ede098c4f4a04f05a9ab54a961c801f65463cf2f21e3028c5a43c28a3" }, "tags": [], "refs": [ [ "stg_dbt__model_executions" ] ], "sources": [], "metrics": [], "description": "Fact model that contains data about model executions.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "compile_started_at": { "name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "materialization": { "name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "model_execution_id": { "name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "query_completed_at": { "name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "rows_affected": { "name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "bytes_affected": { "name": "bytes_affected", "description": "Number of bytes processed by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "status": { "name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "thread_id": { "name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "total_node_runtime": { "name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "was_full_refresh": { "name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/fct_dbt__model_executions.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1680812392.566247 }, "model.dbt_artifacts.fct_dbt__snapshot_executions": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.dbt_artifacts.stg_dbt__snapshot_executions" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "fct_dbt__snapshot_executions" ], "unique_id": "model.dbt_artifacts.fct_dbt__snapshot_executions", "raw_code": "with base as (\n\n select *\n from {{ ref('stg_dbt__snapshot_executions') }}\n\n),\n\nsnapshot_executions as (\n\n select\n snapshot_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n was_full_refresh,\n thread_id,\n status,\n compile_started_at,\n query_completed_at,\n total_node_runtime,\n rows_affected,\n materialization,\n schema,\n name,\n alias\n from base\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from snapshot_executions", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "fct_dbt__snapshot_executions.sql", "original_file_path": "models/fct_dbt__snapshot_executions.sql", "name": "fct_dbt__snapshot_executions", "alias": "fct_dbt__snapshot_executions", "checksum": { "name": "sha256", "checksum": "9adc805db26a04e0c9640a31a86706026e90b49b6ac5eb0f12e3d2dfff41ab44" }, "tags": [], "refs": [ [ "stg_dbt__snapshot_executions" ] ], "sources": [], "metrics": [], "description": "Fact model that contains data about snapshot executions.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "compile_started_at": { "name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "materialization": { "name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "query_completed_at": { "name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "rows_affected": { "name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "snapshot_execution_id": { "name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "status": { "name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "thread_id": { "name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "total_node_runtime": { "name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "was_full_refresh": { "name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/fct_dbt__snapshot_executions.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1680812392.609475 }, "model.dbt_artifacts.fct_dbt__seed_executions": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.dbt_artifacts.stg_dbt__seed_executions" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "fct_dbt__seed_executions" ], "unique_id": "model.dbt_artifacts.fct_dbt__seed_executions", "raw_code": "with base as (\n\n select *\n from {{ ref('stg_dbt__seed_executions') }}\n\n),\n\nseed_executions as (\n\n select\n seed_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n was_full_refresh,\n thread_id,\n status,\n compile_started_at,\n query_completed_at,\n total_node_runtime,\n rows_affected,\n materialization,\n schema,\n name,\n alias\n from base\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from seed_executions", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "fct_dbt__seed_executions.sql", "original_file_path": "models/fct_dbt__seed_executions.sql", "name": "fct_dbt__seed_executions", "alias": "fct_dbt__seed_executions", "checksum": { "name": "sha256", "checksum": "192fd04719e40dd822d688c4a011b99865404320dd241a1893c26b3d78501252" }, "tags": [], "refs": [ [ "stg_dbt__seed_executions" ] ], "sources": [], "metrics": [], "description": "Fact model that contains data about seed executions.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "compile_started_at": { "name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "materialization": { "name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "query_completed_at": { "name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "rows_affected": { "name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "seed_execution_id": { "name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "status": { "name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "thread_id": { "name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "total_node_runtime": { "name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "was_full_refresh": { "name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/fct_dbt__seed_executions.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1680812392.6303864 }, "model.dbt_artifacts.fct_dbt__test_executions": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.dbt_artifacts.stg_dbt__test_executions" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "fct_dbt__test_executions" ], "unique_id": "model.dbt_artifacts.fct_dbt__test_executions", "raw_code": "with base as (\n\n select *\n from {{ ref('stg_dbt__test_executions') }}\n\n),\n\ntest_executions as (\n\n select\n test_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n was_full_refresh,\n thread_id,\n status,\n compile_started_at,\n query_completed_at,\n total_node_runtime,\n rows_affected,\n failures\n from base\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from test_executions", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "fct_dbt__test_executions.sql", "original_file_path": "models/fct_dbt__test_executions.sql", "name": "fct_dbt__test_executions", "alias": "fct_dbt__test_executions", "checksum": { "name": "sha256", "checksum": "e3f063c873571c579a15322193d5eb934d877c2b9ef4cfe56f0267af345a6142" }, "tags": [], "refs": [ [ "stg_dbt__test_executions" ] ], "sources": [], "metrics": [], "description": "Fact model that contains data about test executions.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "compile_started_at": { "name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "failures": { "name": "failures", "description": "Test failures. Value is 1 if the test failed, 0 if successful.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "query_completed_at": { "name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "rows_affected": { "name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "status": { "name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "test_execution_id": { "name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "thread_id": { "name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "total_node_runtime": { "name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "was_full_refresh": { "name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/fct_dbt__test_executions.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1680812392.6224673 }, "model.dbt_artifacts.dim_dbt__tests": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.dbt_artifacts.stg_dbt__tests" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "dim_dbt__tests" ], "unique_id": "model.dbt_artifacts.dim_dbt__tests", "raw_code": "with base as (\n\n select *\n from {{ ref('stg_dbt__tests') }}\n\n),\n\ntests as (\n\n select\n test_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n name,\n depends_on_nodes,\n package_name,\n test_path,\n tags\n from base\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from tests", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "dim_dbt__tests.sql", "original_file_path": "models/dim_dbt__tests.sql", "name": "dim_dbt__tests", "alias": "dim_dbt__tests", "checksum": { "name": "sha256", "checksum": "157bb696979983cf36a9779e9a56f6f833de060191a4b867f3648afafa32fb71" }, "tags": [], "refs": [ [ "stg_dbt__tests" ] ], "sources": [], "metrics": [], "description": "Dimension model that contains data about tests.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "depends_on_nodes": { "name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "tags": { "name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "test_execution_id": { "name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "test_path": { "name": "test_path", "description": "Path to the yaml (SQL in case of a singular test) file describing the test.", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/dim_dbt__tests.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1680812392.5730722 }, "model.dbt_artifacts.dim_dbt__current_models": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.dbt_artifacts.stg_dbt__models", "model.dbt_artifacts.stg_dbt__model_executions" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "dim_dbt__current_models" ], "unique_id": "model.dbt_artifacts.dim_dbt__current_models", "raw_code": "with base as (\n select *\n from {{ ref('stg_dbt__models') }}\n),\n\nmodel_executions as (\n select *\n from {{ ref('stg_dbt__model_executions') }}\n),\n\nlatest_models as (\n /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var Retrieves the models present in the most recent run */\n select *\n from base\n where run_started_at = (select max(run_started_at) from base)\n),\n\nlatest_models_runs as (\n /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var Retreives all successful run information for the models present in the most\n recent run and ranks them based on query completion time */\n select\n model_executions.node_id\n , model_executions.was_full_refresh\n , model_executions.query_completed_at\n , model_executions.total_node_runtime\n , model_executions.rows_affected\n {% if target.type == 'bigquery' %}\n , model_executions.bytes_processed\n {% endif %}\n , row_number() over (\n partition by latest_models.node_id, model_executions.was_full_refresh\n order by model_executions.query_completed_at desc /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var most recent ranked first */\n ) as run_idx\n from model_executions\n inner join latest_models on model_executions.node_id = latest_models.node_id\n where model_executions.status = 'success'\n),\n\nlatest_model_stats as (\n select\n node_id\n , max(case when was_full_refresh then query_completed_at end) as last_full_refresh_run_completed_at\n , max(case when was_full_refresh then total_node_runtime end) as last_full_refresh_run_total_runtime\n , max(case when was_full_refresh then rows_affected end) as last_full_refresh_run_rows_affected\n {% if target.type == 'bigquery' %}\n , max(case when was_full_refresh then bytes_processed end) as last_full_refresh_run_bytes_processed\n {% endif %}\n , max(query_completed_at) as last_run_completed_at\n , max(total_node_runtime) as last_run_total_runtime\n , max(rows_affected) as last_run_rows_affected\n {% if target.type == 'bigquery' %}\n , max(bytes_processed) as last_run_bytes_processed\n {% endif %}\n from latest_models_runs\n where run_idx = 1\n group by 1\n),\n\nfinal as (\n select\n latest_models.*\n , latest_model_stats.last_full_refresh_run_completed_at\n , latest_model_stats.last_full_refresh_run_total_runtime\n , latest_model_stats.last_full_refresh_run_rows_affected\n {% if target.type == 'bigquery' %}\n , latest_model_stats.last_full_refresh_run_bytes_processed\n {% endif %}\n , latest_model_stats.last_run_completed_at\n , latest_model_stats.last_run_total_runtime\n , latest_model_stats.last_run_rows_affected\n {% if target.type == 'bigquery' %}\n , latest_model_stats.last_run_bytes_processed\n {% endif %}\n from latest_models\n left join latest_model_stats\n on latest_models.node_id = latest_model_stats.node_id\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from final", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "dim_dbt__current_models.sql", "original_file_path": "models/dim_dbt__current_models.sql", "name": "dim_dbt__current_models", "alias": "dim_dbt__current_models", "checksum": { "name": "sha256", "checksum": "216edd27f1ec80eaaa536cc8c691f73f508a1367330102fa0dd14e203ad95385" }, "tags": [], "refs": [ [ "stg_dbt__models" ], [ "stg_dbt__model_executions" ] ], "sources": [], "metrics": [], "description": "Dimension model that contains data about models' most recent successful runs", "columns": { "checksum": { "name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "database": { "name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "depends_on_nodes": { "name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "last_full_refresh_run_completed_at": { "name": "last_full_refresh_run_completed_at", "description": "Timestamp when the node's SQL query completed on the last full (non-incremental) run.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "last_full_refresh_run_rows_affected": { "name": "last_full_refresh_run_rows_affected", "description": "Number of rows affected by the node's last full (non-incremental) run.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "last_full_refresh_run_bytes_processed": { "name": "last_full_refresh_run_bytes_processed", "description": "Number of bytes processed by the node's last full (non-incremental) run.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "last_full_refresh_run_total_runtime": { "name": "last_full_refresh_run_total_runtime", "description": "Total time spent executing the node's last full (non-incremental) run (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "last_run_completed_at": { "name": "last_run_completed_at", "description": "Timestamp when the node's SQL query completed on the last run.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "last_run_rows_affected": { "name": "last_run_rows_affected", "description": "Number of rows affected by the node's last run.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "last_run_bytes_processed": { "name": "last_run_bytes_processed", "description": "Number of bytes processed by the node's last run.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "last_run_total_runtime": { "name": "last_run_total_runtime", "description": "Total time spent executing the node's last run (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "materialization": { "name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "model_execution_id": { "name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "path": { "name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/dim_dbt__current_models.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1680812392.5408304 }, "model.dbt_artifacts.dim_dbt__exposures": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.dbt_artifacts.stg_dbt__exposures" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "dim_dbt__exposures" ], "unique_id": "model.dbt_artifacts.dim_dbt__exposures", "raw_code": "with base as (\n\n select *\n from {{ ref('stg_dbt__exposures') }}\n\n),\n\nexposures as (\n\n select\n exposure_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n name,\n type,\n owner,\n maturity,\n path,\n description,\n url,\n package_name,\n depends_on_nodes\n from base\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from exposures", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "dim_dbt__exposures.sql", "original_file_path": "models/dim_dbt__exposures.sql", "name": "dim_dbt__exposures", "alias": "dim_dbt__exposures", "checksum": { "name": "sha256", "checksum": "3632b529bf1dd2a1dfa86444a95ba41745c4c224121c19d3ddcfbc20a4016c7e" }, "tags": [], "refs": [ [ "stg_dbt__exposures" ] ], "sources": [], "metrics": [], "description": "Dimension model that contains data about exposures.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "depends_on_nodes": { "name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "description": { "name": "description", "description": "Node description.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "exposure_execution_id": { "name": "exposure_execution_id", "description": "Execution ID of the exposure node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "maturity": { "name": "maturity", "description": "Exposure maturity; one of high, medium, low.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "owner": { "name": "owner", "description": "Owner of the exposure, usually an email address.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "path": { "name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "type": { "name": "type", "description": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "url": { "name": "url", "description": "The URL of the BI tool where the data defined by the exposure can be viewed.", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/dim_dbt__exposures.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1680812392.5999286 }, "model.dbt_artifacts.dim_dbt__seeds": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.dbt_artifacts.stg_dbt__seeds" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "dim_dbt__seeds" ], "unique_id": "model.dbt_artifacts.dim_dbt__seeds", "raw_code": "with base as (\n\n select *\n from {{ ref('stg_dbt__seeds') }}\n\n),\n\nseeds as (\n\n select\n seed_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n database,\n schema,\n name,\n package_name,\n path,\n checksum,\n meta,\n alias\n from base\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from seeds", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "dim_dbt__seeds.sql", "original_file_path": "models/dim_dbt__seeds.sql", "name": "dim_dbt__seeds", "alias": "dim_dbt__seeds", "checksum": { "name": "sha256", "checksum": "16a76fa8d240b2014c6a230f5e3d1ad11bc58418ca059d3a23dd7d80cc5ef323" }, "tags": [], "refs": [ [ "stg_dbt__seeds" ] ], "sources": [], "metrics": [], "description": "Dimension model that contains data about seeds.", "columns": { "checksum": { "name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "database": { "name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "path": { "name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "seed_execution_id": { "name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/dim_dbt__seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1680812392.5897658 }, "model.dbt_artifacts.fct_dbt__invocations": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.dbt_artifacts.stg_dbt__invocations" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "fct_dbt__invocations" ], "unique_id": "model.dbt_artifacts.fct_dbt__invocations", "raw_code": "with base as (\n\n select *\n from {{ ref('stg_dbt__invocations') }}\n\n),\n\ninvocations as (\n\n select\n command_invocation_id,\n dbt_version,\n project_name,\n run_started_at,\n dbt_command,\n full_refresh_flag,\n target_profile_name,\n target_name,\n target_schema,\n target_threads,\n dbt_cloud_project_id,\n dbt_cloud_job_id,\n dbt_cloud_run_id,\n dbt_cloud_run_reason_category,\n dbt_cloud_run_reason,\n env_vars,\n dbt_vars,\n invocation_args,\n dbt_custom_envs\n from base\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from invocations", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "fct_dbt__invocations.sql", "original_file_path": "models/fct_dbt__invocations.sql", "name": "fct_dbt__invocations", "alias": "fct_dbt__invocations", "checksum": { "name": "sha256", "checksum": "03ad2d98f2bb14c728dfd1e77a3d882e271535779d024dc0a7be5ab44ce3d771" }, "tags": [], "refs": [ [ "stg_dbt__invocations" ] ], "sources": [], "metrics": [], "description": "Fact model that contains data about invocations.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "dbt_version": { "name": "dbt_version", "description": "Installed version of dbt that is currently running.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "project_name": { "name": "project_name", "description": "Name for the root-level project which is being run by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "dbt_command": { "name": "dbt_command", "description": "dbt command of this run.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "full_refresh_flag": { "name": "full_refresh_flag", "description": "Boolean flag indicating whether the dbt run was in full refresh mode or not.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "target_profile_name": { "name": "target_profile_name", "description": "The name of the active profile.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "target_name": { "name": "target_name", "description": "The name of the active target.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "target_schema": { "name": "target_schema", "description": "The name of the target dbt schema.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "target_threads": { "name": "target_threads", "description": "The number of threads in use by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "dbt_cloud_project_id": { "name": "dbt_cloud_project_id", "description": "The ID of the dbt Cloud Project for this run.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "dbt_cloud_job_id": { "name": "dbt_cloud_job_id", "description": "The ID of the dbt Cloud Job for this run.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "dbt_cloud_run_id": { "name": "dbt_cloud_run_id", "description": "The ID of this particular run.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "dbt_cloud_run_reason_category": { "name": "dbt_cloud_run_reason_category", "description": "The \"category\" of the trigger for this run.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "dbt_cloud_run_reason": { "name": "dbt_cloud_run_reason", "description": "The specific trigger for this run.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "env_vars": { "name": "env_vars", "description": "Key-value pairs of environment variables to be capture.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "dbt_vars": { "name": "dbt_vars", "description": "Key-value pairs of project variables to be capture.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "invocation_args": { "name": "invocation_args", "description": "Key-value pairs of args passed to invocation.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "dbt_custom_envs": { "name": "dbt_custom_envs", "description": "Key-value pairs of environment variables passed to invocation that have the prefix DBT_ENV_CUSTOM_ENV_", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/fct_dbt__invocations.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1680812392.5510695 }, "model.dbt_artifacts.dim_dbt__snapshots": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.dbt_artifacts.stg_dbt__snapshots" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "dim_dbt__snapshots" ], "unique_id": "model.dbt_artifacts.dim_dbt__snapshots", "raw_code": "with base as (\n\n select *\n from {{ ref('stg_dbt__snapshots') }}\n\n),\n\nsnapshots as (\n\n select\n snapshot_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n database,\n schema,\n name,\n depends_on_nodes,\n package_name,\n path,\n checksum,\n strategy,\n meta,\n alias\n from base\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from snapshots", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "dim_dbt__snapshots.sql", "original_file_path": "models/dim_dbt__snapshots.sql", "name": "dim_dbt__snapshots", "alias": "dim_dbt__snapshots", "checksum": { "name": "sha256", "checksum": "5513b505bb4f4c2f46b2ae1bc8d7fe6c292b4ab9e3db6e9676ecdc9c7a43e9e4" }, "tags": [], "refs": [ [ "stg_dbt__snapshots" ] ], "sources": [], "metrics": [], "description": "Dimension model that contains data about snapshots.", "columns": { "checksum": { "name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "database": { "name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "depends_on_nodes": { "name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "path": { "name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "snapshot_execution_id": { "name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "strategy": { "name": "strategy", "description": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt — timestamp\nand check.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/dim_dbt__snapshots.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1680812392.5581038 }, "model.dbt_artifacts.dim_dbt__sources": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.dbt_artifacts.stg_dbt__sources" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "dim_dbt__sources" ], "unique_id": "model.dbt_artifacts.dim_dbt__sources", "raw_code": "with base as (\n\n select *\n from {{ ref('stg_dbt__sources') }}\n\n),\n\nsources as (\n\n select\n source_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n database,\n schema,\n source_name,\n loader,\n name,\n identifier,\n loaded_at_field,\n freshness\n from base\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from sources", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "dim_dbt__sources.sql", "original_file_path": "models/dim_dbt__sources.sql", "name": "dim_dbt__sources", "alias": "dim_dbt__sources", "checksum": { "name": "sha256", "checksum": "319fceac4dee8ee048a99d857d27e5e70d499ef12718abed922ae0eee0f69313" }, "tags": [], "refs": [ [ "stg_dbt__sources" ] ], "sources": [], "metrics": [], "description": "Dimension model that contains data about sources.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "database": { "name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "freshness": { "name": "freshness", "description": "The specified freshness of the source model.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "identifier": { "name": "identifier", "description": "Source identifier.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "loaded_at_field": { "name": "loaded_at_field", "description": "A column name (or expression) that returns a timestamp indicating freshness.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "loader": { "name": "loader", "description": "Describes the tool that loads this source into your warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "source_execution_id": { "name": "source_execution_id", "description": "Execution ID of the source node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "source_name": { "name": "source_name", "description": "Source name.", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/dim_dbt__sources.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1680812392.6163204 }, "model.dbt_artifacts.stg_dbt__exposures": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt_artifacts.surrogate_key" ], "nodes": [ "model.dbt_artifacts.exposures" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "staging", "stg_dbt__exposures" ], "unique_id": "model.dbt_artifacts.stg_dbt__exposures", "raw_code": "with base as (\n\n select *\n from {{ ref('exposures') }}\n\n),\n\nenhanced as (\n\n select\n {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as exposure_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n name,\n type,\n owner,\n maturity,\n path,\n description,\n url,\n package_name,\n depends_on_nodes\n from base\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__exposures.sql", "original_file_path": "models/staging/stg_dbt__exposures.sql", "name": "stg_dbt__exposures", "alias": "stg_dbt__exposures", "checksum": { "name": "sha256", "checksum": "cfc6ecf133242c233b69e2abd71f9d77867a70aad79314ec5c563c8604a29ddf" }, "tags": [], "refs": [ [ "exposures" ] ], "sources": [], "metrics": [], "description": "Staging model that contains data about exposure exections. One row per node per run.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "depends_on_nodes": { "name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "description": { "name": "description", "description": "Node description.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "exposure_execution_id": { "name": "exposure_execution_id", "description": "Execution ID of the exposure node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "maturity": { "name": "maturity", "description": "Exposure maturity; one of high, medium, low.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "owner": { "name": "owner", "description": "Owner of the exposure, usually an email address.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "path": { "name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "type": { "name": "type", "description": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "url": { "name": "url", "description": "The URL of the BI tool where the data defined by the exposure can be viewed.", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/staging/stg_dbt__exposures.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1680812392.6464274 }, "model.dbt_artifacts.stg_dbt__seed_executions": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt_artifacts.surrogate_key", "macro.dbt.split_part" ], "nodes": [ "model.dbt_artifacts.seed_executions" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "staging", "stg_dbt__seed_executions" ], "unique_id": "model.dbt_artifacts.stg_dbt__seed_executions", "raw_code": "with base as (\n\n select *\n from {{ ref('seed_executions') }}\n\n),\n\nenhanced as (\n\n select\n {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as seed_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n was_full_refresh,\n {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n status,\n compile_started_at,\n query_completed_at,\n total_node_runtime,\n rows_affected,\n materialization,\n schema, -- noqa\n name,\n alias\n from base\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__seed_executions.sql", "original_file_path": "models/staging/stg_dbt__seed_executions.sql", "name": "stg_dbt__seed_executions", "alias": "stg_dbt__seed_executions", "checksum": { "name": "sha256", "checksum": "243d3f4bc68ab9dd03899dc83fdb7118817e07a116b865c80157c1d8118d9505" }, "tags": [], "refs": [ [ "seed_executions" ] ], "sources": [], "metrics": [], "description": "Staging model that contains data about seed executions. One row per seed execution.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "compile_started_at": { "name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "materialization": { "name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "query_completed_at": { "name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "rows_affected": { "name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "seed_execution_id": { "name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "status": { "name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "thread_id": { "name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "total_node_runtime": { "name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "was_full_refresh": { "name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/staging/stg_dbt__seed_executions.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1680812392.6620448 }, "model.dbt_artifacts.stg_dbt__tests": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt_artifacts.surrogate_key" ], "nodes": [ "model.dbt_artifacts.tests" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "staging", "stg_dbt__tests" ], "unique_id": "model.dbt_artifacts.stg_dbt__tests", "raw_code": "with base as (\n\n select *\n from {{ ref('tests') }}\n\n),\n\nenhanced as (\n\n select\n {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as test_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n name,\n depends_on_nodes,\n package_name,\n test_path,\n tags\n from base\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__tests.sql", "original_file_path": "models/staging/stg_dbt__tests.sql", "name": "stg_dbt__tests", "alias": "stg_dbt__tests", "checksum": { "name": "sha256", "checksum": "bc0a410ed9571f7795a79737a2cd304a28ee4db922dc90e4beb0c66949b5c23f" }, "tags": [], "refs": [ [ "tests" ] ], "sources": [], "metrics": [], "description": "Staging model that contains metadata about test executions. One row per node per run.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "depends_on_nodes": { "name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "tags": { "name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "test_execution_id": { "name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "test_path": { "name": "test_path", "description": "Path to the yaml (SQL in case of a singular test) file describing the test.", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/staging/stg_dbt__tests.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1680812392.6762838 }, "model.dbt_artifacts.stg_dbt__seeds": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt_artifacts.surrogate_key" ], "nodes": [ "model.dbt_artifacts.seeds" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "staging", "stg_dbt__seeds" ], "unique_id": "model.dbt_artifacts.stg_dbt__seeds", "raw_code": "with base as (\n\n select *\n from {{ ref('seeds') }}\n\n),\n\nenhanced as (\n\n select\n {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as seed_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n database,\n schema,\n name,\n package_name,\n path,\n checksum,\n meta,\n alias\n from base\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__seeds.sql", "original_file_path": "models/staging/stg_dbt__seeds.sql", "name": "stg_dbt__seeds", "alias": "stg_dbt__seeds", "checksum": { "name": "sha256", "checksum": "c736e277d661dffd4689ebd5e8a670ffad90103b9dbcd173e54d4037b06ddfd8" }, "tags": [], "refs": [ [ "seeds" ] ], "sources": [], "metrics": [], "description": "Stageing model that contains metadata about seed executions. One row per node per run.", "columns": { "checksum": { "name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "database": { "name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "path": { "name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "seed_execution_id": { "name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/staging/stg_dbt__seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1680812392.6892252 }, "model.dbt_artifacts.stg_dbt__snapshot_executions": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt_artifacts.surrogate_key", "macro.dbt.split_part" ], "nodes": [ "model.dbt_artifacts.snapshot_executions" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "staging", "stg_dbt__snapshot_executions" ], "unique_id": "model.dbt_artifacts.stg_dbt__snapshot_executions", "raw_code": "with base as (\n\n select *\n from {{ ref('snapshot_executions') }}\n\n),\n\nenhanced as (\n\n select\n {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as snapshot_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n was_full_refresh,\n {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n status,\n compile_started_at,\n query_completed_at,\n total_node_runtime,\n rows_affected,\n materialization,\n schema, -- noqa\n name,\n alias\n from base\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__snapshot_executions.sql", "original_file_path": "models/staging/stg_dbt__snapshot_executions.sql", "name": "stg_dbt__snapshot_executions", "alias": "stg_dbt__snapshot_executions", "checksum": { "name": "sha256", "checksum": "c19c8b61848ea238ca8e9a6be4390c8c6aa21854583ca6db78c8ac4122425b2d" }, "tags": [], "refs": [ [ "snapshot_executions" ] ], "sources": [], "metrics": [], "description": "Staging model that contains data about snapshot executions. One row per snapshot execution.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "compile_started_at": { "name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "materialization": { "name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "query_completed_at": { "name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "rows_affected": { "name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "snapshot_execution_id": { "name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "status": { "name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "thread_id": { "name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "total_node_runtime": { "name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "was_full_refresh": { "name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/staging/stg_dbt__snapshot_executions.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1680812392.6542642 }, "model.dbt_artifacts.stg_dbt__test_executions": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt_artifacts.surrogate_key", "macro.dbt.split_part" ], "nodes": [ "model.dbt_artifacts.test_executions" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "staging", "stg_dbt__test_executions" ], "unique_id": "model.dbt_artifacts.stg_dbt__test_executions", "raw_code": "with base as (\n\n select *\n from {{ ref('test_executions') }}\n\n),\n\nenhanced as (\n\n select\n {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as test_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n was_full_refresh,\n {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n status,\n compile_started_at,\n query_completed_at,\n total_node_runtime,\n rows_affected,\n failures\n from base\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__test_executions.sql", "original_file_path": "models/staging/stg_dbt__test_executions.sql", "name": "stg_dbt__test_executions", "alias": "stg_dbt__test_executions", "checksum": { "name": "sha256", "checksum": "9fd97246486de3156eaa84ad6c257300dbd1f4b3705da2b92fda6e1201f47c57" }, "tags": [], "refs": [ [ "test_executions" ] ], "sources": [], "metrics": [], "description": "Staging model that contains metadata about test executions. One row per test execution.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "compile_started_at": { "name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "failures": { "name": "failures", "description": "Test failures. Value is 1 if the test failed, 0 if successful.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "query_completed_at": { "name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "rows_affected": { "name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "status": { "name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "test_execution_id": { "name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "thread_id": { "name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "total_node_runtime": { "name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "was_full_refresh": { "name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/staging/stg_dbt__test_executions.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1680812392.6831248 }, "model.dbt_artifacts.stg_dbt__sources": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt_artifacts.surrogate_key" ], "nodes": [ "model.dbt_artifacts.sources" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "staging", "stg_dbt__sources" ], "unique_id": "model.dbt_artifacts.stg_dbt__sources", "raw_code": "with base as (\n\n select *\n from {{ ref('sources') }}\n\n),\n\nenhanced as (\n\n select\n {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as source_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n database,\n schema,\n source_name,\n loader,\n name,\n identifier,\n loaded_at_field,\n freshness\n from base\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__sources.sql", "original_file_path": "models/staging/stg_dbt__sources.sql", "name": "stg_dbt__sources", "alias": "stg_dbt__sources", "checksum": { "name": "sha256", "checksum": "db8ba4f61865eb4d5192926653ee56f10a550377e2faf2c36257af8cc7b3c8a7" }, "tags": [], "refs": [ [ "sources" ] ], "sources": [], "metrics": [], "description": "Staging model that contains data about sources. One row per node per execution.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "database": { "name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "freshness": { "name": "freshness", "description": "The specified freshness of the source model.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "identifier": { "name": "identifier", "description": "Source identifier.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "loaded_at_field": { "name": "loaded_at_field", "description": "A column name (or expression) that returns a timestamp indicating freshness.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "loader": { "name": "loader", "description": "Describes the tool that loads this source into your warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "source_execution_id": { "name": "source_execution_id", "description": "Execution ID of the source node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "source_name": { "name": "source_name", "description": "Source name.", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/staging/stg_dbt__sources.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1680812392.706196 }, "model.dbt_artifacts.stg_dbt__model_executions": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt_artifacts.surrogate_key", "macro.dbt.split_part" ], "nodes": [ "model.dbt_artifacts.model_executions" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "staging", "stg_dbt__model_executions" ], "unique_id": "model.dbt_artifacts.stg_dbt__model_executions", "raw_code": "with base as (\n\n select *\n from {{ ref('model_executions') }}\n\n),\n\nenhanced as (\n\n select\n {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as model_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n was_full_refresh,\n {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n status,\n compile_started_at,\n query_completed_at,\n total_node_runtime,\n rows_affected,\n {% if target.type == 'bigquery' %}\n bytes_processed,\n {% endif %}\n materialization,\n schema, -- noqa\n name,\n alias\n from base\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__model_executions.sql", "original_file_path": "models/staging/stg_dbt__model_executions.sql", "name": "stg_dbt__model_executions", "alias": "stg_dbt__model_executions", "checksum": { "name": "sha256", "checksum": "8bf97279b4d80d1e5d49fb238600b050290956671acf4e0b87ba2ba254824e66" }, "tags": [], "refs": [ [ "model_executions" ] ], "sources": [], "metrics": [], "description": "Staging model that contains data about model executions. One row per model execution.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "compile_started_at": { "name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "materialization": { "name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "model_execution_id": { "name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "query_completed_at": { "name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "rows_affected": { "name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "bytes_processed": { "name": "bytes_processed", "description": "Number of bytes processed by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "status": { "name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "thread_id": { "name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "total_node_runtime": { "name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "was_full_refresh": { "name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/staging/stg_dbt__model_executions.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1680812392.67088 }, "model.dbt_artifacts.stg_dbt__invocations": { "resource_type": "model", "depends_on": { "macros": [], "nodes": [ "model.dbt_artifacts.invocations" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "staging", "stg_dbt__invocations" ], "unique_id": "model.dbt_artifacts.stg_dbt__invocations", "raw_code": "with base as (\n\n select *\n from {{ ref('invocations') }}\n\n),\n\nenhanced as (\n\n select\n command_invocation_id,\n dbt_version,\n project_name,\n run_started_at,\n dbt_command,\n full_refresh_flag,\n target_profile_name,\n target_name,\n target_schema,\n target_threads,\n dbt_cloud_project_id,\n dbt_cloud_job_id,\n dbt_cloud_run_id,\n dbt_cloud_run_reason_category,\n dbt_cloud_run_reason,\n env_vars,\n dbt_vars,\n invocation_args,\n dbt_custom_envs\n from base\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__invocations.sql", "original_file_path": "models/staging/stg_dbt__invocations.sql", "name": "stg_dbt__invocations", "alias": "stg_dbt__invocations", "checksum": { "name": "sha256", "checksum": "8fad1c836b8fa4f77766e35537b26cfddbe8869d47766bae2bd93676268a35ab" }, "tags": [], "refs": [ [ "invocations" ] ], "sources": [], "metrics": [], "description": "Staging model that contains data about the invocations of dbt. One row per run.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "dbt_version": { "name": "dbt_version", "description": "Installed version of dbt that is currently running.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "project_name": { "name": "project_name", "description": "Name for the root-level project which is being run by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "dbt_command": { "name": "dbt_command", "description": "dbt command of this run.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "full_refresh_flag": { "name": "full_refresh_flag", "description": "Boolean flag indicating whether the dbt run was in full refresh mode or not.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "target_profile_name": { "name": "target_profile_name", "description": "The name of the active profile.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "target_name": { "name": "target_name", "description": "The name of the active target.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "target_schema": { "name": "target_schema", "description": "The name of the target dbt schema.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "target_threads": { "name": "target_threads", "description": "The number of threads in use by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "dbt_cloud_project_id": { "name": "dbt_cloud_project_id", "description": "The ID of the dbt Cloud Project for this run.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "dbt_cloud_job_id": { "name": "dbt_cloud_job_id", "description": "The ID of the dbt Cloud Job for this run.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "dbt_cloud_run_id": { "name": "dbt_cloud_run_id", "description": "The ID of this particular run.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "dbt_cloud_run_reason_category": { "name": "dbt_cloud_run_reason_category", "description": "The \"category\" of the trigger for this run.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "dbt_cloud_run_reason": { "name": "dbt_cloud_run_reason", "description": "The specific trigger for this run.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "env_vars": { "name": "env_vars", "description": "Key-value pairs of environment variables to be capture.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "dbt_vars": { "name": "dbt_vars", "description": "Key-value pairs of project variables to be capture.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "invocation_args": { "name": "invocation_args", "description": "Key-value pairs of args passed to invocation.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "dbt_custom_envs": { "name": "dbt_custom_envs", "description": "Key-value pairs of environment variables passed to invocation that have the prefix DBT_ENV_CUSTOM_ENV_", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/staging/stg_dbt__invocations.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1680812392.6996164 }, "model.dbt_artifacts.stg_dbt__snapshots": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt_artifacts.surrogate_key" ], "nodes": [ "model.dbt_artifacts.snapshots" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "staging", "stg_dbt__snapshots" ], "unique_id": "model.dbt_artifacts.stg_dbt__snapshots", "raw_code": "with base as (\n\n select *\n from {{ ref('snapshots') }}\n\n),\n\nenhanced as (\n\n select\n {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as snapshot_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n database,\n schema,\n name,\n depends_on_nodes,\n package_name,\n path,\n checksum,\n strategy,\n meta,\n alias\n from base\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__snapshots.sql", "original_file_path": "models/staging/stg_dbt__snapshots.sql", "name": "stg_dbt__snapshots", "alias": "stg_dbt__snapshots", "checksum": { "name": "sha256", "checksum": "de6ad5bd8b27e3eb35e7ccaee94c66953d178030f7336b10a279030e81e5da45" }, "tags": [], "refs": [ [ "snapshots" ] ], "sources": [], "metrics": [], "description": "Staging model that contains metadata about seed executions. One row per node per run.", "columns": { "checksum": { "name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "database": { "name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "depends_on_nodes": { "name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "path": { "name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "snapshot_execution_id": { "name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "strategy": { "name": "strategy", "description": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt — timestamp\nand check.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/staging/stg_dbt__snapshots.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1680812392.7134967 }, "model.dbt_artifacts.stg_dbt__models": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt_artifacts.surrogate_key" ], "nodes": [ "model.dbt_artifacts.models" ] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "staging", "stg_dbt__models" ], "unique_id": "model.dbt_artifacts.stg_dbt__models", "raw_code": "with base as (\n\n select *\n from {{ ref('models') }}\n\n),\n\nenhanced as (\n\n select\n {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as model_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n database,\n schema,\n name,\n depends_on_nodes,\n package_name,\n path,\n checksum,\n materialization,\n tags,\n meta,\n alias\n from base\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__models.sql", "original_file_path": "models/staging/stg_dbt__models.sql", "name": "stg_dbt__models", "alias": "stg_dbt__models", "checksum": { "name": "sha256", "checksum": "dcbd8eace8332defd857f1b6ec6be50110795b88a93a8b38ca5f050a299e7295" }, "tags": [], "refs": [ [ "models" ] ], "sources": [], "metrics": [], "description": "Staging model that contains metadata about model executions. One row per node per run.", "columns": { "checksum": { "name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "database": { "name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "depends_on_nodes": { "name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "materialization": { "name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "model_execution_id": { "name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "path": { "name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "tags": { "name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "meta": { "name": "meta", "description": "The meta field of the config associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/staging/stg_dbt__models.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1680812392.6391137 }, "model.dbt_artifacts.invocations": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_int", "macro.dbt_artifacts.type_json" ], "nodes": [] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "sources", "invocations" ], "unique_id": "model.dbt_artifacts.invocations", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n select 1 as foo\n)\n\nselect\n cast(null as {{ type_string() }}) as command_invocation_id,\n cast(null as {{ type_string() }}) as dbt_version,\n cast(null as {{ type_string() }}) as project_name,\n cast(null as {{ type_timestamp() }}) as run_started_at,\n cast(null as {{ type_string() }}) as dbt_command,\n cast(null as {{ type_boolean() }}) as full_refresh_flag,\n cast(null as {{ type_string() }}) as target_profile_name,\n cast(null as {{ type_string() }}) as target_name,\n cast(null as {{ type_string() }}) as target_schema,\n cast(null as {{ type_int() }}) as target_threads,\n cast(null as {{ type_string() }}) as dbt_cloud_project_id,\n cast(null as {{ type_string() }}) as dbt_cloud_job_id,\n cast(null as {{ type_string() }}) as dbt_cloud_run_id,\n cast(null as {{ type_string() }}) as dbt_cloud_run_reason_category,\n cast(null as {{ type_string() }}) as dbt_cloud_run_reason,\n cast(null as {{ type_json() }}) as env_vars,\n cast(null as {{ type_json() }}) as dbt_vars,\n cast(null as {{ type_json() }}) as invocation_args,\n cast(null as {{ type_json() }}) as dbt_custom_envs\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "sources/invocations.sql", "original_file_path": "models/sources/invocations.sql", "name": "invocations", "alias": "invocations", "checksum": { "name": "sha256", "checksum": "0cb88835ee9f206b5dd1ff7c74f34e3f6e5027cc6d12edd140568187ccb0f4f4" }, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "use_anonymous_sproc": true }, "created_at": 1680812391.6568878 }, "model.dbt_artifacts.seed_executions": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int" ], "nodes": [] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "sources", "seed_executions" ], "unique_id": "model.dbt_artifacts.seed_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n select 1 as foo\n)\n\nselect\n cast(null as {{ type_string() }}) as command_invocation_id,\n cast(null as {{ type_string() }}) as node_id,\n cast(null as {{ type_timestamp() }}) as run_started_at,\n cast(null as {{ type_boolean() }}) as was_full_refresh,\n cast(null as {{ type_string() }}) as thread_id,\n cast(null as {{ type_string() }}) as status,\n cast(null as {{ type_timestamp() }}) as compile_started_at,\n cast(null as {{ type_timestamp() }}) as query_completed_at,\n cast(null as {{ type_float() }}) as total_node_runtime,\n cast(null as {{ type_int() }}) as rows_affected,\n cast(null as {{ type_string() }}) as materialization,\n cast(null as {{ type_string() }}) as schema,\n cast(null as {{ type_string() }}) as name,\n cast(null as {{ type_string() }}) as alias\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "sources/seed_executions.sql", "original_file_path": "models/sources/seed_executions.sql", "name": "seed_executions", "alias": "seed_executions", "checksum": { "name": "sha256", "checksum": "2ecc1bc070853022de7bb1fe576790937aed14f381f9ad14d9ab1419f0aebb58" }, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "use_anonymous_sproc": true }, "created_at": 1680812391.68058 }, "model.dbt_artifacts.sources": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array" ], "nodes": [] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "sources", "sources" ], "unique_id": "model.dbt_artifacts.sources", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n select 1 as foo\n)\n\nselect\n cast(null as {{ type_string() }}) as command_invocation_id,\n cast(null as {{ type_string() }}) as node_id,\n cast(null as {{ type_timestamp() }}) as run_started_at,\n cast(null as {{ type_string() }}) as database,\n cast(null as {{ type_string() }}) as schema,\n cast(null as {{ type_string() }}) as source_name,\n cast(null as {{ type_string() }}) as loader,\n cast(null as {{ type_string() }}) as name,\n cast(null as {{ type_string() }}) as identifier,\n cast(null as {{ type_string() }}) as loaded_at_field,\n {% if target.type == 'snowflake'%}\n cast(null as {{ type_array() }}) as freshness\n {% else %}\n cast(null as {{ type_json() }}) as freshness\n {% endif %}\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "sources/sources.sql", "original_file_path": "models/sources/sources.sql", "name": "sources", "alias": "sources", "checksum": { "name": "sha256", "checksum": "51e5dfc74061e0eaefe61a94f84b1568aaedef1b8b216ed2db083f9863174719" }, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "use_anonymous_sproc": true }, "created_at": 1680812391.6939752 }, "model.dbt_artifacts.seeds": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_json" ], "nodes": [] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "sources", "seeds" ], "unique_id": "model.dbt_artifacts.seeds", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n select 1 as foo\n)\n\nselect\n cast(null as {{ type_string() }}) as command_invocation_id,\n cast(null as {{ type_string() }}) as node_id,\n cast(null as {{ type_timestamp() }}) as run_started_at,\n cast(null as {{ type_string() }}) as database,\n cast(null as {{ type_string() }}) as schema,\n cast(null as {{ type_string() }}) as name,\n cast(null as {{ type_string() }}) as package_name,\n cast(null as {{ type_string() }}) as path,\n cast(null as {{ type_string() }}) as checksum,\n cast(null as {{ type_json() }}) as meta,\n cast(null as {{ type_string() }}) as alias\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "sources/seeds.sql", "original_file_path": "models/sources/seeds.sql", "name": "seeds", "alias": "seeds", "checksum": { "name": "sha256", "checksum": "8d3a63ddabd3130641361296f472e52bf6991125d177b8bf6e1d88677b8e573c" }, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "use_anonymous_sproc": true }, "created_at": 1680812391.7061858 }, "model.dbt_artifacts.tests": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array" ], "nodes": [] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "sources", "tests" ], "unique_id": "model.dbt_artifacts.tests", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n select 1 as foo\n)\n\nselect\n cast(null as {{ type_string() }}) as command_invocation_id,\n cast(null as {{ type_string() }}) as node_id,\n cast(null as {{ type_timestamp() }}) as run_started_at,\n cast(null as {{ type_string() }}) as name,\n cast(null as {{ type_array() }}) as depends_on_nodes,\n cast(null as {{ type_string() }}) as package_name,\n cast(null as {{ type_string() }}) as test_path,\n cast(null as {{ type_array() }}) as tags\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "sources/tests.sql", "original_file_path": "models/sources/tests.sql", "name": "tests", "alias": "tests", "checksum": { "name": "sha256", "checksum": "b119f5c951c557f42c7098a8d00eabb8a1b83f2b446bedb2d3c8af9db74740b3" }, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "use_anonymous_sproc": true }, "created_at": 1680812391.7159073 }, "model.dbt_artifacts.snapshots": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array", "macro.dbt_artifacts.type_json" ], "nodes": [] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "sources", "snapshots" ], "unique_id": "model.dbt_artifacts.snapshots", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n select 1 as foo\n)\n\nselect\n cast(null as {{ type_string() }}) as command_invocation_id,\n cast(null as {{ type_string() }}) as node_id,\n cast(null as {{ type_timestamp() }}) as run_started_at,\n cast(null as {{ type_string() }}) as database,\n cast(null as {{ type_string() }}) as schema,\n cast(null as {{ type_string() }}) as name,\n cast(null as {{ type_array() }}) as depends_on_nodes,\n cast(null as {{ type_string() }}) as package_name,\n cast(null as {{ type_string() }}) as path,\n cast(null as {{ type_string() }}) as checksum,\n cast(null as {{ type_string() }}) as strategy,\n cast(null as {{ type_json() }}) as meta,\n cast(null as {{ type_string() }}) as alias\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "sources/snapshots.sql", "original_file_path": "models/sources/snapshots.sql", "name": "snapshots", "alias": "snapshots", "checksum": { "name": "sha256", "checksum": "8877cea5bc91627ab644e09743fcb96c32a3d47ebf5249937cd2089f973d6a55" }, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "use_anonymous_sproc": true }, "created_at": 1680812391.7244658 }, "model.dbt_artifacts.model_executions": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int" ], "nodes": [] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "sources", "model_executions" ], "unique_id": "model.dbt_artifacts.model_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n select 1 as foo\n)\n\nselect\n cast(null as {{ type_string() }}) as command_invocation_id,\n cast(null as {{ type_string() }}) as node_id,\n cast(null as {{ type_timestamp() }}) as run_started_at,\n cast(null as {{ type_boolean() }}) as was_full_refresh,\n cast(null as {{ type_string() }}) as thread_id,\n cast(null as {{ type_string() }}) as status,\n cast(null as {{ type_timestamp() }}) as compile_started_at,\n cast(null as {{ type_timestamp() }}) as query_completed_at,\n cast(null as {{ type_float() }}) as total_node_runtime,\n cast(null as {{ type_int() }}) as rows_affected,\n {% if target.type == 'bigquery' %}\n cast(null as {{ type_int() }}) as bytes_processed,\n {% endif %}\n cast(null as {{ type_string() }}) as materialization,\n cast(null as {{ type_string() }}) as schema,\n cast(null as {{ type_string() }}) as name,\n cast(null as {{ type_string() }}) as alias\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "sources/model_executions.sql", "original_file_path": "models/sources/model_executions.sql", "name": "model_executions", "alias": "model_executions", "checksum": { "name": "sha256", "checksum": "da9cb1427ff8e8b5865a5202d6f5b48f58b127fd94e840c5707a2c8009bca62e" }, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "use_anonymous_sproc": true }, "created_at": 1680812391.7357788 }, "model.dbt_artifacts.test_executions": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int" ], "nodes": [] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "sources", "test_executions" ], "unique_id": "model.dbt_artifacts.test_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n select 1 as foo\n)\n\nselect\n cast(null as {{ type_string() }}) as command_invocation_id,\n cast(null as {{ type_string() }}) as node_id,\n cast(null as {{ type_timestamp() }}) as run_started_at,\n cast(null as {{ type_boolean() }}) as was_full_refresh,\n cast(null as {{ type_string() }}) as thread_id,\n cast(null as {{ type_string() }}) as status,\n cast(null as {{ type_timestamp() }}) as compile_started_at,\n cast(null as {{ type_timestamp() }}) as query_completed_at,\n cast(null as {{ type_float() }}) as total_node_runtime,\n cast(null as {{ type_int() }}) as rows_affected,\n cast(null as {{ type_int() }}) as failures\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "sources/test_executions.sql", "original_file_path": "models/sources/test_executions.sql", "name": "test_executions", "alias": "test_executions", "checksum": { "name": "sha256", "checksum": "39f54bc4d9ce331ec49ac85a9fec686d8b620f15a3e5c1699ae9aed0f11569e3" }, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "use_anonymous_sproc": true }, "created_at": 1680812391.746672 }, "model.dbt_artifacts.exposures": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_json", "macro.dbt_artifacts.type_array" ], "nodes": [] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "sources", "exposures" ], "unique_id": "model.dbt_artifacts.exposures", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n select 1 as foo\n)\n\nselect\n cast(null as {{ type_string() }}) as command_invocation_id,\n cast(null as {{ type_string() }}) as node_id,\n cast(null as {{ type_timestamp() }}) as run_started_at,\n cast(null as {{ type_string() }}) as name,\n cast(null as {{ type_string() }}) as type,\n cast(null as {{ type_json() }}) as owner,\n cast(null as {{ type_string() }}) as maturity,\n cast(null as {{ type_string() }}) as path,\n cast(null as {{ type_string() }}) as description,\n cast(null as {{ type_string() }}) as url,\n cast(null as {{ type_string() }}) as package_name,\n cast(null as {{ type_array() }}) as depends_on_nodes\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "sources/exposures.sql", "original_file_path": "models/sources/exposures.sql", "name": "exposures", "alias": "exposures", "checksum": { "name": "sha256", "checksum": "e066a6845074144411a223d2db537d77ee2108d702e34fb2523e85b29466b2fc" }, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "use_anonymous_sproc": true }, "created_at": 1680812391.756499 }, "model.dbt_artifacts.models": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array", "macro.dbt_artifacts.type_json" ], "nodes": [] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "sources", "models" ], "unique_id": "model.dbt_artifacts.models", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n select 1 as foo\n)\n\nselect\n cast(null as {{ type_string() }}) as command_invocation_id,\n cast(null as {{ type_string() }}) as node_id,\n cast(null as {{ type_timestamp() }}) as run_started_at,\n cast(null as {{ type_string() }}) as database,\n cast(null as {{ type_string() }}) as schema,\n cast(null as {{ type_string() }}) as name,\n cast(null as {{ type_array() }}) as depends_on_nodes,\n cast(null as {{ type_string() }}) as package_name,\n cast(null as {{ type_string() }}) as path,\n cast(null as {{ type_string() }}) as checksum,\n cast(null as {{ type_string() }}) as materialization,\n cast(null as {{ type_array() }}) as tags,\n cast(null as {{ type_json() }}) as meta,\n cast(null as {{ type_string() }}) as alias\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "sources/models.sql", "original_file_path": "models/sources/models.sql", "name": "models", "alias": "models", "checksum": { "name": "sha256", "checksum": "828694c88ec4506c82169459bbcfb2484ab7025cc87861b17485f6c630ae792d" }, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "use_anonymous_sproc": true }, "created_at": 1680812391.7667615 }, "model.dbt_artifacts.snapshot_executions": { "resource_type": "model", "depends_on": { "macros": [ "macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int" ], "nodes": [] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "dbt_artifacts", "sources", "snapshot_executions" ], "unique_id": "model.dbt_artifacts.snapshot_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n select 1 as foo\n)\n\nselect\n cast(null as {{ type_string() }}) as command_invocation_id,\n cast(null as {{ type_string() }}) as node_id,\n cast(null as {{ type_timestamp() }}) as run_started_at,\n cast(null as {{ type_boolean() }}) as was_full_refresh,\n cast(null as {{ type_string() }}) as thread_id,\n cast(null as {{ type_string() }}) as status,\n cast(null as {{ type_timestamp() }}) as compile_started_at,\n cast(null as {{ type_timestamp() }}) as query_completed_at,\n cast(null as {{ type_float() }}) as total_node_runtime,\n cast(null as {{ type_int() }}) as rows_affected,\n cast(null as {{ type_string() }}) as materialization,\n cast(null as {{ type_string() }}) as schema,\n cast(null as {{ type_string() }}) as name,\n cast(null as {{ type_string() }}) as alias\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "sources/snapshot_executions.sql", "original_file_path": "models/sources/snapshot_executions.sql", "name": "snapshot_executions", "alias": "snapshot_executions", "checksum": { "name": "sha256", "checksum": "2ecc1bc070853022de7bb1fe576790937aed14f381f9ad14d9ab1419f0aebb58" }, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "use_anonymous_sproc": true }, "created_at": 1680812391.77831 }, "model.metrics.dbt_metrics_default_calendar": { "resource_type": "model", "depends_on": { "macros": [ "macro.metrics.metric_date_spine", "macro.dbt.date_trunc" ], "nodes": [] }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "fqn": [ "metrics", "dbt_metrics_default_calendar" ], "unique_id": "model.metrics.dbt_metrics_default_calendar", "raw_code": "{{ config(materialized='table') }}\n\nwith days as (\n {{ metrics.metric_date_spine(\n datepart=\"day\",\n start_date=\"cast('1990-01-01' as date)\",\n end_date=\"cast('2030-01-01' as date)\"\n )\n }}\n),\n\nfinal as (\n select \n cast(date_day as date) as date_day,\n cast({{ date_trunc('week', 'date_day') }} as date) as date_week,\n cast({{ date_trunc('month', 'date_day') }} as date) as date_month,\n cast({{ date_trunc('quarter', 'date_day') }} as date) as date_quarter,\n cast({{ date_trunc('year', 'date_day') }} as date) as date_year\n from days\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from final", "language": "sql", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "dbt_metrics_default_calendar.sql", "original_file_path": "models/dbt_metrics_default_calendar.sql", "name": "dbt_metrics_default_calendar", "alias": "dbt_metrics_default_calendar", "checksum": { "name": "sha256", "checksum": "ceff0a953c0648d9c90dcface95c193f7a40f29bce75a902581315cd35f7141a" }, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true }, "created_at": 1680812391.8174841 }, "test.tpch.unique_stg_tpch_customers_customer_key.7f1a18b1a4": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "customer_key", "model": "{{ get_where_subquery(ref('stg_tpch_customers')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.stg_tpch_customers" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "unique_stg_tpch_customers_customer_key" ], "unique_id": "test.tpch.unique_stg_tpch_customers_customer_key.7f1a18b1a4", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "unique_stg_tpch_customers_customer_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "name": "unique_stg_tpch_customers_customer_key", "alias": "unique_stg_tpch_customers_customer_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "stg_tpch_customers" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.171469, "column_name": "customer_key", "file_key_name": "models.stg_tpch_customers" }, "test.tpch.not_null_stg_tpch_customers_customer_key.a10e15535a": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "customer_key", "model": "{{ get_where_subquery(ref('stg_tpch_customers')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.stg_tpch_customers" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "not_null_stg_tpch_customers_customer_key" ], "unique_id": "test.tpch.not_null_stg_tpch_customers_customer_key.a10e15535a", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "not_null_stg_tpch_customers_customer_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "name": "not_null_stg_tpch_customers_customer_key", "alias": "not_null_stg_tpch_customers_customer_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "stg_tpch_customers" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.173435, "column_name": "customer_key", "file_key_name": "models.stg_tpch_customers" }, "test.tpch.unique_stg_tpch_line_items_order_item_key.c819d91e0a": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "order_item_key", "model": "{{ get_where_subquery(ref('stg_tpch_line_items')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.stg_tpch_line_items" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "unique_stg_tpch_line_items_order_item_key" ], "unique_id": "test.tpch.unique_stg_tpch_line_items_order_item_key.c819d91e0a", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "unique_stg_tpch_line_items_order_item_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "name": "unique_stg_tpch_line_items_order_item_key", "alias": "unique_stg_tpch_line_items_order_item_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "stg_tpch_line_items" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.1753845, "column_name": "order_item_key", "file_key_name": "models.stg_tpch_line_items" }, "test.tpch.not_null_stg_tpch_line_items_order_item_key.cd47c7a679": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "order_item_key", "model": "{{ get_where_subquery(ref('stg_tpch_line_items')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.stg_tpch_line_items" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "not_null_stg_tpch_line_items_order_item_key" ], "unique_id": "test.tpch.not_null_stg_tpch_line_items_order_item_key.cd47c7a679", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "not_null_stg_tpch_line_items_order_item_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "name": "not_null_stg_tpch_line_items_order_item_key", "alias": "not_null_stg_tpch_line_items_order_item_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "stg_tpch_line_items" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.1771684, "column_name": "order_item_key", "file_key_name": "models.stg_tpch_line_items" }, "test.tpch.unique_stg_tpch_nations_nation_key.9e3675553d": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "nation_key", "model": "{{ get_where_subquery(ref('stg_tpch_nations')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.stg_tpch_nations" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "unique_stg_tpch_nations_nation_key" ], "unique_id": "test.tpch.unique_stg_tpch_nations_nation_key.9e3675553d", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "unique_stg_tpch_nations_nation_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "name": "unique_stg_tpch_nations_nation_key", "alias": "unique_stg_tpch_nations_nation_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "stg_tpch_nations" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.179236, "column_name": "nation_key", "file_key_name": "models.stg_tpch_nations" }, "test.tpch.not_null_stg_tpch_nations_nation_key.d0c2fe32ed": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "nation_key", "model": "{{ get_where_subquery(ref('stg_tpch_nations')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.stg_tpch_nations" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "not_null_stg_tpch_nations_nation_key" ], "unique_id": "test.tpch.not_null_stg_tpch_nations_nation_key.d0c2fe32ed", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "not_null_stg_tpch_nations_nation_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "name": "not_null_stg_tpch_nations_nation_key", "alias": "not_null_stg_tpch_nations_nation_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "stg_tpch_nations" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.1809914, "column_name": "nation_key", "file_key_name": "models.stg_tpch_nations" }, "test.tpch.unique_stg_tpch_orders_order_key.bd29f13cc9": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "order_key", "model": "{{ get_where_subquery(ref('stg_tpch_orders')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.stg_tpch_orders" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "unique_stg_tpch_orders_order_key" ], "unique_id": "test.tpch.unique_stg_tpch_orders_order_key.bd29f13cc9", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "unique_stg_tpch_orders_order_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "name": "unique_stg_tpch_orders_order_key", "alias": "unique_stg_tpch_orders_order_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "stg_tpch_orders" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.1827836, "column_name": "order_key", "file_key_name": "models.stg_tpch_orders" }, "test.tpch.not_null_stg_tpch_orders_order_key.bb22e75ae8": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "order_key", "model": "{{ get_where_subquery(ref('stg_tpch_orders')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.stg_tpch_orders" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "not_null_stg_tpch_orders_order_key" ], "unique_id": "test.tpch.not_null_stg_tpch_orders_order_key.bb22e75ae8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "not_null_stg_tpch_orders_order_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "name": "not_null_stg_tpch_orders_order_key", "alias": "not_null_stg_tpch_orders_order_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "stg_tpch_orders" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.1845808, "column_name": "order_key", "file_key_name": "models.stg_tpch_orders" }, "test.tpch.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "part_supplier_key", "model": "{{ get_where_subquery(ref('stg_tpch_part_suppliers')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.stg_tpch_part_suppliers" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "unique_stg_tpch_part_suppliers_part_supplier_key" ], "unique_id": "test.tpch.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "unique_stg_tpch_part_suppliers_part_supplier_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "name": "unique_stg_tpch_part_suppliers_part_supplier_key", "alias": "unique_stg_tpch_part_suppliers_part_supplier_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "stg_tpch_part_suppliers" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.1863167, "column_name": "part_supplier_key", "file_key_name": "models.stg_tpch_part_suppliers" }, "test.tpch.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "part_supplier_key", "model": "{{ get_where_subquery(ref('stg_tpch_part_suppliers')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.stg_tpch_part_suppliers" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "not_null_stg_tpch_part_suppliers_part_supplier_key" ], "unique_id": "test.tpch.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "not_null_stg_tpch_part_suppliers_part_supplier_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "name": "not_null_stg_tpch_part_suppliers_part_supplier_key", "alias": "not_null_stg_tpch_part_suppliers_part_supplier_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "stg_tpch_part_suppliers" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.1884036, "column_name": "part_supplier_key", "file_key_name": "models.stg_tpch_part_suppliers" }, "test.tpch.unique_stg_tpch_parts_part_key.afbc7ad489": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "part_key", "model": "{{ get_where_subquery(ref('stg_tpch_parts')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.stg_tpch_parts" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "unique_stg_tpch_parts_part_key" ], "unique_id": "test.tpch.unique_stg_tpch_parts_part_key.afbc7ad489", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "unique_stg_tpch_parts_part_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "name": "unique_stg_tpch_parts_part_key", "alias": "unique_stg_tpch_parts_part_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "stg_tpch_parts" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.190114, "column_name": "part_key", "file_key_name": "models.stg_tpch_parts" }, "test.tpch.not_null_stg_tpch_parts_part_key.cc8e610420": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "part_key", "model": "{{ get_where_subquery(ref('stg_tpch_parts')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.stg_tpch_parts" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "not_null_stg_tpch_parts_part_key" ], "unique_id": "test.tpch.not_null_stg_tpch_parts_part_key.cc8e610420", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "not_null_stg_tpch_parts_part_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "name": "not_null_stg_tpch_parts_part_key", "alias": "not_null_stg_tpch_parts_part_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "stg_tpch_parts" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.1919422, "column_name": "part_key", "file_key_name": "models.stg_tpch_parts" }, "test.tpch.unique_stg_tpch_regions_region_key.b2bd891bb5": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "region_key", "model": "{{ get_where_subquery(ref('stg_tpch_regions')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.stg_tpch_regions" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "unique_stg_tpch_regions_region_key" ], "unique_id": "test.tpch.unique_stg_tpch_regions_region_key.b2bd891bb5", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "unique_stg_tpch_regions_region_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "name": "unique_stg_tpch_regions_region_key", "alias": "unique_stg_tpch_regions_region_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "stg_tpch_regions" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.1936595, "column_name": "region_key", "file_key_name": "models.stg_tpch_regions" }, "test.tpch.not_null_stg_tpch_regions_region_key.869fa0b326": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "region_key", "model": "{{ get_where_subquery(ref('stg_tpch_regions')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.stg_tpch_regions" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "not_null_stg_tpch_regions_region_key" ], "unique_id": "test.tpch.not_null_stg_tpch_regions_region_key.869fa0b326", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "not_null_stg_tpch_regions_region_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "name": "not_null_stg_tpch_regions_region_key", "alias": "not_null_stg_tpch_regions_region_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "stg_tpch_regions" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.1962345, "column_name": "region_key", "file_key_name": "models.stg_tpch_regions" }, "test.tpch.unique_stg_tpch_suppliers_supplier_key.6215308464": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "supplier_key", "model": "{{ get_where_subquery(ref('stg_tpch_suppliers')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.stg_tpch_suppliers" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "unique_stg_tpch_suppliers_supplier_key" ], "unique_id": "test.tpch.unique_stg_tpch_suppliers_supplier_key.6215308464", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "unique_stg_tpch_suppliers_supplier_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "name": "unique_stg_tpch_suppliers_supplier_key", "alias": "unique_stg_tpch_suppliers_supplier_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "stg_tpch_suppliers" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.198095, "column_name": "supplier_key", "file_key_name": "models.stg_tpch_suppliers" }, "test.tpch.not_null_stg_tpch_suppliers_supplier_key.97c31a786d": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "supplier_key", "model": "{{ get_where_subquery(ref('stg_tpch_suppliers')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.stg_tpch_suppliers" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "not_null_stg_tpch_suppliers_supplier_key" ], "unique_id": "test.tpch.not_null_stg_tpch_suppliers_supplier_key.97c31a786d", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "not_null_stg_tpch_suppliers_supplier_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "name": "not_null_stg_tpch_suppliers_supplier_key", "alias": "not_null_stg_tpch_suppliers_supplier_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "stg_tpch_suppliers" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.1999326, "column_name": "supplier_key", "file_key_name": "models.stg_tpch_suppliers" }, "test.tpch.unique_order_items_order_item_key.43a40b2837": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "order_item_key", "model": "{{ get_where_subquery(ref('order_items')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.order_items" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "marts", "intermediate", "unique_order_items_order_item_key" ], "unique_id": "test.tpch.unique_order_items_order_item_key.43a40b2837", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "unique_order_items_order_item_key.sql", "original_file_path": "models/marts/intermediate/intermediate.yml", "name": "unique_order_items_order_item_key", "alias": "unique_order_items_order_item_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "order_items" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.3163335, "column_name": "order_item_key", "file_key_name": "models.order_items" }, "test.tpch.not_null_order_items_order_item_key.44b9fa7311": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "order_item_key", "model": "{{ get_where_subquery(ref('order_items')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.order_items" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "marts", "intermediate", "not_null_order_items_order_item_key" ], "unique_id": "test.tpch.not_null_order_items_order_item_key.44b9fa7311", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "not_null_order_items_order_item_key.sql", "original_file_path": "models/marts/intermediate/intermediate.yml", "name": "not_null_order_items_order_item_key", "alias": "not_null_order_items_order_item_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "order_items" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.31857, "column_name": "order_item_key", "file_key_name": "models.order_items" }, "test.tpch.unique_part_suppliers_part_supplier_key.909477afa8": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "part_supplier_key", "model": "{{ get_where_subquery(ref('part_suppliers')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.part_suppliers" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "marts", "intermediate", "unique_part_suppliers_part_supplier_key" ], "unique_id": "test.tpch.unique_part_suppliers_part_supplier_key.909477afa8", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "unique_part_suppliers_part_supplier_key.sql", "original_file_path": "models/marts/intermediate/intermediate.yml", "name": "unique_part_suppliers_part_supplier_key", "alias": "unique_part_suppliers_part_supplier_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "part_suppliers" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.3204634, "column_name": "part_supplier_key", "file_key_name": "models.part_suppliers" }, "test.tpch.not_null_part_suppliers_part_supplier_key.b8b2022ed3": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "part_supplier_key", "model": "{{ get_where_subquery(ref('part_suppliers')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.part_suppliers" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "marts", "intermediate", "not_null_part_suppliers_part_supplier_key" ], "unique_id": "test.tpch.not_null_part_suppliers_part_supplier_key.b8b2022ed3", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "not_null_part_suppliers_part_supplier_key.sql", "original_file_path": "models/marts/intermediate/intermediate.yml", "name": "not_null_part_suppliers_part_supplier_key", "alias": "not_null_part_suppliers_part_supplier_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "part_suppliers" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.3222547, "column_name": "part_supplier_key", "file_key_name": "models.part_suppliers" }, "test.tpch.unique_dim_customers_customer_key.ad8156656e": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "customer_key", "model": "{{ get_where_subquery(ref('dim_customers')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.dim_customers" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "marts", "core", "unique_dim_customers_customer_key" ], "unique_id": "test.tpch.unique_dim_customers_customer_key.ad8156656e", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "unique_dim_customers_customer_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_dim_customers_customer_key", "alias": "unique_dim_customers_customer_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "dim_customers" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.3851607, "column_name": "customer_key", "file_key_name": "models.dim_customers" }, "test.tpch.not_null_dim_customers_customer_key.4bebfb3411": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "customer_key", "model": "{{ get_where_subquery(ref('dim_customers')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.dim_customers" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "marts", "core", "not_null_dim_customers_customer_key" ], "unique_id": "test.tpch.not_null_dim_customers_customer_key.4bebfb3411", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "not_null_dim_customers_customer_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_customers_customer_key", "alias": "not_null_dim_customers_customer_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "dim_customers" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.387307, "column_name": "customer_key", "file_key_name": "models.dim_customers" }, "test.tpch.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69": { "test_metadata": { "name": "accepted_values", "kwargs": { "values": [ "AFRICA", "MIDDLE EAST", "ASIA", "EUROPE", "AMERICA" ], "column_name": "region", "model": "{{ get_where_subquery(ref('dim_customers')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery" ], "nodes": [ "model.tpch.dim_customers" ] }, "config": { "enabled": true, "alias": "accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "marts", "core", "accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA" ], "unique_id": "test.tpch.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc\") }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc.sql", "original_file_path": "models/marts/core/core.yml", "name": "accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA", "alias": "accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "dim_customers" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "severity": "warn", "alias": "accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc" }, "created_at": 1680812392.389583, "column_name": "region", "file_key_name": "models.dim_customers" }, "test.tpch.unique_dim_parts_part_key.712df18d58": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "part_key", "model": "{{ get_where_subquery(ref('dim_parts')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.dim_parts" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "marts", "core", "unique_dim_parts_part_key" ], "unique_id": "test.tpch.unique_dim_parts_part_key.712df18d58", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "unique_dim_parts_part_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_dim_parts_part_key", "alias": "unique_dim_parts_part_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "dim_parts" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.4050896, "column_name": "part_key", "file_key_name": "models.dim_parts" }, "test.tpch.not_null_dim_parts_part_key.4358f880d9": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "part_key", "model": "{{ get_where_subquery(ref('dim_parts')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.dim_parts" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "marts", "core", "not_null_dim_parts_part_key" ], "unique_id": "test.tpch.not_null_dim_parts_part_key.4358f880d9", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "not_null_dim_parts_part_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_parts_part_key", "alias": "not_null_dim_parts_part_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "dim_parts" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.4069326, "column_name": "part_key", "file_key_name": "models.dim_parts" }, "test.tpch.unique_dim_suppliers_supplier_key.58fc3e4770": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "supplier_key", "model": "{{ get_where_subquery(ref('dim_suppliers')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.dim_suppliers" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "marts", "core", "unique_dim_suppliers_supplier_key" ], "unique_id": "test.tpch.unique_dim_suppliers_supplier_key.58fc3e4770", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "unique_dim_suppliers_supplier_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_dim_suppliers_supplier_key", "alias": "unique_dim_suppliers_supplier_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "dim_suppliers" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.4090238, "column_name": "supplier_key", "file_key_name": "models.dim_suppliers" }, "test.tpch.not_null_dim_suppliers_supplier_key.4315350956": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "supplier_key", "model": "{{ get_where_subquery(ref('dim_suppliers')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.dim_suppliers" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "marts", "core", "not_null_dim_suppliers_supplier_key" ], "unique_id": "test.tpch.not_null_dim_suppliers_supplier_key.4315350956", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "not_null_dim_suppliers_supplier_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_dim_suppliers_supplier_key", "alias": "not_null_dim_suppliers_supplier_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "dim_suppliers" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.41079, "column_name": "supplier_key", "file_key_name": "models.dim_suppliers" }, "test.tpch.unique_fct_order_items_order_item_key.4d6426a255": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "order_item_key", "model": "{{ get_where_subquery(ref('fct_order_items')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.fct_order_items" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "marts", "core", "unique_fct_order_items_order_item_key" ], "unique_id": "test.tpch.unique_fct_order_items_order_item_key.4d6426a255", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "unique_fct_order_items_order_item_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_fct_order_items_order_item_key", "alias": "unique_fct_order_items_order_item_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "fct_order_items" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.4125607, "column_name": "order_item_key", "file_key_name": "models.fct_order_items" }, "test.tpch.not_null_fct_order_items_order_item_key.47516a6371": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "order_item_key", "model": "{{ get_where_subquery(ref('fct_order_items')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.fct_order_items" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "marts", "core", "not_null_fct_order_items_order_item_key" ], "unique_id": "test.tpch.not_null_fct_order_items_order_item_key.47516a6371", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "not_null_fct_order_items_order_item_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_fct_order_items_order_item_key", "alias": "not_null_fct_order_items_order_item_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "fct_order_items" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.414289, "column_name": "order_item_key", "file_key_name": "models.fct_order_items" }, "test.tpch.unique_fct_orders_order_key.f5e7a90273": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "order_key", "model": "{{ get_where_subquery(ref('fct_orders')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.fct_orders" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "marts", "core", "unique_fct_orders_order_key" ], "unique_id": "test.tpch.unique_fct_orders_order_key.f5e7a90273", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "unique_fct_orders_order_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_fct_orders_order_key", "alias": "unique_fct_orders_order_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "fct_orders" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.4161224, "column_name": "order_key", "file_key_name": "models.fct_orders" }, "test.tpch.not_null_fct_orders_order_key.6a6f83ab15": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "order_key", "model": "{{ get_where_subquery(ref('fct_orders')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.fct_orders" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "marts", "core", "not_null_fct_orders_order_key" ], "unique_id": "test.tpch.not_null_fct_orders_order_key.6a6f83ab15", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "not_null_fct_orders_order_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "not_null_fct_orders_order_key", "alias": "not_null_fct_orders_order_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "fct_orders" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.4181151, "column_name": "order_key", "file_key_name": "models.fct_orders" }, "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b": { "test_metadata": { "name": "relationships", "kwargs": { "to": "ref('dim_customers')", "field": "customer_key", "column_name": "customer_key", "model": "{{ get_where_subquery(ref('fct_orders')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "model.tpch.dim_customers", "model.tpch.fct_orders" ] }, "config": { "enabled": true, "alias": "relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "marts", "core", "relationships_fct_orders_customer_key__customer_key__ref_dim_customers_" ], "unique_id": "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae\") }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae.sql", "original_file_path": "models/marts/core/core.yml", "name": "relationships_fct_orders_customer_key__customer_key__ref_dim_customers_", "alias": "relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "dim_customers" ], [ "fct_orders" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "severity": "error", "alias": "relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae" }, "created_at": 1680812392.4205117, "column_name": "customer_key", "file_key_name": "models.fct_orders" }, "test.tpch.unique_materialization_incremental_customer_key.325783f327": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "customer_key", "model": "{{ get_where_subquery(ref('materialization_incremental')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.materialization_incremental" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "demo_examples", "unique_materialization_incremental_customer_key" ], "unique_id": "test.tpch.unique_materialization_incremental_customer_key.325783f327", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "unique_materialization_incremental_customer_key.sql", "original_file_path": "models/demo_examples/demo_examples.yml", "name": "unique_materialization_incremental_customer_key", "alias": "unique_materialization_incremental_customer_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "materialization_incremental" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.4829237, "column_name": "customer_key", "file_key_name": "models.materialization_incremental" }, "test.tpch.not_null_materialization_incremental_customer_key.e2b95d8009": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "customer_key", "model": "{{ get_where_subquery(ref('materialization_incremental')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.materialization_incremental" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "demo_examples", "not_null_materialization_incremental_customer_key" ], "unique_id": "test.tpch.not_null_materialization_incremental_customer_key.e2b95d8009", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "not_null_materialization_incremental_customer_key.sql", "original_file_path": "models/demo_examples/demo_examples.yml", "name": "not_null_materialization_incremental_customer_key", "alias": "not_null_materialization_incremental_customer_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "materialization_incremental" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.4860659, "column_name": "customer_key", "file_key_name": "models.materialization_incremental" }, "test.tpch.unique_use_variables_order_item_key.fb5576fe0e": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "order_item_key", "model": "{{ get_where_subquery(ref('use_variables')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.use_variables" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "demo_examples", "unique_use_variables_order_item_key" ], "unique_id": "test.tpch.unique_use_variables_order_item_key.fb5576fe0e", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "unique_use_variables_order_item_key.sql", "original_file_path": "models/demo_examples/demo_examples.yml", "name": "unique_use_variables_order_item_key", "alias": "unique_use_variables_order_item_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "use_variables" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.488028, "column_name": "order_item_key", "file_key_name": "models.use_variables" }, "test.tpch.not_null_use_variables_order_item_key.c2bd602686": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "order_item_key", "model": "{{ get_where_subquery(ref('use_variables')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.use_variables" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "demo_examples", "not_null_use_variables_order_item_key" ], "unique_id": "test.tpch.not_null_use_variables_order_item_key.c2bd602686", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "not_null_use_variables_order_item_key.sql", "original_file_path": "models/demo_examples/demo_examples.yml", "name": "not_null_use_variables_order_item_key", "alias": "not_null_use_variables_order_item_key", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [ [ "use_variables" ] ], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.489829, "column_name": "order_item_key", "file_key_name": "models.use_variables" }, "test.tpch.source_not_null_dbtc_link_clicked_link.f7c8e69ba4": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "link", "model": "{{ get_where_subquery(source('dbtc', 'link_clicked')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.dbtc.link_clicked" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "segment", "source_not_null_dbtc_link_clicked_link" ], "unique_id": "test.tpch.source_not_null_dbtc_link_clicked_link.f7c8e69ba4", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_not_null_dbtc_link_clicked_link.sql", "original_file_path": "models/staging/segment/_sources.yml", "name": "source_not_null_dbtc_link_clicked_link", "alias": "source_not_null_dbtc_link_clicked_link", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "dbtc", "link_clicked" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "severity": "WARN" }, "created_at": 1680812392.7216914, "column_name": "link", "file_key_name": "sources.dbtc" }, "test.tpch.source_not_null_dbtc_link_clicked_id.9028bfe6aa": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "id", "model": "{{ get_where_subquery(source('dbtc', 'link_clicked')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.dbtc.link_clicked" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "segment", "source_not_null_dbtc_link_clicked_id" ], "unique_id": "test.tpch.source_not_null_dbtc_link_clicked_id.9028bfe6aa", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_not_null_dbtc_link_clicked_id.sql", "original_file_path": "models/staging/segment/_sources.yml", "name": "source_not_null_dbtc_link_clicked_id", "alias": "source_not_null_dbtc_link_clicked_id", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "dbtc", "link_clicked" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.7239628, "column_name": "id", "file_key_name": "sources.dbtc" }, "test.tpch.source_unique_dbtc_link_clicked_id.6a057563bc": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "id", "model": "{{ get_where_subquery(source('dbtc', 'link_clicked')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.dbtc.link_clicked" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "segment", "source_unique_dbtc_link_clicked_id" ], "unique_id": "test.tpch.source_unique_dbtc_link_clicked_id.6a057563bc", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_unique_dbtc_link_clicked_id.sql", "original_file_path": "models/staging/segment/_sources.yml", "name": "source_unique_dbtc_link_clicked_id", "alias": "source_unique_dbtc_link_clicked_id", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "dbtc", "link_clicked" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.725716, "column_name": "id", "file_key_name": "sources.dbtc" }, "test.tpch.source_not_null_dbtc_link_clicked_event.7882b2f4f6": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "event", "model": "{{ get_where_subquery(source('dbtc', 'link_clicked')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.dbtc.link_clicked" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "segment", "source_not_null_dbtc_link_clicked_event" ], "unique_id": "test.tpch.source_not_null_dbtc_link_clicked_event.7882b2f4f6", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_not_null_dbtc_link_clicked_event.sql", "original_file_path": "models/staging/segment/_sources.yml", "name": "source_not_null_dbtc_link_clicked_event", "alias": "source_not_null_dbtc_link_clicked_event", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "dbtc", "link_clicked" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.727537, "column_name": "event", "file_key_name": "sources.dbtc" }, "test.tpch.source_not_null_dbtc_link_clicked_sent_at.39cf8a9ef9": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "sent_at", "model": "{{ get_where_subquery(source('dbtc', 'link_clicked')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.dbtc.link_clicked" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "segment", "source_not_null_dbtc_link_clicked_sent_at" ], "unique_id": "test.tpch.source_not_null_dbtc_link_clicked_sent_at.39cf8a9ef9", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_not_null_dbtc_link_clicked_sent_at.sql", "original_file_path": "models/staging/segment/_sources.yml", "name": "source_not_null_dbtc_link_clicked_sent_at", "alias": "source_not_null_dbtc_link_clicked_sent_at", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "dbtc", "link_clicked" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.7293332, "column_name": "sent_at", "file_key_name": "sources.dbtc" }, "test.tpch.source_not_null_dbtc_pages_id.f6b6a8c945": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "id", "model": "{{ get_where_subquery(source('dbtc', 'pages')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.dbtc.pages" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "segment", "source_not_null_dbtc_pages_id" ], "unique_id": "test.tpch.source_not_null_dbtc_pages_id.f6b6a8c945", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_not_null_dbtc_pages_id.sql", "original_file_path": "models/staging/segment/_sources.yml", "name": "source_not_null_dbtc_pages_id", "alias": "source_not_null_dbtc_pages_id", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "dbtc", "pages" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.7316372, "column_name": "id", "file_key_name": "sources.dbtc" }, "test.tpch.source_unique_dbtc_pages_id.8457cf34c6": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "id", "model": "{{ get_where_subquery(source('dbtc', 'pages')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.dbtc.pages" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "segment", "source_unique_dbtc_pages_id" ], "unique_id": "test.tpch.source_unique_dbtc_pages_id.8457cf34c6", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_unique_dbtc_pages_id.sql", "original_file_path": "models/staging/segment/_sources.yml", "name": "source_unique_dbtc_pages_id", "alias": "source_unique_dbtc_pages_id", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "dbtc", "pages" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.733352, "column_name": "id", "file_key_name": "sources.dbtc" }, "test.tpch.source_not_null_dbtc_pages_sent_at.485c11a73d": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "sent_at", "model": "{{ get_where_subquery(source('dbtc', 'pages')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.dbtc.pages" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "segment", "source_not_null_dbtc_pages_sent_at" ], "unique_id": "test.tpch.source_not_null_dbtc_pages_sent_at.485c11a73d", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_not_null_dbtc_pages_sent_at.sql", "original_file_path": "models/staging/segment/_sources.yml", "name": "source_not_null_dbtc_pages_sent_at", "alias": "source_not_null_dbtc_pages_sent_at", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "dbtc", "pages" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.7351203, "column_name": "sent_at", "file_key_name": "sources.dbtc" }, "test.tpch.source_not_null_dbtc_tracks_event_text.80a027ce56": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "event_text", "model": "{{ get_where_subquery(source('dbtc', 'tracks')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.dbtc.tracks" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "segment", "source_not_null_dbtc_tracks_event_text" ], "unique_id": "test.tpch.source_not_null_dbtc_tracks_event_text.80a027ce56", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_not_null_dbtc_tracks_event_text.sql", "original_file_path": "models/staging/segment/_sources.yml", "name": "source_not_null_dbtc_tracks_event_text", "alias": "source_not_null_dbtc_tracks_event_text", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "dbtc", "tracks" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.7370696, "column_name": "event_text", "file_key_name": "sources.dbtc" }, "test.tpch.source_not_null_dbtc_tracks_id.a88be3eab6": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "id", "model": "{{ get_where_subquery(source('dbtc', 'tracks')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.dbtc.tracks" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "segment", "source_not_null_dbtc_tracks_id" ], "unique_id": "test.tpch.source_not_null_dbtc_tracks_id.a88be3eab6", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_not_null_dbtc_tracks_id.sql", "original_file_path": "models/staging/segment/_sources.yml", "name": "source_not_null_dbtc_tracks_id", "alias": "source_not_null_dbtc_tracks_id", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "dbtc", "tracks" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.7388313, "column_name": "id", "file_key_name": "sources.dbtc" }, "test.tpch.source_unique_dbtc_tracks_id.d4b89ee628": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "id", "model": "{{ get_where_subquery(source('dbtc', 'tracks')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.dbtc.tracks" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "segment", "source_unique_dbtc_tracks_id" ], "unique_id": "test.tpch.source_unique_dbtc_tracks_id.d4b89ee628", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_unique_dbtc_tracks_id.sql", "original_file_path": "models/staging/segment/_sources.yml", "name": "source_unique_dbtc_tracks_id", "alias": "source_unique_dbtc_tracks_id", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "dbtc", "tracks" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.7408512, "column_name": "id", "file_key_name": "sources.dbtc" }, "test.tpch.source_not_null_dbtc_tracks_event.1fd1e17274": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "event", "model": "{{ get_where_subquery(source('dbtc', 'tracks')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.dbtc.tracks" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "segment", "source_not_null_dbtc_tracks_event" ], "unique_id": "test.tpch.source_not_null_dbtc_tracks_event.1fd1e17274", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_not_null_dbtc_tracks_event.sql", "original_file_path": "models/staging/segment/_sources.yml", "name": "source_not_null_dbtc_tracks_event", "alias": "source_not_null_dbtc_tracks_event", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "dbtc", "tracks" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.7426047, "column_name": "event", "file_key_name": "sources.dbtc" }, "test.tpch.source_not_null_dbtc_tracks_sent_at.1ad9794804": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "sent_at", "model": "{{ get_where_subquery(source('dbtc', 'tracks')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.dbtc.tracks" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "segment", "source_not_null_dbtc_tracks_sent_at" ], "unique_id": "test.tpch.source_not_null_dbtc_tracks_sent_at.1ad9794804", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_not_null_dbtc_tracks_sent_at.sql", "original_file_path": "models/staging/segment/_sources.yml", "name": "source_not_null_dbtc_tracks_sent_at", "alias": "source_not_null_dbtc_tracks_sent_at", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "dbtc", "tracks" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.7443533, "column_name": "sent_at", "file_key_name": "sources.dbtc" }, "test.tpch.source_not_null_yahooquery_link_clicked_link.3620c522a2": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "link", "model": "{{ get_where_subquery(source('yahooquery', 'link_clicked')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.yahooquery.link_clicked" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "segment", "source_not_null_yahooquery_link_clicked_link" ], "unique_id": "test.tpch.source_not_null_yahooquery_link_clicked_link.3620c522a2", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_not_null_yahooquery_link_clicked_link.sql", "original_file_path": "models/staging/segment/_sources.yml", "name": "source_not_null_yahooquery_link_clicked_link", "alias": "source_not_null_yahooquery_link_clicked_link", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "yahooquery", "link_clicked" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "severity": "WARN" }, "created_at": 1680812392.7470462, "column_name": "link", "file_key_name": "sources.yahooquery" }, "test.tpch.source_not_null_yahooquery_link_clicked_id.c548e15a7c": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "id", "model": "{{ get_where_subquery(source('yahooquery', 'link_clicked')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.yahooquery.link_clicked" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "segment", "source_not_null_yahooquery_link_clicked_id" ], "unique_id": "test.tpch.source_not_null_yahooquery_link_clicked_id.c548e15a7c", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_not_null_yahooquery_link_clicked_id.sql", "original_file_path": "models/staging/segment/_sources.yml", "name": "source_not_null_yahooquery_link_clicked_id", "alias": "source_not_null_yahooquery_link_clicked_id", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "yahooquery", "link_clicked" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.7491033, "column_name": "id", "file_key_name": "sources.yahooquery" }, "test.tpch.source_unique_yahooquery_link_clicked_id.8d33aca289": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "id", "model": "{{ get_where_subquery(source('yahooquery', 'link_clicked')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.yahooquery.link_clicked" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "segment", "source_unique_yahooquery_link_clicked_id" ], "unique_id": "test.tpch.source_unique_yahooquery_link_clicked_id.8d33aca289", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_unique_yahooquery_link_clicked_id.sql", "original_file_path": "models/staging/segment/_sources.yml", "name": "source_unique_yahooquery_link_clicked_id", "alias": "source_unique_yahooquery_link_clicked_id", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "yahooquery", "link_clicked" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.7508652, "column_name": "id", "file_key_name": "sources.yahooquery" }, "test.tpch.source_not_null_yahooquery_link_clicked_event.71e08699a9": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "event", "model": "{{ get_where_subquery(source('yahooquery', 'link_clicked')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.yahooquery.link_clicked" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "segment", "source_not_null_yahooquery_link_clicked_event" ], "unique_id": "test.tpch.source_not_null_yahooquery_link_clicked_event.71e08699a9", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_not_null_yahooquery_link_clicked_event.sql", "original_file_path": "models/staging/segment/_sources.yml", "name": "source_not_null_yahooquery_link_clicked_event", "alias": "source_not_null_yahooquery_link_clicked_event", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "yahooquery", "link_clicked" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.752601, "column_name": "event", "file_key_name": "sources.yahooquery" }, "test.tpch.source_not_null_yahooquery_link_clicked_sent_at.8b7ef7ad21": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "sent_at", "model": "{{ get_where_subquery(source('yahooquery', 'link_clicked')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.yahooquery.link_clicked" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "segment", "source_not_null_yahooquery_link_clicked_sent_at" ], "unique_id": "test.tpch.source_not_null_yahooquery_link_clicked_sent_at.8b7ef7ad21", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_not_null_yahooquery_link_clicked_sent_at.sql", "original_file_path": "models/staging/segment/_sources.yml", "name": "source_not_null_yahooquery_link_clicked_sent_at", "alias": "source_not_null_yahooquery_link_clicked_sent_at", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "yahooquery", "link_clicked" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.7543004, "column_name": "sent_at", "file_key_name": "sources.yahooquery" }, "test.tpch.source_not_null_yahooquery_pages_id.9f283dcda5": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "id", "model": "{{ get_where_subquery(source('yahooquery', 'pages')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.yahooquery.pages" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "segment", "source_not_null_yahooquery_pages_id" ], "unique_id": "test.tpch.source_not_null_yahooquery_pages_id.9f283dcda5", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_not_null_yahooquery_pages_id.sql", "original_file_path": "models/staging/segment/_sources.yml", "name": "source_not_null_yahooquery_pages_id", "alias": "source_not_null_yahooquery_pages_id", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "yahooquery", "pages" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.7563334, "column_name": "id", "file_key_name": "sources.yahooquery" }, "test.tpch.source_unique_yahooquery_pages_id.6bf98eb61d": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "id", "model": "{{ get_where_subquery(source('yahooquery', 'pages')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.yahooquery.pages" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "segment", "source_unique_yahooquery_pages_id" ], "unique_id": "test.tpch.source_unique_yahooquery_pages_id.6bf98eb61d", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_unique_yahooquery_pages_id.sql", "original_file_path": "models/staging/segment/_sources.yml", "name": "source_unique_yahooquery_pages_id", "alias": "source_unique_yahooquery_pages_id", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "yahooquery", "pages" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.7582886, "column_name": "id", "file_key_name": "sources.yahooquery" }, "test.tpch.source_not_null_yahooquery_pages_sent_at.318734adee": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "sent_at", "model": "{{ get_where_subquery(source('yahooquery', 'pages')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.yahooquery.pages" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "segment", "source_not_null_yahooquery_pages_sent_at" ], "unique_id": "test.tpch.source_not_null_yahooquery_pages_sent_at.318734adee", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_not_null_yahooquery_pages_sent_at.sql", "original_file_path": "models/staging/segment/_sources.yml", "name": "source_not_null_yahooquery_pages_sent_at", "alias": "source_not_null_yahooquery_pages_sent_at", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "yahooquery", "pages" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.760077, "column_name": "sent_at", "file_key_name": "sources.yahooquery" }, "test.tpch.source_not_null_yahooquery_tracks_event_text.700c8cdeb6": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "event_text", "model": "{{ get_where_subquery(source('yahooquery', 'tracks')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.yahooquery.tracks" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "segment", "source_not_null_yahooquery_tracks_event_text" ], "unique_id": "test.tpch.source_not_null_yahooquery_tracks_event_text.700c8cdeb6", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_not_null_yahooquery_tracks_event_text.sql", "original_file_path": "models/staging/segment/_sources.yml", "name": "source_not_null_yahooquery_tracks_event_text", "alias": "source_not_null_yahooquery_tracks_event_text", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "yahooquery", "tracks" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.7619812, "column_name": "event_text", "file_key_name": "sources.yahooquery" }, "test.tpch.source_not_null_yahooquery_tracks_id.621874b412": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "id", "model": "{{ get_where_subquery(source('yahooquery', 'tracks')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.yahooquery.tracks" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "segment", "source_not_null_yahooquery_tracks_id" ], "unique_id": "test.tpch.source_not_null_yahooquery_tracks_id.621874b412", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_not_null_yahooquery_tracks_id.sql", "original_file_path": "models/staging/segment/_sources.yml", "name": "source_not_null_yahooquery_tracks_id", "alias": "source_not_null_yahooquery_tracks_id", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "yahooquery", "tracks" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.7637808, "column_name": "id", "file_key_name": "sources.yahooquery" }, "test.tpch.source_unique_yahooquery_tracks_id.7c22f538c9": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "id", "model": "{{ get_where_subquery(source('yahooquery', 'tracks')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.yahooquery.tracks" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "segment", "source_unique_yahooquery_tracks_id" ], "unique_id": "test.tpch.source_unique_yahooquery_tracks_id.7c22f538c9", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_unique_yahooquery_tracks_id.sql", "original_file_path": "models/staging/segment/_sources.yml", "name": "source_unique_yahooquery_tracks_id", "alias": "source_unique_yahooquery_tracks_id", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "yahooquery", "tracks" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.765838, "column_name": "id", "file_key_name": "sources.yahooquery" }, "test.tpch.source_not_null_yahooquery_tracks_event.70b5c344c0": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "event", "model": "{{ get_where_subquery(source('yahooquery', 'tracks')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.yahooquery.tracks" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "segment", "source_not_null_yahooquery_tracks_event" ], "unique_id": "test.tpch.source_not_null_yahooquery_tracks_event.70b5c344c0", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_not_null_yahooquery_tracks_event.sql", "original_file_path": "models/staging/segment/_sources.yml", "name": "source_not_null_yahooquery_tracks_event", "alias": "source_not_null_yahooquery_tracks_event", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "yahooquery", "tracks" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.7676444, "column_name": "event", "file_key_name": "sources.yahooquery" }, "test.tpch.source_not_null_yahooquery_tracks_sent_at.e5fa5c0d96": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "sent_at", "model": "{{ get_where_subquery(source('yahooquery', 'tracks')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.yahooquery.tracks" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "segment", "source_not_null_yahooquery_tracks_sent_at" ], "unique_id": "test.tpch.source_not_null_yahooquery_tracks_sent_at.e5fa5c0d96", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_not_null_yahooquery_tracks_sent_at.sql", "original_file_path": "models/staging/segment/_sources.yml", "name": "source_not_null_yahooquery_tracks_sent_at", "alias": "source_not_null_yahooquery_tracks_sent_at", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "yahooquery", "tracks" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.7693567, "column_name": "sent_at", "file_key_name": "sources.yahooquery" }, "test.tpch.source_not_null_tpch_orders_o_orderkey.ebd571817b": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "o_orderkey", "model": "{{ get_where_subquery(source('tpch', 'orders')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.tpch.orders" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "source_not_null_tpch_orders_o_orderkey" ], "unique_id": "test.tpch.source_not_null_tpch_orders_o_orderkey.ebd571817b", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_not_null_tpch_orders_o_orderkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "source_not_null_tpch_orders_o_orderkey", "alias": "source_not_null_tpch_orders_o_orderkey", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "tpch", "orders" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.771352, "column_name": "o_orderkey", "file_key_name": "sources.tpch" }, "test.tpch.source_unique_tpch_orders_o_orderkey.374f048af2": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "o_orderkey", "model": "{{ get_where_subquery(source('tpch', 'orders')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.tpch.orders" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "source_unique_tpch_orders_o_orderkey" ], "unique_id": "test.tpch.source_unique_tpch_orders_o_orderkey.374f048af2", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_unique_tpch_orders_o_orderkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "source_unique_tpch_orders_o_orderkey", "alias": "source_unique_tpch_orders_o_orderkey", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "tpch", "orders" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.773076, "column_name": "o_orderkey", "file_key_name": "sources.tpch" }, "test.tpch.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67": { "test_metadata": { "name": "relationships", "kwargs": { "to": "source('tpch', 'customer')", "field": "c_custkey", "column_name": "o_custkey", "model": "{{ get_where_subquery(source('tpch', 'orders')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.customer", "source.tpch.tpch.orders" ] }, "config": { "enabled": true, "alias": "source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_" ], "unique_id": "test.tpch.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b\") }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_", "alias": "source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "tpch", "customer" ], [ "tpch", "orders" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b" }, "created_at": 1680812392.7751265, "column_name": "o_custkey", "file_key_name": "sources.tpch" }, "test.tpch.source_not_null_tpch_customer_c_custkey.a95b6298b5": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "c_custkey", "model": "{{ get_where_subquery(source('tpch', 'customer')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.tpch.customer" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "source_not_null_tpch_customer_c_custkey" ], "unique_id": "test.tpch.source_not_null_tpch_customer_c_custkey.a95b6298b5", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_not_null_tpch_customer_c_custkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "source_not_null_tpch_customer_c_custkey", "alias": "source_not_null_tpch_customer_c_custkey", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "tpch", "customer" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.7818983, "column_name": "c_custkey", "file_key_name": "sources.tpch" }, "test.tpch.source_unique_tpch_customer_c_custkey.048e97fc25": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "c_custkey", "model": "{{ get_where_subquery(source('tpch', 'customer')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.tpch.customer" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "source_unique_tpch_customer_c_custkey" ], "unique_id": "test.tpch.source_unique_tpch_customer_c_custkey.048e97fc25", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_unique_tpch_customer_c_custkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "source_unique_tpch_customer_c_custkey", "alias": "source_unique_tpch_customer_c_custkey", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "tpch", "customer" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.7836852, "column_name": "c_custkey", "file_key_name": "sources.tpch" }, "test.tpch.source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_.c9281c341d": { "test_metadata": { "name": "relationships", "kwargs": { "to": "source('tpch', 'nation')", "field": "n_nationkey", "column_name": "c_nationkey", "model": "{{ get_where_subquery(source('tpch', 'customer')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.nation", "source.tpch.tpch.customer" ] }, "config": { "enabled": true, "alias": "source_relationships_tpch_cust_995f2a0feb713559c0b1751b26b40aa7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_" ], "unique_id": "test.tpch.source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_.c9281c341d", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_cust_995f2a0feb713559c0b1751b26b40aa7\") }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_relationships_tpch_cust_995f2a0feb713559c0b1751b26b40aa7.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_", "alias": "source_relationships_tpch_cust_995f2a0feb713559c0b1751b26b40aa7", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "tpch", "nation" ], [ "tpch", "customer" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_relationships_tpch_cust_995f2a0feb713559c0b1751b26b40aa7" }, "created_at": 1680812392.7853987, "column_name": "c_nationkey", "file_key_name": "sources.tpch" }, "test.tpch.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d": { "test_metadata": { "name": "relationships", "kwargs": { "to": "source('tpch', 'orders')", "field": "o_orderkey", "column_name": "l_orderkey", "model": "{{ get_where_subquery(source('tpch', 'lineitem')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.orders", "source.tpch.tpch.lineitem" ] }, "config": { "enabled": true, "alias": "source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_" ], "unique_id": "test.tpch.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c\") }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_", "alias": "source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "tpch", "orders" ], [ "tpch", "lineitem" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c" }, "created_at": 1680812392.7922964, "column_name": "l_orderkey", "file_key_name": "sources.tpch" }, "test.tpch.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8": { "test_metadata": { "name": "relationships", "kwargs": { "to": "source('tpch', 'part')", "field": "p_partkey", "column_name": "l_partkey", "model": "{{ get_where_subquery(source('tpch', 'lineitem')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.part", "source.tpch.tpch.lineitem" ] }, "config": { "enabled": true, "alias": "source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_" ], "unique_id": "test.tpch.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740\") }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_", "alias": "source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "tpch", "part" ], [ "tpch", "lineitem" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740" }, "created_at": 1680812392.7983398, "column_name": "l_partkey", "file_key_name": "sources.tpch" }, "test.tpch.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2": { "test_metadata": { "name": "relationships", "kwargs": { "to": "source('tpch', 'supplier')", "field": "s_suppkey", "column_name": "l_suppkey", "model": "{{ get_where_subquery(source('tpch', 'lineitem')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.supplier", "source.tpch.tpch.lineitem" ] }, "config": { "enabled": true, "alias": "source_relationships_tpch_line_56b786676a582f41b4502498079b8292", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_" ], "unique_id": "test.tpch.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_line_56b786676a582f41b4502498079b8292\") }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_relationships_tpch_line_56b786676a582f41b4502498079b8292.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_", "alias": "source_relationships_tpch_line_56b786676a582f41b4502498079b8292", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "tpch", "supplier" ], [ "tpch", "lineitem" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_relationships_tpch_line_56b786676a582f41b4502498079b8292" }, "created_at": 1680812392.8044357, "column_name": "l_suppkey", "file_key_name": "sources.tpch" }, "test.tpch.source_not_null_tpch_nation_n_nationkey.5ac5d27298": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "n_nationkey", "model": "{{ get_where_subquery(source('tpch', 'nation')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.tpch.nation" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "source_not_null_tpch_nation_n_nationkey" ], "unique_id": "test.tpch.source_not_null_tpch_nation_n_nationkey.5ac5d27298", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_not_null_tpch_nation_n_nationkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "source_not_null_tpch_nation_n_nationkey", "alias": "source_not_null_tpch_nation_n_nationkey", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "tpch", "nation" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.8103461, "column_name": "n_nationkey", "file_key_name": "sources.tpch" }, "test.tpch.source_unique_tpch_nation_n_nationkey.3bd4153064": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "n_nationkey", "model": "{{ get_where_subquery(source('tpch', 'nation')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.tpch.nation" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "source_unique_tpch_nation_n_nationkey" ], "unique_id": "test.tpch.source_unique_tpch_nation_n_nationkey.3bd4153064", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_unique_tpch_nation_n_nationkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "source_unique_tpch_nation_n_nationkey", "alias": "source_unique_tpch_nation_n_nationkey", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "tpch", "nation" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.8124204, "column_name": "n_nationkey", "file_key_name": "sources.tpch" }, "test.tpch.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da": { "test_metadata": { "name": "relationships", "kwargs": { "to": "source('tpch', 'region')", "field": "r_regionkey", "column_name": "n_regionkey", "model": "{{ get_where_subquery(source('tpch', 'nation')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.region", "source.tpch.tpch.nation" ] }, "config": { "enabled": true, "alias": "source_relationships_tpch_nati_863138f31f617783ad556b879ab65039", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_" ], "unique_id": "test.tpch.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_nati_863138f31f617783ad556b879ab65039\") }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_relationships_tpch_nati_863138f31f617783ad556b879ab65039.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_", "alias": "source_relationships_tpch_nati_863138f31f617783ad556b879ab65039", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "tpch", "region" ], [ "tpch", "nation" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_relationships_tpch_nati_863138f31f617783ad556b879ab65039" }, "created_at": 1680812392.8141406, "column_name": "n_regionkey", "file_key_name": "sources.tpch" }, "test.tpch.source_not_null_tpch_part_p_partkey.9543847190": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "p_partkey", "model": "{{ get_where_subquery(source('tpch', 'part')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.tpch.part" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "source_not_null_tpch_part_p_partkey" ], "unique_id": "test.tpch.source_not_null_tpch_part_p_partkey.9543847190", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_not_null_tpch_part_p_partkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "source_not_null_tpch_part_p_partkey", "alias": "source_not_null_tpch_part_p_partkey", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "tpch", "part" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.820391, "column_name": "p_partkey", "file_key_name": "sources.tpch" }, "test.tpch.source_unique_tpch_part_p_partkey.30b171988e": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "p_partkey", "model": "{{ get_where_subquery(source('tpch', 'part')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.tpch.part" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "source_unique_tpch_part_p_partkey" ], "unique_id": "test.tpch.source_unique_tpch_part_p_partkey.30b171988e", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_unique_tpch_part_p_partkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "source_unique_tpch_part_p_partkey", "alias": "source_unique_tpch_part_p_partkey", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "tpch", "part" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.8221188, "column_name": "p_partkey", "file_key_name": "sources.tpch" }, "test.tpch.dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0.534c6e22cc": { "test_metadata": { "name": "accepted_range", "kwargs": { "min_value": 0, "max_value": 2000, "column_name": "p_retailprice", "model": "{{ get_where_subquery(source('tpch', 'part')) }}" }, "namespace": "dbt_utils" }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.part" ] }, "config": { "enabled": true, "alias": "dbt_utils_source_accepted_rang_867ec3ee807cbbcbc712784162a33008", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0" ], "unique_id": "test.tpch.dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0.534c6e22cc", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_source_accepted_rang_867ec3ee807cbbcbc712784162a33008\") }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "dbt_utils_source_accepted_rang_867ec3ee807cbbcbc712784162a33008.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0", "alias": "dbt_utils_source_accepted_rang_867ec3ee807cbbcbc712784162a33008", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "tpch", "part" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "dbt_utils_source_accepted_rang_867ec3ee807cbbcbc712784162a33008" }, "created_at": 1680812392.823959, "column_name": "p_retailprice", "file_key_name": "sources.tpch" }, "test.tpch.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f": { "test_metadata": { "name": "relationships", "kwargs": { "to": "source('tpch', 'part')", "field": "p_partkey", "column_name": "ps_partkey", "model": "{{ get_where_subquery(source('tpch', 'partsupp')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.part", "source.tpch.tpch.partsupp" ] }, "config": { "enabled": true, "alias": "source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_" ], "unique_id": "test.tpch.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8\") }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_", "alias": "source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "tpch", "part" ], [ "tpch", "partsupp" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8" }, "created_at": 1680812392.8335931, "column_name": "ps_partkey", "file_key_name": "sources.tpch" }, "test.tpch.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e": { "test_metadata": { "name": "relationships", "kwargs": { "to": "source('tpch', 'supplier')", "field": "s_suppkey", "column_name": "ps_suppkey", "model": "{{ get_where_subquery(source('tpch', 'partsupp')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.supplier", "source.tpch.tpch.partsupp" ] }, "config": { "enabled": true, "alias": "source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_" ], "unique_id": "test.tpch.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817\") }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_", "alias": "source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "tpch", "supplier" ], [ "tpch", "partsupp" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817" }, "created_at": 1680812392.839856, "column_name": "ps_suppkey", "file_key_name": "sources.tpch" }, "test.tpch.source_not_null_tpch_region_r_regionkey.8f6ee68076": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "r_regionkey", "model": "{{ get_where_subquery(source('tpch', 'region')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.tpch.region" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "source_not_null_tpch_region_r_regionkey" ], "unique_id": "test.tpch.source_not_null_tpch_region_r_regionkey.8f6ee68076", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_not_null_tpch_region_r_regionkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "source_not_null_tpch_region_r_regionkey", "alias": "source_not_null_tpch_region_r_regionkey", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "tpch", "region" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.8460984, "column_name": "r_regionkey", "file_key_name": "sources.tpch" }, "test.tpch.source_unique_tpch_region_r_regionkey.d8eeced103": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "r_regionkey", "model": "{{ get_where_subquery(source('tpch', 'region')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.tpch.region" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "source_unique_tpch_region_r_regionkey" ], "unique_id": "test.tpch.source_unique_tpch_region_r_regionkey.d8eeced103", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_unique_tpch_region_r_regionkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "source_unique_tpch_region_r_regionkey", "alias": "source_unique_tpch_region_r_regionkey", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "tpch", "region" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.847969, "column_name": "r_regionkey", "file_key_name": "sources.tpch" }, "test.tpch.source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST.0e96b086b2": { "test_metadata": { "name": "accepted_values", "kwargs": { "values": [ "AFRICA", "AMERICA", "ASIA", "EUROPE", "MIDDLE EAST" ], "column_name": "r_name", "model": "{{ get_where_subquery(source('tpch', 'region')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.region" ] }, "config": { "enabled": true, "alias": "source_accepted_values_tpch_re_8cb7df798af7d7dff1ac8c857e950c24", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST" ], "unique_id": "test.tpch.source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST.0e96b086b2", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_tpch_re_8cb7df798af7d7dff1ac8c857e950c24\") }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_accepted_values_tpch_re_8cb7df798af7d7dff1ac8c857e950c24.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST", "alias": "source_accepted_values_tpch_re_8cb7df798af7d7dff1ac8c857e950c24", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "tpch", "region" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_accepted_values_tpch_re_8cb7df798af7d7dff1ac8c857e950c24" }, "created_at": 1680812392.849711, "column_name": "r_name", "file_key_name": "sources.tpch" }, "test.tpch.source_not_null_tpch_supplier_s_suppkey.94660e6dab": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "s_suppkey", "model": "{{ get_where_subquery(source('tpch', 'supplier')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.tpch.supplier" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "source_not_null_tpch_supplier_s_suppkey" ], "unique_id": "test.tpch.source_not_null_tpch_supplier_s_suppkey.94660e6dab", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_not_null_tpch_supplier_s_suppkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "source_not_null_tpch_supplier_s_suppkey", "alias": "source_not_null_tpch_supplier_s_suppkey", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "tpch", "supplier" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.8571095, "column_name": "s_suppkey", "file_key_name": "sources.tpch" }, "test.tpch.source_unique_tpch_supplier_s_suppkey.1a36cf4370": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "s_suppkey", "model": "{{ get_where_subquery(source('tpch', 'supplier')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.tpch.supplier" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "source_unique_tpch_supplier_s_suppkey" ], "unique_id": "test.tpch.source_unique_tpch_supplier_s_suppkey.1a36cf4370", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_unique_tpch_supplier_s_suppkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "source_unique_tpch_supplier_s_suppkey", "alias": "source_unique_tpch_supplier_s_suppkey", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "tpch", "supplier" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1680812392.8588839, "column_name": "s_suppkey", "file_key_name": "sources.tpch" }, "test.tpch.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da": { "test_metadata": { "name": "relationships", "kwargs": { "to": "source('tpch', 'nation')", "field": "n_nationkey", "column_name": "s_nationkey", "model": "{{ get_where_subquery(source('tpch', 'supplier')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.nation", "source.tpch.tpch.supplier" ] }, "config": { "enabled": true, "alias": "source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_" ], "unique_id": "test.tpch.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b\") }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_", "alias": "source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "tpch", "nation" ], [ "tpch", "supplier" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b" }, "created_at": 1680812392.8609033, "column_name": "s_nationkey", "file_key_name": "sources.tpch" }, "test.tpch.source_unique_tpch_snapshot_customer_snapshot_src_c_custkey.463ab9515e": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "c_custkey", "model": "{{ get_where_subquery(source('tpch_snapshot', 'customer_snapshot_src')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.tpch_snapshot.customer_snapshot_src" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "source_unique_tpch_snapshot_customer_snapshot_src_c_custkey" ], "unique_id": "test.tpch.source_unique_tpch_snapshot_customer_snapshot_src_c_custkey.463ab9515e", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_unique_tpch_snapshot_customer_snapshot_src_c_custkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "source_unique_tpch_snapshot_customer_snapshot_src_c_custkey", "alias": "source_unique_tpch_snapshot_customer_snapshot_src_c_custkey", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "tpch_snapshot", "customer_snapshot_src" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "severity": "WARN" }, "created_at": 1680812392.8676004, "column_name": "c_custkey", "file_key_name": "sources.tpch_snapshot" }, "test.tpch.source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey.e3f0c54a96": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "c_custkey", "model": "{{ get_where_subquery(source('tpch_snapshot', 'customer_snapshot_src')) }}" }, "namespace": null }, "resource_type": "test", "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.tpch_snapshot.customer_snapshot_src" ] }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "fqn": [ "tpch", "staging", "tpch", "source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey" ], "unique_id": "test.tpch.source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey.e3f0c54a96", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey", "alias": "source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey", "checksum": { "name": "none", "checksum": "" }, "tags": [], "refs": [], "sources": [ [ "tpch_snapshot", "customer_snapshot_src" ] ], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": { "severity": "WARN" }, "created_at": 1680812392.869835, "column_name": "c_custkey", "file_key_name": "sources.tpch_snapshot" } }, "sources": { "source.tpch.dbtc.link_clicked": { "fqn": [ "tpch", "staging", "segment", "dbtc", "link_clicked" ], "database": "DOUG_DEMO_V2", "schema": "dbtc", "unique_id": "source.tpch.dbtc.link_clicked", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "models/staging/segment/_sources.yml", "original_file_path": "models/staging/segment/_sources.yml", "name": "link_clicked", "source_name": "dbtc", "source_description": "", "loader": "", "identifier": "link_clicked", "resource_type": "source", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": null, "description": "", "columns": { "link": { "name": "link", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "id": { "name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "event": { "name": "event", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "sent_at": { "name": "sent_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "DOUG_DEMO_V2.dbtc.link_clicked", "created_at": 1680812392.7302945 }, "source.tpch.dbtc.pages": { "fqn": [ "tpch", "staging", "segment", "dbtc", "pages" ], "database": "DOUG_DEMO_V2", "schema": "dbtc", "unique_id": "source.tpch.dbtc.pages", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "models/staging/segment/_sources.yml", "original_file_path": "models/staging/segment/_sources.yml", "name": "pages", "source_name": "dbtc", "source_description": "", "loader": "", "identifier": "pages", "resource_type": "source", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": null, "description": "", "columns": { "id": { "name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "sent_at": { "name": "sent_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "DOUG_DEMO_V2.dbtc.pages", "created_at": 1680812392.7360854 }, "source.tpch.dbtc.tracks": { "fqn": [ "tpch", "staging", "segment", "dbtc", "tracks" ], "database": "DOUG_DEMO_V2", "schema": "dbtc", "unique_id": "source.tpch.dbtc.tracks", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "models/staging/segment/_sources.yml", "original_file_path": "models/staging/segment/_sources.yml", "name": "tracks", "source_name": "dbtc", "source_description": "", "loader": "", "identifier": "tracks", "resource_type": "source", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": null, "description": "", "columns": { "event_text": { "name": "event_text", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "id": { "name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "event": { "name": "event", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "sent_at": { "name": "sent_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "DOUG_DEMO_V2.dbtc.tracks", "created_at": 1680812392.745281 }, "source.tpch.yahooquery.link_clicked": { "fqn": [ "tpch", "staging", "segment", "yahooquery", "link_clicked" ], "database": "DOUG_DEMO_V2", "schema": "yahooquery", "unique_id": "source.tpch.yahooquery.link_clicked", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "models/staging/segment/_sources.yml", "original_file_path": "models/staging/segment/_sources.yml", "name": "link_clicked", "source_name": "yahooquery", "source_description": "", "loader": "", "identifier": "link_clicked", "resource_type": "source", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": null, "description": "", "columns": { "link": { "name": "link", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "id": { "name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "event": { "name": "event", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "sent_at": { "name": "sent_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "DOUG_DEMO_V2.yahooquery.link_clicked", "created_at": 1680812392.7553163 }, "source.tpch.yahooquery.pages": { "fqn": [ "tpch", "staging", "segment", "yahooquery", "pages" ], "database": "DOUG_DEMO_V2", "schema": "yahooquery", "unique_id": "source.tpch.yahooquery.pages", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "models/staging/segment/_sources.yml", "original_file_path": "models/staging/segment/_sources.yml", "name": "pages", "source_name": "yahooquery", "source_description": "", "loader": "", "identifier": "pages", "resource_type": "source", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": null, "description": "", "columns": { "id": { "name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "sent_at": { "name": "sent_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "DOUG_DEMO_V2.yahooquery.pages", "created_at": 1680812392.7610016 }, "source.tpch.yahooquery.tracks": { "fqn": [ "tpch", "staging", "segment", "yahooquery", "tracks" ], "database": "DOUG_DEMO_V2", "schema": "yahooquery", "unique_id": "source.tpch.yahooquery.tracks", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "models/staging/segment/_sources.yml", "original_file_path": "models/staging/segment/_sources.yml", "name": "tracks", "source_name": "yahooquery", "source_description": "", "loader": "", "identifier": "tracks", "resource_type": "source", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": null, "description": "", "columns": { "event_text": { "name": "event_text", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "id": { "name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "event": { "name": "event", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "sent_at": { "name": "sent_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "DOUG_DEMO_V2.yahooquery.tracks", "created_at": 1680812392.770298 }, "source.tpch.tpch.orders": { "fqn": [ "tpch", "staging", "tpch", "tpch", "orders" ], "database": "doug_demo_v2", "schema": "tpch", "unique_id": "source.tpch.tpch.orders", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "models/staging/tpch/_tpch__sources.yml", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "orders", "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "orders", "resource_type": "source", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": "_etl_updated_timestamp", "freshness": { "warn_after": { "count": 24, "period": "hour" }, "error_after": { "count": 48, "period": "hour" }, "filter": null }, "external": null, "description": "main order tracking table", "columns": { "o_orderkey": { "name": "o_orderkey", "description": "SF*1,500,000 are sparsely populated", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "o_custkey": { "name": "o_custkey", "description": "Foreign Key to C_CUSTKEY", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "o_orderstatus": { "name": "o_orderstatus", "description": "status code of the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "o_totalprice": { "name": "o_totalprice", "description": "raw price", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "o_orderdate": { "name": "o_orderdate", "description": "date the order was made", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "o_orderpriority": { "name": "o_orderpriority", "description": "code associated with the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "o_clerk": { "name": "o_clerk", "description": "id of the clerk", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "o_shippriority": { "name": "o_shippriority", "description": "numeric representation of the shipping priority, zero being the default", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "o_comment": { "name": "o_comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.orders", "created_at": 1680812392.7806256 }, "source.tpch.tpch.customer": { "fqn": [ "tpch", "staging", "tpch", "tpch", "customer" ], "database": "doug_demo_v2", "schema": "tpch", "unique_id": "source.tpch.tpch.customer", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "models/staging/tpch/_tpch__sources.yml", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "customer", "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "customer", "resource_type": "source", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": "_etl_updated_timestamp", "freshness": { "warn_after": { "count": 24, "period": "hour" }, "error_after": { "count": 48, "period": "hour" }, "filter": null }, "external": null, "description": "main customer table", "columns": { "c_custkey": { "name": "c_custkey", "description": "unique customer key", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_name": { "name": "c_name", "description": "customer id", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_address": { "name": "c_address", "description": "address of the customer", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_nationkey": { "name": "c_nationkey", "description": "foreign key to stg_tpch_nations", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_phone": { "name": "c_phone", "description": "phone number of the customer", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_acctbal": { "name": "c_acctbal", "description": "raw account balance", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_mktsegment": { "name": "c_mktsegment", "description": "market segment of the customer", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_comment": { "name": "c_comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.customer", "created_at": 1680812392.7912753 }, "source.tpch.tpch.lineitem": { "fqn": [ "tpch", "staging", "tpch", "tpch", "lineitem" ], "database": "doug_demo_v2", "schema": "tpch", "unique_id": "source.tpch.tpch.lineitem", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "models/staging/tpch/_tpch__sources.yml", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "lineitem", "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "lineitem", "resource_type": "source", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": "_etl_updated_timestamp", "freshness": { "warn_after": { "count": 24, "period": "hour" }, "error_after": { "count": 48, "period": "hour" }, "filter": null }, "external": null, "description": "main lineitem table", "columns": { "l_orderkey": { "name": "l_orderkey", "description": "Foreign Key to O_ORDERKEY", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_partkey": { "name": "l_partkey", "description": "Foreign key to P_PARTKEY, first part of the compound Foreign Key to (PS_PARTKEY,PS_SUPPKEY) with L_SUPPKEY", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_suppkey": { "name": "l_suppkey", "description": "Foreign key to S_SUPPKEY, second part of the compound Foreign Key to (PS_PARTKEY, PS_SUPPKEY) with L_PARTKEY", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_linenumber": { "name": "l_linenumber", "description": "sequence of the order items within the order", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_quantity": { "name": "l_quantity", "description": "total units", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_extendedprice": { "name": "l_extendedprice", "description": "line item price", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_discount": { "name": "l_discount", "description": "percentage of the discount", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_tax": { "name": "l_tax", "description": "tax rate of the order item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_returnflag": { "name": "l_returnflag", "description": "letter determining the status of the return", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_linestatus": { "name": "l_linestatus", "description": "status code of the order item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_shipdate": { "name": "l_shipdate", "description": "the date the order item is being shipped", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_commitdate": { "name": "l_commitdate", "description": "the date the order item is being commited", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_receiptdate": { "name": "l_receiptdate", "description": "the receipt date of the order item", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_shipinstruct": { "name": "l_shipinstruct", "description": "additional instructions on the shipment", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_shipmode": { "name": "l_shipmode", "description": "method of shipping", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "l_comment": { "name": "l_comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.lineitem", "created_at": 1680812392.8093667 }, "source.tpch.tpch.nation": { "fqn": [ "tpch", "staging", "tpch", "tpch", "nation" ], "database": "doug_demo_v2", "schema": "tpch", "unique_id": "source.tpch.tpch.nation", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "models/staging/tpch/_tpch__sources.yml", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "nation", "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "nation", "resource_type": "source", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": "_etl_updated_timestamp", "freshness": null, "external": null, "description": "nation mapping", "columns": { "n_nationkey": { "name": "n_nationkey", "description": "25 nations are populated", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "n_name": { "name": "n_name", "description": "nation name", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "n_regionkey": { "name": "n_regionkey", "description": "Foreign Key to R_REGIONKEY", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "n_comment": { "name": "n_comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.nation", "created_at": 1680812392.819358 }, "source.tpch.tpch.part": { "fqn": [ "tpch", "staging", "tpch", "tpch", "part" ], "database": "doug_demo_v2", "schema": "tpch", "unique_id": "source.tpch.tpch.part", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "models/staging/tpch/_tpch__sources.yml", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "part", "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "part", "resource_type": "source", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": "_etl_updated_timestamp", "freshness": { "warn_after": { "count": 24, "period": "hour" }, "error_after": { "count": 48, "period": "hour" }, "filter": null }, "external": null, "description": "main part table", "columns": { "p_partkey": { "name": "p_partkey", "description": "SF*200,000 are populated", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "p_name": { "name": "p_name", "description": "name of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "p_mfgr": { "name": "p_mfgr", "description": "manufacturer of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "p_brand": { "name": "p_brand", "description": "brand of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "p_type": { "name": "p_type", "description": "type of part including material", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "p_size": { "name": "p_size", "description": "size of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "p_container": { "name": "p_container", "description": "container of the part", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "p_retailprice": { "name": "p_retailprice", "description": "raw retail price", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "p_comment": { "name": "p_comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.part", "created_at": 1680812392.8325205 }, "source.tpch.tpch.partsupp": { "fqn": [ "tpch", "staging", "tpch", "tpch", "partsupp" ], "database": "doug_demo_v2", "schema": "tpch", "unique_id": "source.tpch.tpch.partsupp", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "models/staging/tpch/_tpch__sources.yml", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "partsupp", "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "partsupp", "resource_type": "source", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": "_etl_updated_timestamp", "freshness": { "warn_after": { "count": 24, "period": "hour" }, "error_after": { "count": 48, "period": "hour" }, "filter": null }, "external": null, "description": "main part supplier table", "columns": { "ps_partkey": { "name": "ps_partkey", "description": "Foreign Key to P_PARTKEY", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "ps_suppkey": { "name": "ps_suppkey", "description": "Foreign Key to S_SUPPKEY", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "ps_availqty": { "name": "ps_availqty", "description": "raw available quantity", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "ps_supplycost": { "name": "ps_supplycost", "description": "raw cost", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "ps_comment": { "name": "ps_comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.partsupp", "created_at": 1680812392.8450704 }, "source.tpch.tpch.region": { "fqn": [ "tpch", "staging", "tpch", "tpch", "region" ], "database": "doug_demo_v2", "schema": "tpch", "unique_id": "source.tpch.tpch.region", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "models/staging/tpch/_tpch__sources.yml", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "region", "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "region", "resource_type": "source", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": "_etl_updated_timestamp", "freshness": null, "external": null, "description": "region mapping", "columns": { "r_regionkey": { "name": "r_regionkey", "description": "5 regions are populated", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "r_name": { "name": "r_name", "description": "region name", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "r_comment": { "name": "r_comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.region", "created_at": 1680812392.8561358 }, "source.tpch.tpch.supplier": { "fqn": [ "tpch", "staging", "tpch", "tpch", "supplier" ], "database": "doug_demo_v2", "schema": "tpch", "unique_id": "source.tpch.tpch.supplier", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "models/staging/tpch/_tpch__sources.yml", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "supplier", "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "supplier", "resource_type": "source", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": "_etl_updated_timestamp", "freshness": null, "external": null, "description": "main supplier table", "columns": { "s_suppkey": { "name": "s_suppkey", "description": "SF*10,000 are populated", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "s_name": { "name": "s_name", "description": "id of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "s_address": { "name": "s_address", "description": "address of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "s_nationkey": { "name": "s_nationkey", "description": "Foreign Key to N_NATIONKEY", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "s_phone": { "name": "s_phone", "description": "phone number of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "s_acctbal": { "name": "s_acctbal", "description": "raw account balance", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "s_comment": { "name": "s_comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.supplier", "created_at": 1680812392.8657937 }, "source.tpch.tpch_snapshot.customer_snapshot_src": { "fqn": [ "tpch", "staging", "tpch", "tpch_snapshot", "customer_snapshot_src" ], "database": "analytics", "schema": "dbt_mwinkler", "unique_id": "source.tpch.tpch_snapshot.customer_snapshot_src", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "models/staging/tpch/_tpch__sources.yml", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "name": "customer_snapshot_src", "source_name": "tpch_snapshot", "source_description": "", "loader": "", "identifier": "customer_snapshot_src", "resource_type": "source", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": null, "description": "slowly changing dimension table", "columns": { "c_custkey": { "name": "c_custkey", "description": "unique customer key", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_name": { "name": "c_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_address": { "name": "c_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_nationkey": { "name": "c_nationkey", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_phone": { "name": "c_phone", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_acctbal": { "name": "c_acctbal", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_mktsegment": { "name": "c_mktsegment", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] }, "c_comment": { "name": "c_comment", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics.dbt_mwinkler.customer_snapshot_src", "created_at": 1680812392.870854 }, "source.tpch.test_eqrx_s3.dummy_data": { "fqn": [ "tpch", "demo_examples", "test_eqrx_s3", "dummy_data" ], "database": "DOUG_DEMO_V2", "schema": "dbt_dguthrie", "unique_id": "source.tpch.test_eqrx_s3.dummy_data", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "models/demo_examples/demo_examples.yml", "original_file_path": "models/demo_examples/demo_examples.yml", "name": "dummy_data", "source_name": "test_eqrx_s3", "source_description": "", "loader": "", "identifier": "dummy_data", "resource_type": "source", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": { "location": "@eqrx_test", "file_format": "( type = csv )", "row_format": null, "tbl_properties": null, "partitions": null }, "description": "Testing EQRx setup", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "DOUG_DEMO_V2.dbt_dguthrie.dummy_data", "created_at": 1680812392.870999 }, "source.tpch.deutsche_boerse.trading_data": { "fqn": [ "tpch", "demo_examples", "deutsche_boerse", "trading_data" ], "database": "analytics", "schema": "boerse", "unique_id": "source.tpch.deutsche_boerse.trading_data", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "models/demo_examples/external_sources.yml", "original_file_path": "models/demo_examples/external_sources.yml", "name": "trading_data", "source_name": "deutsche_boerse", "source_description": "This is an example of using external sources", "loader": "", "identifier": "trading_data", "resource_type": "source", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": { "location": "@boerse", "file_format": "(type=csv field_delimiter=',' skip_header=1)", "row_format": null, "tbl_properties": null, "partitions": [ { "name": "source_file_name", "description": "", "data_type": "varchar", "meta": {}, "expression": "metadata$filename" } ], "auto_refresh": false }, "description": "The Deutsche Börse Public Data Set consists of trade data aggregated to one minute intervals from the Eurex and Xetra trading systems. It provides the initial price, lowest price, highest price, final price and volume for every minute of the trading day, and for every tradeable security.\n", "columns": { "ISIN": { "name": "ISIN", "description": "ISIN of the security", "meta": {}, "data_type": "TEXT", "quote": null, "tags": [] }, "MarketSegment": { "name": "MarketSegment", "description": "The product market segment, following the convention on http://www.eurexchange.com", "meta": {}, "data_type": "TEXT", "quote": null, "tags": [] }, "UnderlyingSymbol": { "name": "UnderlyingSymbol", "description": "The underlying security", "meta": {}, "data_type": "TEXT", "quote": null, "tags": [] }, "UnderlyingISIN": { "name": "UnderlyingISIN", "description": "ISIN of any underlying security\t", "meta": {}, "data_type": "TEXT", "quote": null, "tags": [] }, "Currency": { "name": "Currency", "description": "Currency in which the product is traded\t(ISO 4127)", "meta": {}, "data_type": "TEXT", "quote": null, "tags": [] }, "SecurityType": { "name": "SecurityType", "description": "Type of instrument", "meta": {}, "data_type": "TEXT", "quote": null, "tags": [] }, "MaturityDate": { "name": "MaturityDate", "description": "Maturity date of the security", "meta": {}, "data_type": "TEXT", "quote": null, "tags": [] }, "StrikePrice": { "name": "StrikePrice", "description": "Strike price", "meta": {}, "data_type": "NUMBER", "quote": null, "tags": [] }, "PutOrCall": { "name": "PutOrCall", "description": "Type of option (string: PUT or CALL)", "meta": {}, "data_type": "TEXT", "quote": null, "tags": [] }, "MLEG": { "name": "MLEG", "description": "Identifies multi-leg options", "meta": {}, "data_type": "TEXT", "quote": null, "tags": [] }, "ContractGenerationNumber": { "name": "ContractGenerationNumber", "description": "The generation number for options contracts", "meta": {}, "data_type": "TEXT", "quote": null, "tags": [] }, "SecurityID": { "name": "SecurityID", "description": "Unique identifier for each contract", "meta": {}, "data_type": "TEXT", "quote": null, "tags": [] }, "Date": { "name": "Date", "description": "Date of trading period", "meta": {}, "data_type": "DATE", "quote": null, "tags": [] }, "Time": { "name": "Time", "description": "Minute of trading to which this entry relates", "meta": {}, "data_type": "TEXT", "quote": null, "tags": [] }, "StartPrice": { "name": "StartPrice", "description": "Trading price at the start of period", "meta": {}, "data_type": "NUMBER", "quote": null, "tags": [] }, "MaxPrice": { "name": "MaxPrice", "description": "Maximum price over the period", "meta": {}, "data_type": "NUMBER", "quote": null, "tags": [] }, "MinPrice": { "name": "MinPrice", "description": "Minimum price over the period", "meta": {}, "data_type": "NUMBER", "quote": null, "tags": [] }, "EndPrice": { "name": "EndPrice", "description": "Trading price at the end of the period", "meta": {}, "data_type": "NUMBER", "quote": null, "tags": [] }, "NumberOfContracts": { "name": "NumberOfContracts", "description": "Number of contracts traded during the period", "meta": {}, "data_type": "INT", "quote": null, "tags": [] }, "NumberOfTrades": { "name": "NumberOfTrades", "description": "Number of distinct trades during the period", "meta": {}, "data_type": "INT", "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics.boerse.trading_data", "created_at": 1680812392.8711696 } }, "macros": { "macro.tpch.cents_to_dollars": { "unique_id": "macro.tpch.cents_to_dollars", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "macros/cents_to_dollars.sql", "original_file_path": "macros/cents_to_dollars.sql", "name": "cents_to_dollars", "macro_sql": "{% macro cents_to_dollars(column_name, precision=2) -%}\n ({{ column_name }} / 100)::numeric(16, {{ precision }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "A macro to convert cents to dollars", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://macros/macro.yml", "arguments": [ { "name": "column_name", "type": "STRING", "description": "The name of the column you want to convert" }, { "name": "precision", "type": "INTEGER", "description": "Number of decimal places. Defaults to 2." } ], "created_at": 1680812392.0751212, "supported_languages": null }, "macro.tpch.drop_ci_schemas": { "unique_id": "macro.tpch.drop_ci_schemas", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "macros/drop_ci_schemas.sql", "original_file_path": "macros/drop_ci_schemas.sql", "name": "drop_ci_schemas", "macro_sql": "{% macro drop_ci_schemas(database=target.database, dryrun=True) %}\n\n {% set all_schemas_to_drop = [] %}\n\n {% set drop_schema_sql %}\n\n {% set find_schemas_sql %}\n SELECT SCHEMA_NAME\n FROM {{ database | upper }}.INFORMATION_SCHEMA.SCHEMATA\n WHERE SCHEMA_NAME LIKE 'DBT_CLOUD_PR_%';\n {% endset %}\n\n {% set schemas_to_drop = run_query(find_schemas_sql) %}\n\n {% for row in schemas_to_drop %}\n DROP SCHEMA {{ database | upper }}.{{ row[0] | upper }};\n {% do all_schemas_to_drop.append('{}.{}'.format(database.upper(), row[0].upper())) %}\n {% endfor %}\n\n {% endset %}\n\n {% if all_schemas_to_drop %}\n {% if dryrun %}\n {% do log('*NOT* dropping {}'.format(all_schemas_to_drop), info=True) %}\n {% else %}\n {% do log('Dropping: {} ...'.format(all_schemas_to_drop), info=True) %}\n {% do run_query(drop_schema_sql) %}\n {% do log('Done.', info=True) %}\n {% endif %}\n {% else %}\n {% do log('No schemas to drop!', info=True) %}\n {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.2559931, "supported_languages": null }, "macro.tpch.money": { "unique_id": "macro.tpch.money", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "macros/convert_money.sql", "original_file_path": "macros/convert_money.sql", "name": "money", "macro_sql": "{% macro money(col) -%}\n::decimal(16,4)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "A macro to convert a column to consistent precision", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://macros/macro.yml", "arguments": [ { "name": "col", "type": "INTEGER", "description": "column getting converted to decimal(16,4)" } ], "created_at": 1680812392.0795908, "supported_languages": null }, "macro.tpch.omit_soft_deletions": { "unique_id": "macro.tpch.omit_soft_deletions", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "macros/omit_soft_deletions.sql", "original_file_path": "macros/omit_soft_deletions.sql", "name": "omit_soft_deletions", "macro_sql": "{% macro omit_soft_deletions(table, columns) %}\n\n select {{ ', '.join(columns) }}\n from {{ table }}\n where not is_deleted\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.2572653, "supported_languages": null }, "macro.tpch.generate_base_models": { "unique_id": "macro.tpch.generate_base_models", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "macros/generate_base_models.sql", "original_file_path": "macros/generate_base_models.sql", "name": "generate_base_models", "macro_sql": "{% macro generate_base_models(source_name, exclude=[], include=[], leading_commas=False, case_sensitive_cols=False) %}\n\n {%- if include | length > 0 and exclude | length > 0 -%}\n -- You cannot use both include and exclude arguments\n {%- elif execute -%}\n\n {% set sources = graph.sources.values() | selectattr('source_name', '==', source_name) %}\n\n {%- if exclude | length > 0 -%}\n {%- set sources = sources | rejectattr('name', 'in', exclude) -%}\n {%- endif -%}\n\n {%- if include | length > 0 -%}\n {%- set sources = sources | selectattr('name', 'in', include) -%}\n {%- endif -%}\n\n {%- for source in sources -%}\n\n -- ______________________ stg_{{ source_name }}__{{ source.name }}.sql ______________________\n\n {{ codegen.generate_base_model(source_name, source.name, leading_commas, case_sensitive_cols) }}\n\n {%- endfor -%}\n\n -- ______________________ END ______________________\n\n {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.codegen.generate_base_model" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.2601283, "supported_languages": null }, "macro.tpch.limit_data_in_dev": { "unique_id": "macro.tpch.limit_data_in_dev", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "macros/limit_data_in_dev.sql", "original_file_path": "macros/limit_data_in_dev.sql", "name": "limit_data_in_dev", "macro_sql": "{% macro limit_data_in_dev(filter_column_name, lookback_days=7) %}\n\n{% if target.name == 'dev' %}\n\n\nwhere {{ filter_column_name }} >= dateadd('day', -{{ lookback_days }}, current_timestamp)\n{% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "A macro to show conditional logic to limit data when working in dev.", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://macros/macro.yml", "arguments": [ { "name": "filter_column_name", "type": "DATE", "description": "The name of the column you want to convert" }, { "name": "lookback_days", "type": "NUMBER", "description": "Number of lookback days. Defaults to 7." } ], "created_at": 1680812392.0777464, "supported_languages": null }, "macro.tpch.generate_models_yaml": { "unique_id": "macro.tpch.generate_models_yaml", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "macros/generate_models_yaml.sql", "original_file_path": "macros/generate_models_yaml.sql", "name": "generate_models_yaml", "macro_sql": "{% macro generate_models_yaml(model_names) %}\n\n{% set model_yaml=[] %}\n\n{% do model_yaml.append('version: 2') %}\n{% do model_yaml.append('') %}\n{% do model_yaml.append('models:') %}\n\n{% for model_name in model_names %}\n\n {% do model_yaml.append(' - name: ' ~ model_name | lower) %}\n {% do model_yaml.append(' description: \"\"') %}\n {% do model_yaml.append(' columns:') %}\n\n {% set relation=ref(model_name) %}\n {%- set columns = adapter.get_columns_in_relation(relation) -%}\n\n {% for column in columns %}\n {% do model_yaml.append(' - name: ' ~ column.name | lower ) %}\n {% do model_yaml.append(' description: \"\"') %}\n {% endfor %}\n\n {% do model_yaml.append('') %}\n\n{% endfor %}\n\n{% if execute %}\n\n {% set joined = model_yaml | join ('\\n') %}\n {{ log(joined, info=True) }}\n {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.26434, "supported_languages": null }, "macro.tpch.create_udfs": { "unique_id": "macro.tpch.create_udfs", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "macros/create_udfs.sql", "original_file_path": "macros/create_udfs.sql", "name": "create_udfs", "macro_sql": "{% macro create_udfs() %}\n\n{% do run_query(create_area_of_circle()) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.run_query", "macro.tpch.create_area_of_circle" ] }, "description": "An example of how to create UDFs via macros", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://macros/macro.yml", "arguments": [], "created_at": 1680812392.0802202, "supported_languages": null }, "macro.tpch.test_all_values_gte_zero": { "unique_id": "macro.tpch.test_all_values_gte_zero", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "macros/test_all_values_gte_zero.sql", "original_file_path": "macros/test_all_values_gte_zero.sql", "name": "test_all_values_gte_zero", "macro_sql": "{% macro test_all_values_gte_zero(table, column) %}\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref(table) }} where {{ column }} < 0\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "Macro to ensure values are greater than zero -- perfect for data tests", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://macros/macro.yml", "arguments": [ { "name": "table", "type": "STRING", "description": "name of the table being tested" }, { "name": "column", "type": "STRING", "description": "name of the column being tested" } ], "created_at": 1680812392.0867913, "supported_languages": null }, "macro.tpch.drop_old_nodes": { "unique_id": "macro.tpch.drop_old_nodes", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "macros/drop_old_nodes.sql", "original_file_path": "macros/drop_old_nodes.sql", "name": "drop_old_nodes", "macro_sql": "{% macro drop_old_nodes(dryrun=True) %}\n\n {% set nodes = graph.nodes.values() | list %}\n\n {% set dbs = nodes | map(attribute='database') | unique %}\n\n {% set all_tables_to_drop = [] %}\n\n {% set drop_table_sql %}\n\n {% for db in dbs %}\n\n -- Database: {{ db }}\n\n {% set schemas = nodes | selectattr('database', '==', db) | map(attribute='schema') | unique %}\n\n {% for schema in schemas %}\n\n -- Schema: {{ schema }}\n\n {% set model_names = nodes | selectattr('database', '==', db) | selectattr('schema', '==', schema) | map(attribute='name') | map('upper') | join(\"', '\") %}\n\n {% set find_tables_sql %}\n USE DATABASE {{ db }};\n SELECT DISTINCT TABLE_NAME, TABLE_TYPE\n FROM INFORMATION_SCHEMA.TABLES\n WHERE TABLE_SCHEMA = '{{ schema | upper }}'\n AND TABLE_TYPE IN ('VIEW', 'BASE TABLE')\n AND TABLE_NAME NOT IN ('{{ model_names }}');\n {% endset %}\n {% set tables_to_drop = run_query(find_tables_sql) %}\n\n {% for row in tables_to_drop %}\n DROP {% if row[1] == 'BASE TABLE' %}TABLE{% else %}VIEW{% endif %} {{ db | upper }}.{{ schema | upper }}.{{ row[0] }};\n {% do all_tables_to_drop.append('{}.{}.{}'.format(db.upper(), schema.upper(), row[0].upper())) %}\n {% endfor %}\n\n\n {% endfor %}\n {% endfor %}\n\n {% endset %}\n\n {% if all_tables_to_drop %}\n {% if dryrun %}\n {% do log('*NOT* dropping {}'.format(all_tables_to_drop), info=True) %}\n {% else %}\n {% do log('Dropping: {} ...'.format(all_tables_to_drop), info=True) %}\n {% do run_query(drop_table_sql) %}\n {% do log('Done.', info=True) %}\n {% endif %}\n {% else %}\n {% do log('No tables to drop!', info=True) %}\n {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.2720177, "supported_languages": null }, "macro.tpch.create_area_of_circle": { "unique_id": "macro.tpch.create_area_of_circle", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "macros/udf_area_of_circle.sql", "original_file_path": "macros/udf_area_of_circle.sql", "name": "create_area_of_circle", "macro_sql": "{% macro create_area_of_circle() %}\n\nuse database {{target.database}};\n\ndrop function if exists {{target.schema}}.area_of_circle(float);\n\ncreate function {{target.schema}}.area_of_circle(radius float)\n returns float\n as\n $$\n pi() README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests radius README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests radius\n $$\n ;\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "Continuation of UDF example", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://macros/macro.yml", "arguments": [], "created_at": 1680812392.0840476, "supported_languages": null }, "macro.tpch.unit_test_mode": { "unique_id": "macro.tpch.unit_test_mode", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "macros/unit_test_mode.sql", "original_file_path": "macros/unit_test_mode.sql", "name": "unit_test_mode", "macro_sql": "{% macro unit_test_mode() %}\n \n {% if var is not defined %}\n {{ return(False) }}\n\n {% elif var('test') == 'true' %}\n {{ return(True) }}\n\n {% else %}\n {{ return(False) }}\n\n {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "An example of how to create a unit test", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://macros/macro.yml", "arguments": [], "created_at": 1680812392.083413, "supported_languages": null }, "macro.tpch._select_extremes": { "unique_id": "macro.tpch._select_extremes", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "macros/select_extremes.sql", "original_file_path": "macros/select_extremes.sql", "name": "_select_extremes", "macro_sql": "{% macro _select_extremes(fn, table_name, key_columns, timestamp_column='loaded_at') %}\nselect a.* from {{ table_name }} as a\ninner join (\n select {{ ','.join(key_columns) }}, {{ fn }}({{ timestamp_column }}) as last_update\n from {{ table_name }}\n group by {{ ','.join(key_columns) }}\n) as b on (\n {% for key_column in key_columns %}\n a.{{ key_column }} = b.{{ key_column }}\n and\n {% endfor %}\n a.{{ timestamp_column }} = b.last_update\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.2758353, "supported_languages": null }, "macro.tpch.select_latest": { "unique_id": "macro.tpch.select_latest", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "macros/select_extremes.sql", "original_file_path": "macros/select_extremes.sql", "name": "select_latest", "macro_sql": "{% macro select_latest(table_name, key_columns, timestamp_column='loaded_at') %}\n{{ _select_extremes('max', table_name, key_columns, timestamp_column) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.tpch._select_extremes" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.276266, "supported_languages": null }, "macro.tpch.select_earliest": { "unique_id": "macro.tpch.select_earliest", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "macros/select_extremes.sql", "original_file_path": "macros/select_extremes.sql", "name": "select_earliest", "macro_sql": "{% macro select_earliest(table_name, key_columns, timestamp_column='loaded_at') %}\n{{ _select_extremes('min', table_name, key_columns, timestamp_column) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.tpch._select_extremes" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.2766712, "supported_languages": null }, "macro.tpch.grant_all_on_schemas": { "unique_id": "macro.tpch.grant_all_on_schemas", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "macros/grant_all_on_schemas.sql", "original_file_path": "macros/grant_all_on_schemas.sql", "name": "grant_all_on_schemas", "macro_sql": "{% macro grant_all_on_schemas(schemas, role) %}\n {% for schema in schemas %}\n grant usage on schema {{ schema }} to role {{ role }};\n grant select on all tables in schema {{ schema }} to role {{ role }};\n grant select on all views in schema {{ schema }} to role {{ role }};\n grant select on future tables in schema {{ schema }} to role {{ role }};\n grant select on future views in schema {{ schema }} to role {{ role }};\n {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "An example of how to grant permissions on schema", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://macros/macro.yml", "arguments": [ { "name": "schemas", "type": "STRING", "description": "name of the schema you would like to give the role access to" }, { "name": "role", "type": "STRING", "description": "user/role within your warehouse you would like to give dbt access to" } ], "created_at": 1680812392.0827763, "supported_languages": null }, "macro.tpch.block_on_tests": { "unique_id": "macro.tpch.block_on_tests", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "macros/block_on_tests.sql", "original_file_path": "macros/block_on_tests.sql", "name": "block_on_tests", "macro_sql": "{% macro block_on_tests(list_of_test_macros) %}\n\n {% if execute %}\n {% for test in list_of_test_macros %}\n {% set results = run_query(test) %}\n {% if results[0][0] == 0 %}\n -- TEST {{loop.index}}: PASS\n {% else %}\n {% set msg %} TEST {{loop.index}}: FAIL {% endset %}\n {% do exceptions.raise_compiler_error(msg) %}\n {% endif %}\n {% endfor %}\n {% endif %}\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.2797015, "supported_languages": null }, "macro.tpch.standard_account_fields": { "unique_id": "macro.tpch.standard_account_fields", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "macros/standard_account_fields.sql", "original_file_path": "macros/standard_account_fields.sql", "name": "standard_account_fields", "macro_sql": "{% macro standard_account_fields() %}\n\n{# How to use\n\nselect {{ standard_account_fields() }}\nfrom {{ ref('fct_orders') }}\n\n#}\n\n{%- set return_fields = [\"gross_item_sales_amount\", \n \"item_discount_amount\",\n \"item_tax_amount\",\n \"net_item_sales_amount\"]\n -%}\n\n {%- for field in return_fields %}\n {{ field }}{% if not loop.last %},{% endif %}{% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "An example of using a macro to standardize the fiels within the analysis", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://macros/macro.yml", "arguments": [ { "name": "return_fields", "type": "STRING", "description": "fields you would like returned for analysis" } ], "created_at": 1680812392.0884352, "supported_languages": null }, "macro.tpch.share_view": { "unique_id": "macro.tpch.share_view", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "macros/snowflake/share_view.sql", "original_file_path": "macros/snowflake/share_view.sql", "name": "share_view", "macro_sql": "{% macro share_view() %}\n\n{#\n\nUsage:\n\nThis would be used as a post-hook in the config block at the top of a model\n\nExample:\n\n{{ config(post_hook='{{ share_view() }}') }}\n\n#}\n\n -- Only run in production\n {% if target.name == 'prod' %}\n\n {% set sql %}\n -- Create a table with all data to be shared\n create or replace table share_db.private.{{ this.name }} as\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ this }};\n \n grant select on share_db.private.{{ this.name }} to role transformer;\n\n -- Create a secure view which selects based on current account\n create or replace secure view share_db.public.{{ this.name }} as\n select a.*\n from share_db.private.{{ this.name }} as a\n inner join share_db.private.company_shares as b on (\n a.customer_id = b.customer_id\n and b.snowflake_account = current_account()\n );\n \n grant select on share_db.public.{{ this.name }} to share customer_share;\n {% endset %}\n\n {% set table = run_query(sql) %}\n\n {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.2825322, "supported_languages": null }, "macro.tpch.dont_do_this": { "unique_id": "macro.tpch.dont_do_this", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "macros/snowflake/dont_do_this.sql", "original_file_path": "macros/snowflake/dont_do_this.sql", "name": "dont_do_this", "macro_sql": "{% macro dont_do_this() %}\n\n{% set sql %}\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ ref('dim_customers') }}\nlimit 10\n\n{% endset %}\n\n{% set results = run_query(sql).rows %}\n\n{% for result in results %}\n\n {{ log(result, info=True) }}\n\n{% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.283736, "supported_languages": null }, "macro.dbt_snowflake.snowflake__get_catalog": { "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n {% set query %}\n with tables as (\n\n select\n table_catalog as \"table_database\",\n table_schema as \"table_schema\",\n table_name as \"table_name\",\n table_type as \"table_type\",\n comment as \"table_comment\",\n\n -- note: this is the _role_ that owns the table\n table_owner as \"table_owner\",\n\n 'Clustering Key' as \"stats:clustering_key:label\",\n clustering_key as \"stats:clustering_key:value\",\n 'The key used to cluster this table' as \"stats:clustering_key:description\",\n (clustering_key is not null) as \"stats:clustering_key:include\",\n\n 'Row Count' as \"stats:row_count:label\",\n row_count as \"stats:row_count:value\",\n 'An approximate count of rows in this table' as \"stats:row_count:description\",\n (row_count is not null) as \"stats:row_count:include\",\n\n 'Approximate Size' as \"stats:bytes:label\",\n bytes as \"stats:bytes:value\",\n 'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n (bytes is not null) as \"stats:bytes:include\",\n\n 'Last Modified' as \"stats:last_modified:label\",\n to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n 'The timestamp for last update/change' as \"stats:last_modified:description\",\n (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n from {{ information_schema }}.tables\n\n ),\n\n columns as (\n\n select\n table_catalog as \"table_database\",\n table_schema as \"table_schema\",\n table_name as \"table_name\",\n\n column_name as \"column_name\",\n ordinal_position as \"column_index\",\n data_type as \"column_type\",\n comment as \"column_comment\"\n\n from {{ information_schema }}.columns\n )\n\n select *\n from tables\n join columns using (\"table_database\", \"table_schema\", \"table_name\")\n where (\n {%- for schema in schemas -%}\n upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n {%- endfor -%}\n )\n order by \"column_index\"\n {%- endset -%}\n\n {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.2855504, "supported_languages": null }, "macro.dbt_snowflake.snowflake__create_table_as": { "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n {%- if language == 'sql' -%}\n {%- set transient = config.get('transient', default=true) -%}\n {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n {%- set cluster_by_keys = [cluster_by_keys] -%}\n {%- endif -%}\n {%- if cluster_by_keys is not none -%}\n {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n {% else %}\n {%- set cluster_by_string = none -%}\n {%- endif -%}\n {%- set sql_header = config.get('sql_header', none) -%}\n\n {{ sql_header if sql_header is not none }}\n\n create or replace {% if temporary -%}\n temporary\n {%- elif transient -%}\n transient\n {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n (\n {%- if cluster_by_string is not none -%}\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from(\n {{ compiled_code }}\n ) order by ({{ cluster_by_string }})\n {%- else -%}\n {{ compiled_code }}\n {%- endif %}\n );\n {% if cluster_by_string is not none and not temporary -%}\n alter table {{relation}} cluster by ({{cluster_by_string}});\n {%- endif -%}\n {% if enable_automatic_clustering and cluster_by_string is not none and not temporary -%}\n alter table {{relation}} resume recluster;\n {%- endif -%}\n\n {%- elif language == 'python' -%}\n {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n {%- else -%}\n {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.py_write_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3071196, "supported_languages": null }, "macro.dbt_snowflake.get_column_comment_sql": { "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n {% if (column_name|upper in column_dict) -%}\n {% set matched_column = column_name|upper -%}\n {% elif (column_name|lower in column_dict) -%}\n {% set matched_column = column_name|lower -%}\n {% elif (column_name in column_dict) -%}\n {% set matched_column = column_name -%}\n {% else -%}\n {% set matched_column = None -%}\n {% endif -%}\n {% if matched_column -%}\n {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n {%- else -%}\n {{ adapter.quote(column_name) }} COMMENT $$$$\n {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3085735, "supported_languages": null }, "macro.dbt_snowflake.get_persist_docs_column_list": { "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n {% for column_name in query_columns %}\n {{ get_column_comment_sql(column_name, model_columns) }}\n {{- \", \" if not loop.last else \"\" }}\n {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.get_column_comment_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3091447, "supported_languages": null }, "macro.dbt_snowflake.snowflake__create_view_as": { "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n {%- set secure = config.get('secure', default=false) -%}\n {%- set copy_grants = config.get('copy_grants', default=false) -%}\n {%- set sql_header = config.get('sql_header', none) -%}\n\n {{ sql_header if sql_header is not none }}\n create or replace {% if secure -%}\n secure\n {%- endif %} view {{ relation }}\n {% if config.persist_column_docs() -%}\n {% set model_columns = model.columns %}\n {% set query_columns = get_columns_in_query(sql) %}\n {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n {%- endif %}\n {% if copy_grants -%} copy grants {%- endif %} as (\n {{ sql }}\n );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3107102, "supported_languages": null }, "macro.dbt_snowflake.snowflake__get_columns_in_relation": { "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n {%- set sql -%}\n describe table {{ relation }}\n {%- endset -%}\n {%- set result = run_query(sql) -%}\n\n {% set maximum = 10000 %}\n {% if (result | length) >= maximum %}\n {% set msg %}\n Too many columns in relation {{ relation }}! dbt can only get\n information about relations with fewer than {{ maximum }} columns.\n {% endset %}\n {% do exceptions.raise_compiler_error(msg) %}\n {% endif %}\n\n {% set columns = [] %}\n {% for row in result %}\n {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n {% endfor %}\n {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3123486, "supported_languages": null }, "macro.dbt_snowflake.snowflake__list_schemas": { "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n {% set maximum = 10000 %}\n {% set sql -%}\n show terse schemas in database {{ database }}\n limit {{ maximum }}\n {%- endset %}\n {% set result = run_query(sql) %}\n {% if (result | length) >= maximum %}\n {% set msg %}\n Too many schemas in database {{ database }}! dbt can only get\n information about databases with fewer than {{ maximum }} schemas.\n {% endset %}\n {% do exceptions.raise_compiler_error(msg) %}\n {% endif %}\n {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.313505, "supported_languages": null }, "macro.dbt_snowflake.snowflake__list_relations_without_caching": { "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n {%- set sql -%}\n show terse objects in {{ schema_relation }}\n {%- endset -%}\n\n {%- set result = run_query(sql) -%}\n {% set maximum = 10000 %}\n {% if (result | length) >= maximum %}\n {% set msg %}\n Too many schemas in schema {{ schema_relation }}! dbt can only get\n information about schemas with fewer than {{ maximum }} objects.\n {% endset %}\n {% do exceptions.raise_compiler_error(msg) %}\n {% endif %}\n {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3145995, "supported_languages": null }, "macro.dbt_snowflake.snowflake__check_schema_exists": { "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n {% call statement('check_schema_exists', fetch_result=True) -%}\n select count(*)\n from {{ information_schema }}.schemata\n where upper(schema_name) = upper('{{ schema }}')\n and upper(catalog_name) = upper('{{ information_schema.database }}')\n {%- endcall %}\n {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3153274, "supported_languages": null }, "macro.dbt_snowflake.snowflake__rename_relation": { "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n {% call statement('rename_relation') -%}\n alter table {{ from_relation }} rename to {{ to_relation }}\n {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3157768, "supported_languages": null }, "macro.dbt_snowflake.snowflake__alter_column_type": { "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n {% call statement('alter_column_type') %}\n alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3163102, "supported_languages": null }, "macro.dbt_snowflake.snowflake__alter_relation_comment": { "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.31674, "supported_languages": null }, "macro.dbt_snowflake.snowflake__alter_column_comment": { "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n alter {{ relation.type }} {{ relation }} alter\n {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.get_column_comment_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3178024, "supported_languages": null }, "macro.dbt_snowflake.get_current_query_tag": { "unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.318201, "supported_languages": null }, "macro.dbt_snowflake.set_query_tag": { "unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__set_query_tag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.318603, "supported_languages": null }, "macro.dbt_snowflake.snowflake__set_query_tag": { "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n {% set new_query_tag = config.get('query_tag') %}\n {% if new_query_tag %}\n {% set original_query_tag = get_current_query_tag() %}\n {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n {{ return(original_query_tag)}}\n {% endif %}\n {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3196385, "supported_languages": null }, "macro.dbt_snowflake.unset_query_tag": { "unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__unset_query_tag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3200545, "supported_languages": null }, "macro.dbt_snowflake.snowflake__unset_query_tag": { "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n {% set new_query_tag = config.get('query_tag') %}\n {% if new_query_tag %}\n {% if original_query_tag %}\n {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n {% else %}\n {{ log(\"No original query_tag, unsetting parameter.\") }}\n {% do run_query(\"alter session unset query_tag\") %}\n {% endif %}\n {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3210697, "supported_languages": null }, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": { "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n {% if add_columns %}\n\n {% set sql -%}\n alter {{ relation.type }} {{ relation }} add column\n {% for column in add_columns %}\n {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n {% endfor %}\n {%- endset -%}\n\n {% do run_query(sql) %}\n\n {% endif %}\n\n {% if remove_columns %}\n\n {% set sql -%}\n alter {{ relation.type }} {{ relation }} drop column\n {% for column in remove_columns %}\n {{ column.name }}{{ ',' if not loop.last }}\n {% endfor %}\n {%- endset -%}\n\n {% do run_query(sql) %}\n\n {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3226917, "supported_languages": null }, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": { "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n {#\n Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n statements before passing them into run_query(), or calling in the 'main' statement\n of a materialization\n #}\n {% set dml_transaction -%}\n begin;\n {{ dml }};\n commit;\n {%- endset %}\n\n {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3231852, "supported_languages": null }, "macro.dbt_snowflake.snowflake__truncate_relation": { "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n {% set truncate_dml %}\n truncate table {{ relation }}\n {% endset %}\n {% call statement('truncate_relation') -%}\n {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3237321, "supported_languages": null }, "macro.dbt_snowflake.snowflake__copy_grants": { "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "name": "snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n {% set copy_grants = config.get('copy_grants', False) %}\n {{ return(copy_grants) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3246996, "supported_languages": null }, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": { "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "name": "snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n {{ return(False) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3249543, "supported_languages": null }, "macro.dbt_snowflake.snowflake__current_timestamp": { "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3257716, "supported_languages": null }, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": { "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3261635, "supported_languages": null }, "macro.dbt_snowflake.snowflake__snapshot_get_time": { "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.current_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3264012, "supported_languages": null }, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": { "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.type_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.326682, "supported_languages": null }, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": { "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt.type_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3269937, "supported_languages": null }, "macro.dbt_snowflake.snowflake__bool_or": { "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n boolor_agg({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3275635, "supported_languages": null }, "macro.dbt_snowflake.snowflake__safe_cast": { "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3281686, "supported_languages": null }, "macro.dbt_snowflake.snowflake__array_construct": { "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3289607, "supported_languages": null }, "macro.dbt_snowflake.snowflake__escape_single_quotes": { "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3295865, "supported_languages": null }, "macro.dbt_snowflake.snowflake__right": { "unique_id": "macro.dbt_snowflake.snowflake__right", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n case when {{ length_expression }} = 0\n then ''\n else\n right(\n {{ string_text }},\n {{ length_expression }}\n )\n end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.330266, "supported_languages": null }, "macro.dbt_snowflake.materialization_view_snowflake": { "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n {% set original_query_tag = set_query_tag() %}\n {% set to_return = create_or_replace_view() %}\n\n {% set target_relation = this.incorporate(type='view') %}\n\n {% do persist_docs(target_relation, model, for_columns=false) %}\n\n {% do return(to_return) %}\n\n {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3316574, "supported_languages": [ "sql" ] }, "macro.dbt_snowflake.materialization_snapshot_snowflake": { "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n {% set original_query_tag = set_query_tag() %}\n {% set relations = materialization_snapshot_default() %}\n\n {% do unset_query_tag(original_query_tag) %}\n\n {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3326423, "supported_languages": [ "sql" ] }, "macro.dbt_snowflake.snowflake__get_merge_sql": { "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n {#\n Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n When no unique_key is provided, this macro will do a regular insert. If a unique_key\n is provided, then this macro will do a proper merge instead.\n #}\n\n {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n {%- set sql_header = config.get('sql_header', none) -%}\n\n {%- set dml -%}\n {%- if unique_key is none -%}\n\n {{ sql_header if sql_header is not none }}\n\n insert into {{ target }} ({{ dest_cols_csv }})\n (\n select {{ dest_cols_csv }}\n from {{ source_sql }}\n )\n\n {%- else -%}\n\n {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n {%- endif -%}\n {%- endset -%}\n\n {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3351216, "supported_languages": null }, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": { "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3357418, "supported_languages": null }, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": { "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3362987, "supported_languages": null }, "macro.dbt_snowflake.snowflake__load_csv_rows": { "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n {% set batch_size = get_batch_size() %}\n {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n {% set bindings = [] %}\n\n {% set statements = [] %}\n\n {% for chunk in agate_table.rows | batch(batch_size) %}\n {% set bindings = [] %}\n\n {% for row in chunk %}\n {% do bindings.extend(row) %}\n {% endfor %}\n\n {% set sql %}\n insert into {{ this.render() }} ({{ cols_sql }}) values\n {% for row in chunk -%}\n ({%- for column in agate_table.column_names -%}\n %s\n {%- if not loop.last%},{%- endif %}\n {%- endfor -%})\n {%- if not loop.last%},{%- endif %}\n {%- endfor %}\n {% endset %}\n\n {% do adapter.add_query('BEGIN', auto_begin=False) %}\n {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n {% if loop.index0 == 0 %}\n {% do statements.append(sql) %}\n {% endif %}\n {% endfor %}\n\n {# Return SQL so we can render it out into the compiled files #}\n {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3405082, "supported_languages": null }, "macro.dbt_snowflake.materialization_seed_snowflake": { "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n {% set original_query_tag = set_query_tag() %}\n\n {% set relations = materialization_seed_default() %}\n\n {% do unset_query_tag(original_query_tag) %}\n\n {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3411694, "supported_languages": [ "sql" ] }, "macro.dbt_snowflake.materialization_test_snowflake": { "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n {% set original_query_tag = set_query_tag() %}\n {% set relations = materialization_test_default() %}\n {% do unset_query_tag(original_query_tag) %}\n {{ return(relations) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3421328, "supported_languages": [ "sql" ] }, "macro.dbt_snowflake.materialization_table_snowflake": { "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n {% set original_query_tag = set_query_tag() %}\n\n {%- set identifier = models -%}\n {%- set language = model['language'] -%}\n\n {% set grant_config = config.get('grants') %}\n\n {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n {%- set target_relation = api.Relation.create(identifier=identifier,\n schema=schema,\n database=database, type='table') -%}\n\n {{ run_hooks(pre_hooks) }}\n\n {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n -- downtime, but it should be a relatively infrequent occurrence #}\n {% if old_relation is not none and not old_relation.is_table %}\n {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n {{ drop_relation_if_exists(old_relation) }}\n {% endif %}\n\n {% call statement('main', language=language) -%}\n {{ create_table_as(False, target_relation, compiled_code, language) }}\n {%- endcall %}\n\n {{ run_hooks(post_hooks) }}\n\n {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n {% do persist_docs(target_relation, model) %}\n\n {% do unset_query_tag(original_query_tag) %}\n\n {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3467994, "supported_languages": [ "sql", "python" ] }, "macro.dbt_snowflake.py_write_table": { "unique_id": "macro.dbt_snowflake.py_write_table", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n # make sure pandas exists\n import importlib.util\n package_name = 'pandas'\n if importlib.util.find_spec(package_name):\n import pandas\n if isinstance(df, pandas.core.frame.DataFrame):\n # session.write_pandas does not have overwrite function\n df = session.createDataFrame(df)\n df.write.mode(\"overwrite\").save_as_table(\"{{ target_relation }}\", create_temp_table={{temporary}})\n\ndef main(session):\n dbt = dbtObj(session.table)\n df = model(dbt, session)\n materialize(session, df, dbt.this)\n return \"OK\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3473036, "supported_languages": null }, "macro.dbt_snowflake.py_script_comment": { "unique_id": "macro.dbt_snowflake.py_script_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n# return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.347529, "supported_languages": null }, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": { "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n\n /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var {#\n If we are running multiple statements (DELETE + INSERT),\n we must first save the model query results as a temporary table\n in order to guarantee consistent inputs to both statements.\n\n If we are running a single statement (MERGE or INSERT alone),\n we can save the model query definition as a view instead,\n for faster overall incremental processing.\n #} */\n\n {% if language == 'sql' and (strategy in ('default', 'append', 'merge') or (unique_key is none)) %}\n {{ return('view') }}\n {% else %} {#-- play it safe -- #}\n {{ return('table') }}\n {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3502443, "supported_languages": null }, "macro.dbt_snowflake.materialization_incremental_snowflake": { "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n {% set original_query_tag = set_query_tag() %}\n\n {#-- Set vars --#}\n {%- set full_refresh_mode = (should_full_refresh()) -%}\n {%- set language = model['language'] -%}\n {% set target_relation = this %}\n {% set existing_relation = load_relation(this) %}\n\n {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n {%- set unique_key = config.get('unique_key') -%}\n {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n {% set grant_config = config.get('grants') %}\n\n {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n {{ run_hooks(pre_hooks) }}\n\n {% if existing_relation is none %}\n {%- call statement('main', language=language) -%}\n {{ create_table_as(False, target_relation, compiled_code, language) }}\n {%- endcall -%}\n\n {% elif existing_relation.is_view %}\n {#-- Can't overwrite a view with a table - we must drop --#}\n {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n {% do adapter.drop_relation(existing_relation) %}\n {%- call statement('main', language=language) -%}\n {{ create_table_as(False, target_relation, compiled_code, language) }}\n {%- endcall -%}\n {% elif full_refresh_mode %}\n {%- call statement('main', language=language) -%}\n {{ create_table_as(False, target_relation, compiled_code, language) }}\n {%- endcall -%}\n\n {% else %}\n {#-- Create the temp relation, either as a view or as a temp table --#}\n {% if tmp_relation_type == 'view' %}\n {%- call statement('create_tmp_relation') -%}\n {{ create_view_as(tmp_relation, compiled_code) }}\n {%- endcall -%}\n {% else %}\n {%- call statement('create_tmp_relation', language=language) -%}\n {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n {%- endcall -%}\n {% endif %}\n\n {% do adapter.expand_target_column_types(\n from_relation=tmp_relation,\n to_relation=target_relation) %}\n {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n {% if not dest_columns %}\n {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n {% endif %}\n\n {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n {% set incremental_predicates = config.get('incremental_predicates', none) %}\n {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n\n {%- call statement('main') -%}\n {{ strategy_sql_macro_func(strategy_arg_dict) }}\n {%- endcall -%}\n {% endif %}\n\n {% do drop_relation_if_exists(tmp_relation) %}\n\n {{ run_hooks(post_hooks) }}\n\n {% set target_relation = target_relation.incorporate(type='table') %}\n\n {% set should_revoke =\n should_revoke(existing_relation.is_table, full_refresh_mode) %}\n {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n {% do persist_docs(target_relation, model) %}\n\n {% do unset_query_tag(original_query_tag) %}\n\n {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_view_as", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3570726, "supported_languages": [ "sql", "python" ] }, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": { "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.get_incremental_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3574483, "supported_languages": null }, "macro.dbt.string_literal": { "unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__string_literal" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3582282, "supported_languages": null }, "macro.dbt.default__string_literal": { "unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3584619, "supported_languages": null }, "macro.dbt.bool_or": { "unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__bool_or" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3592691, "supported_languages": null }, "macro.dbt.default__bool_or": { "unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.359513, "supported_languages": null }, "macro.dbt.array_concat": { "unique_id": "macro.dbt.array_concat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__array_concat" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.360315, "supported_languages": null }, "macro.dbt.default__array_concat": { "unique_id": "macro.dbt.default__array_concat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.36061, "supported_languages": null }, "macro.dbt.cast_bool_to_text": { "unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__cast_bool_to_text" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3613439, "supported_languages": null }, "macro.dbt.default__cast_bool_to_text": { "unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.361683, "supported_languages": null }, "macro.dbt.split_part": { "unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__split_part" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3628733, "supported_languages": null }, "macro.dbt.default__split_part": { "unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n split_part(\n {{ string_text }},\n {{ delimiter_text }},\n {{ part_number }}\n )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3632472, "supported_languages": null }, "macro.dbt._split_part_negative": { "unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n split_part(\n {{ string_text }},\n {{ delimiter_text }},\n length({{ string_text }})\n - length(\n replace({{ string_text }}, {{ delimiter_text }}, '')\n ) + 2 {{ part_number }}\n )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3637297, "supported_languages": null }, "macro.dbt.listagg": { "unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__listagg" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3650749, "supported_languages": null }, "macro.dbt.default__listagg": { "unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n {% if limit_num -%}\n array_to_string(\n array_slice(\n array_agg(\n {{ measure }}\n ){% if order_by_clause -%}\n within group ({{ order_by_clause }})\n {%- endif %}\n ,0\n ,{{ limit_num }}\n ),\n {{ delimiter_text }}\n )\n {%- else %}\n listagg(\n {{ measure }},\n {{ delimiter_text }}\n )\n {% if order_by_clause -%}\n within group ({{ order_by_clause }})\n {%- endif %}\n {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3659291, "supported_languages": null }, "macro.dbt.type_string": { "unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__type_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3679538, "supported_languages": null }, "macro.dbt.default__type_string": { "unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3682857, "supported_languages": null }, "macro.dbt.type_timestamp": { "unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__type_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3686333, "supported_languages": null }, "macro.dbt.default__type_timestamp": { "unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3689587, "supported_languages": null }, "macro.dbt.type_float": { "unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__type_float" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.369302, "supported_languages": null }, "macro.dbt.default__type_float": { "unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3696265, "supported_languages": null }, "macro.dbt.type_numeric": { "unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__type_numeric" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3699753, "supported_languages": null }, "macro.dbt.default__type_numeric": { "unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3705134, "supported_languages": null }, "macro.dbt.type_bigint": { "unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__type_bigint" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.370919, "supported_languages": null }, "macro.dbt.default__type_bigint": { "unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.371255, "supported_languages": null }, "macro.dbt.type_int": { "unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__type_int" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3716073, "supported_languages": null }, "macro.dbt.default__type_int": { "unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3719318, "supported_languages": null }, "macro.dbt.type_boolean": { "unique_id": "macro.dbt.type_boolean", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__type_boolean" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3722744, "supported_languages": null }, "macro.dbt.default__type_boolean": { "unique_id": "macro.dbt.default__type_boolean", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3725817, "supported_languages": null }, "macro.dbt.concat": { "unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__concat" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3733323, "supported_languages": null }, "macro.dbt.default__concat": { "unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3736076, "supported_languages": null }, "macro.dbt.hash": { "unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__hash" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3743577, "supported_languages": null }, "macro.dbt.default__hash": { "unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3747575, "supported_languages": null }, "macro.dbt.length": { "unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__length" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3755317, "supported_languages": null }, "macro.dbt.default__length": { "unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n length(\n {{ expression }}\n )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3757915, "supported_languages": null }, "macro.dbt.array_append": { "unique_id": "macro.dbt.array_append", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__array_append" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.376588, "supported_languages": null }, "macro.dbt.default__array_append": { "unique_id": "macro.dbt.default__array_append", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3768861, "supported_languages": null }, "macro.dbt.date_trunc": { "unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__date_trunc" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3776736, "supported_languages": null }, "macro.dbt.default__date_trunc": { "unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3779633, "supported_languages": null }, "macro.dbt.safe_cast": { "unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__safe_cast" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3788848, "supported_languages": null }, "macro.dbt.default__safe_cast": { "unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n {# most databases don't support this function yet\n so we just need to use cast #}\n cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3792427, "supported_languages": null }, "macro.dbt.array_construct": { "unique_id": "macro.dbt.array_construct", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__array_construct" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.380284, "supported_languages": null }, "macro.dbt.default__array_construct": { "unique_id": "macro.dbt.default__array_construct", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n {% if inputs|length > 0 %}\n array[ {{ inputs|join(' , ') }} ]\n {% else %}\n array[]::{{data_type}}[]\n {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.380818, "supported_languages": null }, "macro.dbt.escape_single_quotes": { "unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__escape_single_quotes" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3816133, "supported_languages": null }, "macro.dbt.default__escape_single_quotes": { "unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3819242, "supported_languages": null }, "macro.dbt.last_day": { "unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__last_day" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3828876, "supported_languages": null }, "macro.dbt.default_last_day": { "unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n cast(\n {{dbt.dateadd('day', '-1',\n dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n )}}\n as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.dateadd", "macro.dbt.date_trunc" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3836403, "supported_languages": null }, "macro.dbt.default__last_day": { "unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default_last_day" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3839831, "supported_languages": null }, "macro.dbt.datediff": { "unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__datediff" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.384875, "supported_languages": null }, "macro.dbt.default__datediff": { "unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n datediff(\n {{ datepart }},\n {{ first_date }},\n {{ second_date }}\n )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3852355, "supported_languages": null }, "macro.dbt.dateadd": { "unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__dateadd" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3861349, "supported_languages": null }, "macro.dbt.default__dateadd": { "unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n dateadd(\n {{ datepart }},\n {{ interval }},\n {{ from_date_or_timestamp }}\n )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.386521, "supported_languages": null }, "macro.dbt.right": { "unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__right" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.387391, "supported_languages": null }, "macro.dbt.default__right": { "unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n right(\n {{ string_text }},\n {{ length_expression }}\n )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.387704, "supported_languages": null }, "macro.dbt.replace": { "unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__replace" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3885992, "supported_languages": null }, "macro.dbt.default__replace": { "unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n replace(\n {{ field }},\n {{ old_chars }},\n {{ new_chars }}\n )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.388961, "supported_languages": null }, "macro.dbt.position": { "unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__position" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3897781, "supported_languages": null }, "macro.dbt.default__position": { "unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n position(\n {{ substring_text }} in {{ string_text }}\n )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.39008, "supported_languages": null }, "macro.dbt.except": { "unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__except" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3908334, "supported_languages": null }, "macro.dbt.default__except": { "unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3910227, "supported_languages": null }, "macro.dbt.intersect": { "unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__intersect" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.391766, "supported_languages": null }, "macro.dbt.default__intersect": { "unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.391953, "supported_languages": null }, "macro.dbt.any_value": { "unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__any_value" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3926992, "supported_languages": null }, "macro.dbt.default__any_value": { "unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.392938, "supported_languages": null }, "macro.dbt.statement": { "unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n {%- if execute: -%}\n {%- set compiled_code = caller() -%}\n\n {%- if name == 'main' -%}\n {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n {{ write(compiled_code) }}\n {%- endif -%}\n {%- if language == 'sql'-%}\n {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n {%- elif language == 'python' -%}\n {%- set res = submit_python_job(model, compiled_code) -%}\n {#-- TODO: What should table be for python models? --#}\n {%- set table = None -%}\n {%- else -%}\n {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n {%- endif -%}\n\n {%- if name is not none -%}\n {{ store_result(name, response=res, agate_table=table) }}\n {%- endif -%}\n\n {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3960607, "supported_languages": null }, "macro.dbt.noop_statement": { "unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n {%- set sql = caller() -%}\n\n {%- if name == 'main' -%}\n {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n {{ write(sql) }}\n {%- endif -%}\n\n {%- if name is not none -%}\n {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3974159, "supported_languages": null }, "macro.dbt.run_query": { "unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n {{ sql }}\n {% endcall %}\n\n {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.3980358, "supported_languages": null }, "macro.dbt.convert_datetime": { "unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n {% set error_msg -%}\n The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n {%- endset %}\n\n {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.401267, "supported_languages": null }, "macro.dbt.dates_in_range": { "unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n {% set day_count = (end_date - start_date).days %}\n {% if day_count < 0 %}\n {% set msg -%}\n Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n {%- endset %}\n\n {{ exceptions.raise_compiler_error(msg, model) }}\n {% endif %}\n\n {% set date_list = [] %}\n {% for i in range(0, day_count + 1) %}\n {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n {% if not out_fmt %}\n {% set _ = date_list.append(the_date) %}\n {% else %}\n {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n {% endif %}\n {% endfor %}\n\n {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.convert_datetime" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4038224, "supported_languages": null }, "macro.dbt.partition_range": { "unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n {% if (partition_range | length) == 1 %}\n {% set start_date = partition_range[0] %}\n {% set end_date = none %}\n {% elif (partition_range | length) == 2 %}\n {% set start_date = partition_range[0] %}\n {% set end_date = partition_range[1] %}\n {% else %}\n {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n {% endif %}\n\n {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.dates_in_range" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.405381, "supported_languages": null }, "macro.dbt.py_current_timestring": { "unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n {% set dt = modules.datetime.datetime.now() %}\n {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4058838, "supported_languages": null }, "macro.dbt.set_sql_header": { "unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4068975, "supported_languages": null }, "macro.dbt.should_full_refresh": { "unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n {% set config_full_refresh = config.get('full_refresh') %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4075696, "supported_languages": null }, "macro.dbt.should_store_failures": { "unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n {% set config_store_failures = config.get('store_failures') %}\n {% if config_store_failures is none %}\n {% set config_store_failures = flags.STORE_FAILURES %}\n {% endif %}\n {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4082284, "supported_languages": null }, "macro.dbt.run_hooks": { "unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction) %}\n {% if not inside_transaction and loop.first %}\n {% call statement(auto_begin=inside_transaction) %}\n commit;\n {% endcall %}\n {% endif %}\n {% set rendered = render(hook.get('sql')) | trim %}\n {% if (rendered | length) > 0 %}\n {% call statement(auto_begin=inside_transaction) %}\n {{ rendered }}\n {% endcall %}\n {% endif %}\n {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4105322, "supported_languages": null }, "macro.dbt.make_hook_config": { "unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4110034, "supported_languages": null }, "macro.dbt.before_begin": { "unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.make_hook_config" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4113328, "supported_languages": null }, "macro.dbt.in_transaction": { "unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.make_hook_config" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.411656, "supported_languages": null }, "macro.dbt.after_commit": { "unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.make_hook_config" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4119828, "supported_languages": null }, "macro.dbt.materialization_snapshot_default": { "unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n {%- set config = model['config'] -%}\n\n {%- set target_table = model.get('alias', model.get('name')) -%}\n\n {%- set strategy_name = config.get('strategy') -%}\n {%- set unique_key = config.get('unique_key') %}\n -- grab current tables grants config for comparision later on\n {%- set grant_config = config.get('grants') -%}\n\n {% set target_relation_exists, target_relation = get_or_create_relation(\n database=model.database,\n schema=model.schema,\n identifier=target_table,\n type='table') -%}\n\n {%- if not target_relation.is_table -%}\n {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n {%- endif -%}\n\n\n {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n {% set strategy_macro = strategy_dispatch(strategy_name) %}\n {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n {% if not target_relation_exists %}\n\n {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n {% else %}\n\n {{ adapter.valid_snapshot_target(target_relation) }}\n\n {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n -- this may no-op if the database does not require column expansion\n {% do adapter.expand_target_column_types(from_relation=staging_table,\n to_relation=target_relation) %}\n\n {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n | rejectattr('name', 'equalto', 'dbt_change_type')\n | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n | rejectattr('name', 'equalto', 'dbt_unique_key')\n | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n | list %}\n\n {% do create_columns(target_relation, missing_columns) %}\n\n {% set source_columns = adapter.get_columns_in_relation(staging_table)\n | rejectattr('name', 'equalto', 'dbt_change_type')\n | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n | rejectattr('name', 'equalto', 'dbt_unique_key')\n | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n | list %}\n\n {% set quoted_source_columns = [] %}\n {% for column in source_columns %}\n {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n {% endfor %}\n\n {% set final_sql = snapshot_merge_sql(\n target = target_relation,\n source = staging_table,\n insert_cols = quoted_source_columns\n )\n %}\n\n {% endif %}\n\n {% call statement('main') %}\n {{ final_sql }}\n {% endcall %}\n\n {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n {% do persist_docs(target_relation, model) %}\n\n {% if not target_relation_exists %}\n {% do create_indexes(target_relation) %}\n {% endif %}\n\n {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n {{ adapter.commit() }}\n\n {% if staging_table is defined %}\n {% do post_snapshot(staging_table) %}\n {% endif %}\n\n {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4232876, "supported_languages": [ "sql" ] }, "macro.dbt.create_columns": { "unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__create_columns" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4295356, "supported_languages": null }, "macro.dbt.default__create_columns": { "unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n {% for column in columns %}\n {% call statement() %}\n alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n {% endcall %}\n {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4301639, "supported_languages": null }, "macro.dbt.post_snapshot": { "unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__post_snapshot" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.430575, "supported_languages": null }, "macro.dbt.default__post_snapshot": { "unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4307983, "supported_languages": null }, "macro.dbt.get_true_sql": { "unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__get_true_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.431126, "supported_languages": null }, "macro.dbt.default__get_true_sql": { "unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4313903, "supported_languages": null }, "macro.dbt.snapshot_staging_table": { "unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__snapshot_staging_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4318383, "supported_languages": null }, "macro.dbt.default__snapshot_staging_table": { "unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n with snapshot_query as (\n\n {{ source_sql }}\n\n ),\n\n snapshotted_data as (\n\n select *,\n {{ strategy.unique_key }} as dbt_unique_key\n\n from {{ target_relation }}\n where dbt_valid_to is null\n\n ),\n\n insertions_source_data as (\n\n select\n *,\n {{ strategy.unique_key }} as dbt_unique_key,\n {{ strategy.updated_at }} as dbt_updated_at,\n {{ strategy.updated_at }} as dbt_valid_from,\n nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n {{ strategy.scd_id }} as dbt_scd_id\n\n from snapshot_query\n ),\n\n updates_source_data as (\n\n select\n *,\n {{ strategy.unique_key }} as dbt_unique_key,\n {{ strategy.updated_at }} as dbt_updated_at,\n {{ strategy.updated_at }} as dbt_valid_from,\n {{ strategy.updated_at }} as dbt_valid_to\n\n from snapshot_query\n ),\n\n {%- if strategy.invalidate_hard_deletes %}\n\n deletes_source_data as (\n\n select\n *,\n {{ strategy.unique_key }} as dbt_unique_key\n from snapshot_query\n ),\n {% endif %}\n\n insertions as (\n\n select\n 'insert' as dbt_change_type,\n source_data.*\n\n from insertions_source_data as source_data\n left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n where snapshotted_data.dbt_unique_key is null\n or (\n snapshotted_data.dbt_unique_key is not null\n and (\n {{ strategy.row_changed }}\n )\n )\n\n ),\n\n updates as (\n\n select\n 'update' as dbt_change_type,\n source_data.*,\n snapshotted_data.dbt_scd_id\n\n from updates_source_data as source_data\n join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n where (\n {{ strategy.row_changed }}\n )\n )\n\n {%- if strategy.invalidate_hard_deletes -%}\n ,\n\n deletes as (\n\n select\n 'delete' as dbt_change_type,\n source_data.*,\n {{ snapshot_get_time() }} as dbt_valid_from,\n {{ snapshot_get_time() }} as dbt_updated_at,\n {{ snapshot_get_time() }} as dbt_valid_to,\n snapshotted_data.dbt_scd_id\n\n from snapshotted_data\n left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n where source_data.dbt_unique_key is null\n )\n {%- endif %}\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from insertions\n union all\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from updates\n {%- if strategy.invalidate_hard_deletes %}\n union all\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from deletes\n {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.snapshot_get_time" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.433604, "supported_languages": null }, "macro.dbt.build_snapshot_table": { "unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__build_snapshot_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4340124, "supported_languages": null }, "macro.dbt.default__build_snapshot_table": { "unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n select *,\n {{ strategy.scd_id }} as dbt_scd_id,\n {{ strategy.updated_at }} as dbt_updated_at,\n {{ strategy.updated_at }} as dbt_valid_from,\n nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n from (\n {{ sql }}\n ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4345686, "supported_languages": null }, "macro.dbt.build_snapshot_staging_table": { "unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n {% set temp_relation = make_temp_relation(target_relation) %}\n\n {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n {% call statement('build_snapshot_staging_relation') %}\n {{ create_table_as(True, temp_relation, select) }}\n {% endcall %}\n\n {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.435507, "supported_languages": null }, "macro.dbt.strategy_dispatch": { "unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n {% if '.' in name %}\n {% set package_name, name = name.split(\".\", 1) %}\n {% else %}\n {% set package_name = none %}\n {% endif %}\n\n {% if package_name is none %}\n {% set package_context = context %}\n {% elif package_name in context %}\n {% set package_context = context[package_name] %}\n {% else %}\n {% set error_msg %}\n Could not find package '{{package_name}}', called with '{{original_name}}'\n {% endset %}\n {{ exceptions.raise_compiler_error(error_msg | trim) }}\n {% endif %}\n\n {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n {% if search_name not in package_context %}\n {% set error_msg %}\n The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n {% endset %}\n {{ exceptions.raise_compiler_error(error_msg | trim) }}\n {% endif %}\n {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4417815, "supported_languages": null }, "macro.dbt.snapshot_hash_arguments": { "unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__snapshot_hash_arguments" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.442177, "supported_languages": null }, "macro.dbt.default__snapshot_hash_arguments": { "unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n md5({%- for arg in args -%}\n coalesce(cast({{ arg }} as varchar ), '')\n {% if not loop.last %} || '|' || {% endif %}\n {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4427218, "supported_languages": null }, "macro.dbt.snapshot_timestamp_strategy": { "unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n {% set primary_key = config['unique_key'] %}\n {% set updated_at = config['updated_at'] %}\n {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n {#/*\n The snapshot relation might not have an {{ updated_at }} value if the\n snapshot strategy is changed from `check` to `timestamp`. We\n should use a dbt-created column for the comparison in the snapshot\n table instead of assuming that the user-supplied {{ updated_at }}\n will be present in the historical data.\n\n See https://github.com/dbt-labs/dbt-core/issues/2350\n analyses/ assets/ macros/ models/ prod/ scripts/ seeds/ snapshots/ tests/ #}\n {% set row_changed_expr -%}\n ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n {%- endset %}\n\n {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n {% do return({\n \"unique_key\": primary_key,\n \"updated_at\": updated_at,\n \"row_changed\": row_changed_expr,\n \"scd_id\": scd_id_expr,\n \"invalidate_hard_deletes\": invalidate_hard_deletes\n }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.snapshot_hash_arguments" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4442255, "supported_languages": null }, "macro.dbt.snapshot_string_as_time": { "unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__snapshot_string_as_time" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4445877, "supported_languages": null }, "macro.dbt.default__snapshot_string_as_time": { "unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n {% do exceptions.raise_not_implemented(\n 'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4449623, "supported_languages": null }, "macro.dbt.snapshot_check_all_get_existing_columns": { "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n {%- if not target_exists -%}\n {#-- no table yet -> return whatever the query does --#}\n {{ return((false, query_columns)) }}\n {%- endif -%}\n\n {#-- handle any schema changes --#}\n {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n {% if check_cols_config == 'all' %}\n {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n {#-- query for proper casing/quoting, to support comparison below --#}\n {%- set select_check_cols_from_target -%}\n select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n {%- endset -%}\n {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n {% else %}\n {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n {% endif %}\n\n {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n {%- set ns.column_added = false -%}\n\n {%- set intersection = [] -%}\n {%- for col in query_columns -%}\n {%- if col in existing_cols -%}\n {%- do intersection.append(adapter.quote(col)) -%}\n {%- else -%}\n {% set ns.column_added = true %}\n {%- endif -%}\n {%- endfor -%}\n {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.get_columns_in_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4480283, "supported_languages": null }, "macro.dbt.snapshot_check_strategy": { "unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n {% set check_cols_config = config['check_cols'] %}\n {% set primary_key = config['unique_key'] %}\n {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n {% set column_added = false %}\n\n {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n {%- set row_changed_expr -%}\n (\n {%- if column_added -%}\n {{ get_true_sql() }}\n {%- else -%}\n {%- for col in check_cols -%}\n {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n or\n (\n (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n or\n ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n )\n {%- if not loop.last %} or {% endif -%}\n {%- endfor -%}\n {%- endif -%}\n )\n {%- endset %}\n\n {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n {% do return({\n \"unique_key\": primary_key,\n \"updated_at\": updated_at,\n \"row_changed\": row_changed_expr,\n \"scd_id\": scd_id_expr,\n \"invalidate_hard_deletes\": invalidate_hard_deletes\n }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4507134, "supported_languages": null }, "macro.dbt.snapshot_merge_sql": { "unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__snapshot_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4519317, "supported_languages": null }, "macro.dbt.default__snapshot_merge_sql": { "unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n merge into {{ target }} as DBT_INTERNAL_DEST\n using {{ source }} as DBT_INTERNAL_SOURCE\n on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n when matched\n and DBT_INTERNAL_DEST.dbt_valid_to is null\n and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n then update\n set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n when not matched\n and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n then insert ({{ insert_cols_csv }})\n values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4524972, "supported_languages": null }, "macro.dbt.materialization_seed_default": { "unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n {%- set identifier = models -%}\n {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n {%- set grant_config = config.get('grants') -%}\n {%- set agate_table = load_agate_table() -%}\n -- grab current tables grants config for comparision later on\n\n {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n -- `BEGIN` happens here:\n {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n -- build model\n {% set create_table_sql = \"\" %}\n {% if exists_as_view %}\n {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n {% elif exists_as_table %}\n {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n {% else %}\n {% set create_table_sql = create_csv_table(model, agate_table) %}\n {% endif %}\n\n {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n {% set rows_affected = (agate_table.rows | length) %}\n {% set sql = load_csv_rows(model, agate_table) %}\n\n {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n {{ get_csv_sql(create_table_sql, sql) }};\n {% endcall %}\n\n {% set target_relation = this.incorporate(type='table') %}\n\n {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n {% do persist_docs(target_relation, model) %}\n\n {% if full_refresh_mode or not exists_as_table %}\n {% do create_indexes(target_relation) %}\n {% endif %}\n\n {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n -- `COMMIT` happens here\n {{ adapter.commit() }}\n\n {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4589076, "supported_languages": [ "sql" ] }, "macro.dbt.create_csv_table": { "unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__create_csv_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4668112, "supported_languages": null }, "macro.dbt.default__create_csv_table": { "unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n {%- set column_override = model['config'].get('column_types', {}) -%}\n {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n {% set sql %}\n create table {{ this.render() }} (\n {%- for col_name in agate_table.column_names -%}\n {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n {%- set type = column_override.get(col_name, inferred_type) -%}\n {%- set column_name = (col_name | string) -%}\n {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n {%- endfor -%}\n )\n {% endset %}\n\n {% call statement('_') -%}\n {{ sql }}\n {%- endcall %}\n\n {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4687498, "supported_languages": null }, "macro.dbt.reset_csv_table": { "unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__reset_csv_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4692574, "supported_languages": null }, "macro.dbt.default__reset_csv_table": { "unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n {% set sql = \"\" %}\n {% if full_refresh %}\n {{ adapter.drop_relation(old_relation) }}\n {% set sql = create_csv_table(model, agate_table) %}\n {% else %}\n {{ adapter.truncate_relation(old_relation) }}\n {% set sql = \"truncate table \" ~ old_relation %}\n {% endif %}\n\n {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.create_csv_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4702635, "supported_languages": null }, "macro.dbt.get_csv_sql": { "unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__get_csv_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4707284, "supported_languages": null }, "macro.dbt.default__get_csv_sql": { "unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n {{ create_or_truncate_sql }};\n -- dbt seed --\n {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4710321, "supported_languages": null }, "macro.dbt.get_binding_char": { "unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__get_binding_char" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4713433, "supported_languages": null }, "macro.dbt.default__get_binding_char": { "unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4716063, "supported_languages": null }, "macro.dbt.get_batch_size": { "unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__get_batch_size" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4719625, "supported_languages": null }, "macro.dbt.default__get_batch_size": { "unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.472222, "supported_languages": null }, "macro.dbt.get_seed_column_quoted_csv": { "unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n {% set quoted = [] %}\n {% for col in column_names -%}\n {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n {%- endfor %}\n\n {%- set dest_cols_csv = quoted | join(', ') -%}\n {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4732203, "supported_languages": null }, "macro.dbt.load_csv_rows": { "unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__load_csv_rows" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4736202, "supported_languages": null }, "macro.dbt.default__load_csv_rows": { "unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n {% set batch_size = get_batch_size() %}\n\n {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n {% set bindings = [] %}\n\n {% set statements = [] %}\n\n {% for chunk in agate_table.rows | batch(batch_size) %}\n {% set bindings = [] %}\n\n {% for row in chunk %}\n {% do bindings.extend(row) %}\n {% endfor %}\n\n {% set sql %}\n insert into {{ this.render() }} ({{ cols_sql }}) values\n {% for row in chunk -%}\n ({%- for column in agate_table.column_names -%}\n {{ get_binding_char() }}\n {%- if not loop.last%},{%- endif %}\n {%- endfor -%})\n {%- if not loop.last%},{%- endif %}\n {%- endfor %}\n {% endset %}\n\n {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n {% if loop.index0 == 0 %}\n {% do statements.append(sql) %}\n {% endif %}\n {% endfor %}\n\n {# Return SQL so we can render it out into the compiled files #}\n {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4763973, "supported_languages": null }, "macro.dbt.materialization_view_default": { "unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n {%- set existing_relation = load_cached_relation(this) -%}\n {%- set target_relation = this.incorporate(type='view') -%}\n {%- set intermediate_relation = make_intermediate_relation(target_relation) -%}\n\n -- the intermediate_relation should not already exist in the database; get_relation\n -- will return None in that case. Otherwise, we get a relation that we can drop\n -- later, before we try to use this name for the current operation\n {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n /bin /imagegeneration /run /sbin This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n a previous run, and we're going to try to drop it immediately. At the end of this\n materialization, we're going to rename the \"existing_relation\" to this identifier,\n and then we're going to drop it. In order to make sure we run the correct one of:\n - drop view ...\n - drop table ...\n\n We need to set the type of this relation to be the type of the existing_relation, if it exists,\n or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n this relation will be effectively unused.\n */\n {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n -- as above, the backup_relation should not already exist\n {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n -- grab current tables grants config for comparision later on\n {% set grant_config = config.get('grants') %}\n\n {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n -- drop the temp relations if they exist already in the database\n {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n -- `BEGIN` happens here:\n {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n -- build model\n {% call statement('main') -%}\n {{ get_create_view_as_sql(intermediate_relation, sql) }}\n {%- endcall %}\n\n -- cleanup\n -- move the existing view out of the way\n {% if existing_relation is not none %}\n {{ adapter.rename_relation(existing_relation, backup_relation) }}\n {% endif %}\n {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n {% do persist_docs(target_relation, model) %}\n\n {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n {{ adapter.commit() }}\n\n {{ drop_relation_if_exists(backup_relation) }}\n\n {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4815385, "supported_languages": [ "sql" ] }, "macro.dbt.handle_existing_table": { "unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__handle_existing_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4824677, "supported_languages": null }, "macro.dbt.default__handle_existing_table": { "unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4830072, "supported_languages": null }, "macro.dbt.get_create_view_as_sql": { "unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__get_create_view_as_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4839883, "supported_languages": null }, "macro.dbt.default__get_create_view_as_sql": { "unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.create_view_as" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4843397, "supported_languages": null }, "macro.dbt.create_view_as": { "unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__create_view_as" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4847252, "supported_languages": null }, "macro.dbt.default__create_view_as": { "unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n {%- set sql_header = config.get('sql_header', none) -%}\n\n {{ sql_header if sql_header is not none }}\n create view {{ relation }} as (\n {{ sql }}\n );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4852731, "supported_languages": null }, "macro.dbt.create_or_replace_view": { "unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n {%- set identifier = models -%}\n\n {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n {%- set target_relation = api.Relation.create(\n identifier=identifier, schema=schema, database=database,\n type='view') -%}\n {% set grant_config = config.get('grants') %}\n\n {{ run_hooks(pre_hooks) }}\n\n -- If there's a table with the same name and we weren't told to full refresh,\n -- that's an error. If we were told to full refresh, drop it. This behavior differs\n -- for Snowflake and BigQuery, so multiple dispatch is used.\n {%- if old_relation is not none and old_relation.is_table -%}\n {{ handle_existing_table(should_full_refresh(), old_relation) }}\n {%- endif -%}\n\n -- build model\n {% call statement('main') -%}\n {{ get_create_view_as_sql(target_relation, sql) }}\n {%- endcall %}\n\n {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n {{ run_hooks(post_hooks) }}\n\n {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4885135, "supported_languages": null }, "macro.dbt.get_create_table_as_sql": { "unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__get_create_table_as_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.489718, "supported_languages": null }, "macro.dbt.default__get_create_table_as_sql": { "unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.create_table_as" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4901135, "supported_languages": null }, "macro.dbt.create_table_as": { "unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n {# backward compatibility for create_table_as that does not support language #}\n {% if language == \"sql\" %}\n {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n {% else %}\n {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__create_table_as" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4910827, "supported_languages": null }, "macro.dbt.default__create_table_as": { "unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n {%- set sql_header = config.get('sql_header', none) -%}\n\n {{ sql_header if sql_header is not none }}\n\n create {% if temporary: -%}temporary{%- endif %} table\n {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n as (\n {{ sql }}\n );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4919808, "supported_languages": null }, "macro.dbt.materialization_table_default": { "unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n {%- set existing_relation = load_cached_relation(this) -%}\n {%- set target_relation = this.incorporate(type='table') %}\n {%- set intermediate_relation = make_intermediate_relation(target_relation) -%}\n -- the intermediate_relation should not already exist in the database; get_relation\n -- will return None in that case. Otherwise, we get a relation that we can drop\n -- later, before we try to use this name for the current operation\n {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n /bin /imagegeneration /run /sbin See ../view/view.sql for more information about this relation.\n */\n {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n -- as above, the backup_relation should not already exist\n {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n -- grab current tables grants config for comparision later on\n {% set grant_config = config.get('grants') %}\n\n -- drop the temp relations if they exist already in the database\n {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n -- `BEGIN` happens here:\n {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n -- build model\n {% call statement('main') -%}\n {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n {%- endcall %}\n\n -- cleanup\n {% if existing_relation is not none %}\n {{ adapter.rename_relation(existing_relation, backup_relation) }}\n {% endif %}\n\n {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n {% do create_indexes(target_relation) %}\n\n {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n {% do persist_docs(target_relation, model) %}\n\n -- `COMMIT` happens here\n {{ adapter.commit() }}\n\n -- finally, drop the existing/backup relation after the commit\n {{ drop_relation_if_exists(backup_relation) }}\n\n {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.4971476, "supported_languages": [ "sql" ] }, "macro.dbt.get_merge_sql": { "unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__get_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5039637, "supported_languages": null }, "macro.dbt.default__get_merge_sql": { "unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n {%- set predicates = [] if predicates is none else [] + predicates -%}\n {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n {%- set merge_update_columns = config.get('merge_update_columns') -%}\n {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n {%- set sql_header = config.get('sql_header', none) -%}\n\n {% if unique_key %}\n {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n {% for key in unique_key %}\n {% set this_key_match %}\n DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n {% endset %}\n {% do predicates.append(this_key_match) %}\n {% endfor %}\n {% else %}\n {% set unique_key_match %}\n DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n {% endset %}\n {% do predicates.append(unique_key_match) %}\n {% endif %}\n {% else %}\n {% do predicates.append('FALSE') %}\n {% endif %}\n\n {{ sql_header if sql_header is not none }}\n\n merge into {{ target }} as DBT_INTERNAL_DEST\n using {{ source }} as DBT_INTERNAL_SOURCE\n on {{ predicates | join(' and ') }}\n\n {% if unique_key %}\n when matched then update set\n {% for column_name in update_columns -%}\n {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n {%- if not loop.last %}, {%- endif %}\n {%- endfor %}\n {% endif %}\n\n when not matched then insert\n ({{ dest_cols_csv }})\n values\n ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5072212, "supported_languages": null }, "macro.dbt.get_delete_insert_merge_sql": { "unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5077634, "supported_languages": null }, "macro.dbt.default__get_delete_insert_merge_sql": { "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n {% if unique_key %}\n {% if unique_key is sequence and unique_key is not string %}\n delete from {{target }}\n using {{ source }}\n where (\n {% for key in unique_key %}\n {{ source }}.{{ key }} = {{ target }}.{{ key }}\n {{ \"and \" if not loop.last }}\n {% endfor %}\n );\n {% else %}\n delete from {{ target }}\n where (\n {{ unique_key }}) in (\n select ({{ unique_key }})\n from {{ source }}\n );\n\n {% endif %}\n {% endif %}\n\n insert into {{ target }} ({{ dest_cols_csv }})\n (\n select {{ dest_cols_csv }}\n from {{ source }}\n )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.get_quoted_csv" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.50934, "supported_languages": null }, "macro.dbt.get_insert_overwrite_merge_sql": { "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__get_insert_overwrite_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5099308, "supported_languages": null }, "macro.dbt.default__get_insert_overwrite_merge_sql": { "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n {#-- The only time include_sql_header is True: --#}\n {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n {#-- We should consider including the sql header at the materialization level instead --#}\n\n {%- set predicates = [] if predicates is none else [] + predicates -%}\n {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n {%- set sql_header = config.get('sql_header', none) -%}\n\n {{ sql_header if sql_header is not none and include_sql_header }}\n\n merge into {{ target }} as DBT_INTERNAL_DEST\n using {{ source }} as DBT_INTERNAL_SOURCE\n on FALSE\n\n when not matched by source\n {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n then delete\n\n when not matched then insert\n ({{ dest_cols_csv }})\n values\n ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.get_quoted_csv" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5113256, "supported_languages": null }, "macro.dbt.get_incremental_append_sql": { "unique_id": "macro.dbt.get_incremental_append_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__get_incremental_append_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5131574, "supported_languages": null }, "macro.dbt.default__get_incremental_append_sql": { "unique_id": "macro.dbt.default__get_incremental_append_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.get_insert_into_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.513654, "supported_languages": null }, "macro.dbt.get_incremental_delete_insert_sql": { "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__get_incremental_delete_insert_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5140486, "supported_languages": null }, "macro.dbt.default__get_incremental_delete_insert_sql": { "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.get_delete_insert_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5146425, "supported_languages": null }, "macro.dbt.get_incremental_merge_sql": { "unique_id": "macro.dbt.get_incremental_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__get_incremental_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5150585, "supported_languages": null }, "macro.dbt.default__get_incremental_merge_sql": { "unique_id": "macro.dbt.default__get_incremental_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.get_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5156214, "supported_languages": null }, "macro.dbt.get_incremental_insert_overwrite_sql": { "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__get_incremental_insert_overwrite_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5160346, "supported_languages": null }, "macro.dbt.default__get_incremental_insert_overwrite_sql": { "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"predicates\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.get_insert_overwrite_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5165823, "supported_languages": null }, "macro.dbt.get_incremental_default_sql": { "unique_id": "macro.dbt.get_incremental_default_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__get_incremental_default_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5169773, "supported_languages": null }, "macro.dbt.default__get_incremental_default_sql": { "unique_id": "macro.dbt.default__get_incremental_default_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.get_incremental_append_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.517315, "supported_languages": null }, "macro.dbt.get_insert_into_sql": { "unique_id": "macro.dbt.get_insert_into_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n insert into {{ target_relation }} ({{ dest_cols_csv }})\n (\n select {{ dest_cols_csv }}\n from {{ temp_relation }}\n )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.get_quoted_csv" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5179017, "supported_languages": null }, "macro.dbt.get_quoted_csv": { "unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n {% set quoted = [] %}\n {% for col in column_names -%}\n {%- do quoted.append(adapter.quote(col)) -%}\n {%- endfor %}\n\n {%- set dest_cols_csv = quoted | join(', ') -%}\n {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5209672, "supported_languages": null }, "macro.dbt.diff_columns": { "unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n {% set result = [] %}\n {% set source_names = source_columns | map(attribute = 'column') | list %}\n {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n {% for sc in source_columns %}\n {% if sc.name not in target_names %}\n {{ result.append(sc) }}\n {% endif %}\n {% endfor %}\n\n {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5222921, "supported_languages": null }, "macro.dbt.diff_column_data_types": { "unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n {% set result = [] %}\n {% for sc in source_columns %}\n {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n {% if tc %}\n {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n {% endif %}\n {% endif %}\n {% endfor %}\n\n {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5237703, "supported_languages": null }, "macro.dbt.get_merge_update_columns": { "unique_id": "macro.dbt.get_merge_update_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__get_merge_update_columns" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.524276, "supported_languages": null }, "macro.dbt.default__get_merge_update_columns": { "unique_id": "macro.dbt.default__get_merge_update_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n {%- if merge_update_columns and merge_exclude_columns -%}\n {{ exceptions.raise_compiler_error(\n 'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n )}}\n {%- elif merge_update_columns -%}\n {%- set update_columns = merge_update_columns -%}\n {%- elif merge_exclude_columns -%}\n {%- set update_columns = [] -%}\n {%- for column in dest_columns -%}\n {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n {%- do update_columns.append(column.quoted) -%}\n {% endif %}\n {%- endfor -%}\n {%- else -%}\n {%- set update_columns = default_cols -%}\n {%- endif -%}\n\n {{ return(update_columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.525766, "supported_languages": null }, "macro.dbt.materialization_incremental_default": { "unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n -- relations\n {%- set existing_relation = load_cached_relation(this) -%}\n {%- set target_relation = this.incorporate(type='table') -%}\n {%- set temp_relation = make_temp_relation(target_relation)-%}\n {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n -- configs\n {%- set unique_key = config.get('unique_key') -%}\n {%- set full_refresh_mode = (should_full_refresh() or existing_relation.is_view) -%}\n {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n -- the temp_ and backup_ relations should not already exist in the database; get_relation\n -- will return None in that case. Otherwise, we get a relation that we can drop\n -- later, before we try to use this name for the current operation. This has to happen before\n -- BEGIN, in a separate transaction\n {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n -- grab current tables grants config for comparision later on\n {% set grant_config = config.get('grants') %}\n {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n -- `BEGIN` happens here:\n {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n {% set to_drop = [] %}\n\n {% if existing_relation is none %}\n {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n {% elif full_refresh_mode %}\n {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n {% set need_swap = true %}\n {% else %}\n {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n {% do adapter.expand_target_column_types(\n from_relation=temp_relation,\n to_relation=target_relation) %}\n {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n {% if not dest_columns %}\n {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n {% endif %}\n\n {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n {% set incremental_predicates = config.get('incremental_predicates', none) %}\n {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n {% endif %}\n\n {% call statement(\"main\") %}\n {{ build_sql }}\n {% endcall %}\n\n {% if need_swap %}\n {% do adapter.rename_relation(target_relation, backup_relation) %}\n {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n {% do to_drop.append(backup_relation) %}\n {% endif %}\n\n {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n {% do persist_docs(target_relation, model) %}\n\n {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n {% do create_indexes(target_relation) %}\n {% endif %}\n\n {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n -- `COMMIT` happens here\n {% do adapter.commit() %}\n\n {% for rel in to_drop %}\n {% do adapter.drop_relation(rel) %}\n {% endfor %}\n\n {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5354822, "supported_languages": [ "sql" ] }, "macro.dbt.incremental_validate_on_schema_change": { "unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n {% do log(log_message) %}\n\n {{ return(default) }}\n\n {% else %}\n\n {{ return(on_schema_change) }}\n\n {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5441613, "supported_languages": null }, "macro.dbt.check_for_schema_changes": { "unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n {% set schema_changed = False %}\n\n {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n {% if source_not_in_target != [] %}\n {% set schema_changed = True %}\n {% elif target_not_in_source != [] or new_target_types != [] %}\n {% set schema_changed = True %}\n {% elif new_target_types != [] %}\n {% set schema_changed = True %}\n {% endif %}\n\n {% set changes_dict = {\n 'schema_changed': schema_changed,\n 'source_not_in_target': source_not_in_target,\n 'target_not_in_source': target_not_in_source,\n 'source_columns': source_columns,\n 'target_columns': target_columns,\n 'new_target_types': new_target_types\n } %}\n\n {% set msg %}\n In {{ target_relation }}:\n Schema changed: {{ schema_changed }}\n Source columns not in target: {{ source_not_in_target }}\n Target columns not in source: {{ target_not_in_source }}\n New column types: {{ new_target_types }}\n {% endset %}\n\n {% do log(msg) %}\n\n {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.diff_columns", "macro.dbt.diff_column_data_types" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5466988, "supported_languages": null }, "macro.dbt.sync_column_schemas": { "unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n {%- if on_schema_change == 'append_new_columns'-%}\n {%- if add_to_target_arr | length > 0 -%}\n {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n {%- endif -%}\n\n {% elif on_schema_change == 'sync_all_columns' %}\n {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n {% endif %}\n\n {% if new_target_types != [] %}\n {% for ntt in new_target_types %}\n {% set column_name = ntt['column_name'] %}\n {% set new_type = ntt['new_type'] %}\n {% do alter_column_type(target_relation, column_name, new_type) %}\n {% endfor %}\n {% endif %}\n\n {% endif %}\n\n {% set schema_change_message %}\n In {{ target_relation }}:\n Schema change approach: {{ on_schema_change }}\n Columns added: {{ add_to_target_arr }}\n Columns removed: {{ remove_from_target_arr }}\n Data types changed: {{ new_target_types }}\n {% endset %}\n\n {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5491998, "supported_languages": null }, "macro.dbt.process_schema_changes": { "unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n {% if on_schema_change == 'ignore' %}\n\n {{ return({}) }}\n\n {% else %}\n\n {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n {% if schema_changes_dict['schema_changed'] %}\n\n {% if on_schema_change == 'fail' %}\n\n {% set fail_msg %}\n The source and target schemas on this incremental model are out of sync!\n They can be reconciled in several ways:\n - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n - Re-run the incremental model with `full_refresh: True` to update the target schema.\n - update the schema manually and re-run the process.\n\n Additional troubleshooting context:\n Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n New column types: {{ schema_changes_dict['new_target_types'] }}\n {% endset %}\n\n {% do exceptions.raise_compiler_error(fail_msg) %}\n\n {# -- unless we ignore, run the sync operation per the config #}\n {% else %}\n\n {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n {% endif %}\n\n {% endif %}\n\n {{ return(schema_changes_dict['source_columns']) }}\n\n {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.551009, "supported_languages": null }, "macro.dbt.is_incremental": { "unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n {#-- do not run introspective queries in parsing #}\n {% if not execute %}\n {{ return(False) }}\n {% else %}\n {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n {{ return(relation is not none\n and relation.type == 'table'\n and model.config.materialized == 'incremental'\n and not should_full_refresh()) }}\n {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.should_full_refresh" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5525932, "supported_languages": null }, "macro.dbt.get_where_subquery": { "unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__get_where_subquery" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5535657, "supported_languages": null }, "macro.dbt.default__get_where_subquery": { "unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n {% set where = config.get('where', '') %}\n {% if where %}\n {%- set filtered -%}\n (select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ relation }} where {{ where }}) dbt_subquery\n {%- endset -%}\n {% do return(filtered) %}\n {%- else -%}\n {% do return(relation) %}\n {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5543745, "supported_languages": null }, "macro.dbt.get_test_sql": { "unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__get_test_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5554974, "supported_languages": null }, "macro.dbt.default__get_test_sql": { "unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n select\n {{ fail_calc }} as failures,\n {{ fail_calc }} {{ warn_if }} as should_warn,\n {{ fail_calc }} {{ error_if }} as should_error\n from (\n {{ main_sql }}\n {{ \"limit \" ~ limit if limit != none }}\n ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5561547, "supported_languages": null }, "macro.dbt.materialization_test_default": { "unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n {% set relations = [] %}\n\n {% if should_store_failures() %}\n\n {% set identifier = models %}\n {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n {% set target_relation = api.Relation.create(\n identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n {% if old_relation %}\n {% do adapter.drop_relation(old_relation) %}\n {% endif %}\n\n {% call statement(auto_begin=True) %}\n {{ create_table_as(False, target_relation, sql) }}\n {% endcall %}\n\n {% do relations.append(target_relation) %}\n\n {% set main_sql %}\n select *\n from {{ target_relation }}\n {% endset %}\n\n {{ adapter.commit() }}\n\n {% else %}\n\n {% set main_sql = sql %}\n\n {% endif %}\n\n {% set limit = config.get('limit') %}\n {% set fail_calc = config.get('fail_calc') %}\n {% set warn_if = config.get('warn_if') %}\n {% set error_if = config.get('error_if') %}\n\n {% call statement('main', fetch_result=True) -%}\n\n {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n {%- endcall %}\n\n {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5603073, "supported_languages": [ "sql" ] }, "macro.dbt.build_ref_function": { "unique_id": "macro.dbt.build_ref_function", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n {%- set ref_dict = {} -%}\n {%- for _ref in model.refs -%}\n {%- set resolved = ref(*_ref) -%}\n {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n refs = {{ ref_dict | tojson }}\n key = \".\".join(args)\n return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5630515, "supported_languages": null }, "macro.dbt.build_source_function": { "unique_id": "macro.dbt.build_source_function", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n {%- set source_dict = {} -%}\n {%- for _source in model.sources -%}\n {%- set resolved = source(*_source) -%}\n {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n sources = {{ source_dict | tojson }}\n key = \".\".join(args)\n return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.564061, "supported_languages": null }, "macro.dbt.build_config_dict": { "unique_id": "macro.dbt.build_config_dict", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n {%- set config_dict = {} -%}\n {%- for key in model.config.config_keys_used -%}\n {# weird type testing with enum, would be much easier to write this logic in Python! #}\n {%- if key == 'language' -%}\n {%- set value = 'python' -%}\n {%- endif -%}\n {%- set value = model.config[key] -%}\n {%- do config_dict.update({key: value}) -%}\n {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.565019, "supported_languages": null }, "macro.dbt.py_script_postfix": { "unique_id": "macro.dbt.py_script_postfix", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n def __init__(self, *args, **kwargs):\n pass\n\n @staticmethod\n def get(key, default=None):\n return config_dict.get(key, default)\n\nclass this:\n \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n database = '{{ this.database }}'\n schema = '{{ this.schema }}'\n identifier = '{{ this.identifier }}'\n def __repr__(self):\n return '{{ this }}'\n\n\nclass dbtObj:\n def __init__(self, load_df_function) -> None:\n self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n self.config = config\n self.this = this()\n self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5658572, "supported_languages": null }, "macro.dbt.py_script_comment": { "unique_id": "macro.dbt.py_script_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5660298, "supported_languages": null }, "macro.dbt.make_intermediate_relation": { "unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__make_intermediate_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5714686, "supported_languages": null }, "macro.dbt.default__make_intermediate_relation": { "unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__make_temp_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5718546, "supported_languages": null }, "macro.dbt.make_temp_relation": { "unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__make_temp_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5723143, "supported_languages": null }, "macro.dbt.default__make_temp_relation": { "unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n {%- set temp_relation = base_relation.incorporate(\n path={\"identifier\": temp_identifier}) -%}\n\n {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5729344, "supported_languages": null }, "macro.dbt.make_backup_relation": { "unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__make_backup_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5736308, "supported_languages": null }, "macro.dbt.default__make_backup_relation": { "unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n {%- set backup_relation = base_relation.incorporate(\n path={\"identifier\": backup_identifier},\n type=backup_relation_type\n ) -%}\n {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5743468, "supported_languages": null }, "macro.dbt.drop_relation": { "unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__drop_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5748053, "supported_languages": null }, "macro.dbt.default__drop_relation": { "unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n {% call statement('drop_relation', auto_begin=False) -%}\n drop {{ relation.type }} if exists {{ relation }} cascade\n {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.575288, "supported_languages": null }, "macro.dbt.truncate_relation": { "unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__truncate_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.575683, "supported_languages": null }, "macro.dbt.default__truncate_relation": { "unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n {% call statement('truncate_relation') -%}\n truncate table {{ relation }}\n {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.576046, "supported_languages": null }, "macro.dbt.rename_relation": { "unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__rename_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5764697, "supported_languages": null }, "macro.dbt.default__rename_relation": { "unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n {% call statement('rename_relation') -%}\n alter table {{ from_relation }} rename to {{ target_name }}\n {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.57706, "supported_languages": null }, "macro.dbt.get_or_create_relation": { "unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__get_or_create_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5775692, "supported_languages": null }, "macro.dbt.default__get_or_create_relation": { "unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n {% if target_relation %}\n {% do return([true, target_relation]) %}\n {% endif %}\n\n {%- set new_relation = api.Relation.create(\n database=database,\n schema=schema,\n identifier=identifier,\n type=type\n ) -%}\n {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5787392, "supported_languages": null }, "macro.dbt.load_cached_relation": { "unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n {% do return(adapter.get_relation(\n database=relation.database,\n schema=relation.schema,\n identifier=relation.identifier\n )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5792444, "supported_languages": null }, "macro.dbt.load_relation": { "unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.load_cached_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.579568, "supported_languages": null }, "macro.dbt.drop_relation_if_exists": { "unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n {% if relation is not none %}\n {{ adapter.drop_relation(relation) }}\n {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5800035, "supported_languages": null }, "macro.dbt.current_timestamp": { "unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__current_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5811892, "supported_languages": null }, "macro.dbt.default__current_timestamp": { "unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n {{ exceptions.raise_not_implemented(\n 'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5815167, "supported_languages": null }, "macro.dbt.snapshot_get_time": { "unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__snapshot_get_time" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.581825, "supported_languages": null }, "macro.dbt.default__snapshot_get_time": { "unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n {{ current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.current_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5820615, "supported_languages": null }, "macro.dbt.current_timestamp_backcompat": { "unique_id": "macro.dbt.current_timestamp_backcompat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__current_timestamp_backcompat" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5824673, "supported_languages": null }, "macro.dbt.default__current_timestamp_backcompat": { "unique_id": "macro.dbt.default__current_timestamp_backcompat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n current_timestamp::timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5827053, "supported_languages": null }, "macro.dbt.current_timestamp_in_utc_backcompat": { "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5830743, "supported_languages": null }, "macro.dbt.default__current_timestamp_in_utc_backcompat": { "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5834484, "supported_languages": null }, "macro.dbt.get_create_index_sql": { "unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__get_create_index_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5846171, "supported_languages": null }, "macro.dbt.default__get_create_index_sql": { "unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5849285, "supported_languages": null }, "macro.dbt.create_indexes": { "unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__create_indexes" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5852695, "supported_languages": null }, "macro.dbt.default__create_indexes": { "unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n {%- set _indexes = config.get('indexes', default=[]) -%}\n\n {% for _index_dict in _indexes %}\n {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n {% if create_index_sql %}\n {% do run_query(create_index_sql) %}\n {% endif %}\n {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.get_create_index_sql", "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5862854, "supported_languages": null }, "macro.dbt.alter_column_comment": { "unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__alter_column_comment" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.587975, "supported_languages": null }, "macro.dbt.default__alter_column_comment": { "unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n {{ exceptions.raise_not_implemented(\n 'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5883439, "supported_languages": null }, "macro.dbt.alter_relation_comment": { "unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__alter_relation_comment" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.588773, "supported_languages": null }, "macro.dbt.default__alter_relation_comment": { "unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n {{ exceptions.raise_not_implemented(\n 'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5891452, "supported_languages": null }, "macro.dbt.persist_docs": { "unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__persist_docs" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5897007, "supported_languages": null }, "macro.dbt.default__persist_docs": { "unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n {% if for_relation and config.persist_relation_docs() and model.description %}\n {% do run_query(alter_relation_comment(relation, model.description)) %}\n {% endif %}\n\n {% if for_columns and config.persist_column_docs() and model.columns %}\n {% do run_query(alter_column_comment(relation, model.columns)) %}\n {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5907528, "supported_languages": null }, "macro.dbt.get_catalog": { "unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__get_catalog" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5935662, "supported_languages": null }, "macro.dbt.default__get_catalog": { "unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n {% set typename = adapter.type() %}\n {% set msg -%}\n get_catalog not implemented for {{ typename }}\n {%- endset %}\n\n {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5941453, "supported_languages": null }, "macro.dbt.information_schema_name": { "unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__information_schema_name" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.594593, "supported_languages": null }, "macro.dbt.default__information_schema_name": { "unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n {%- if database -%}\n {{ database }}.INFORMATION_SCHEMA\n {%- else -%}\n INFORMATION_SCHEMA\n {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5950105, "supported_languages": null }, "macro.dbt.list_schemas": { "unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__list_schemas" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5954196, "supported_languages": null }, "macro.dbt.default__list_schemas": { "unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n {% set sql %}\n select distinct schema_name\n from {{ information_schema_name(database) }}.SCHEMATA\n where catalog_name ilike '{{ database }}'\n {% endset %}\n {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.information_schema_name", "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5959635, "supported_languages": null }, "macro.dbt.check_schema_exists": { "unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__check_schema_exists" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5963876, "supported_languages": null }, "macro.dbt.default__check_schema_exists": { "unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n {% set sql -%}\n select count(*)\n from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n where catalog_name='{{ information_schema.database }}'\n and schema_name='{{ schema }}'\n {%- endset %}\n {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.replace", "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5970397, "supported_languages": null }, "macro.dbt.list_relations_without_caching": { "unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__list_relations_without_caching" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.597453, "supported_languages": null }, "macro.dbt.default__list_relations_without_caching": { "unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n {{ exceptions.raise_not_implemented(\n 'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.597802, "supported_languages": null }, "macro.dbt.collect_freshness": { "unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__collect_freshness" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.5991201, "supported_languages": null }, "macro.dbt.default__collect_freshness": { "unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n select\n max({{ loaded_at_field }}) as max_loaded_at,\n {{ current_timestamp() }} as snapshotted_at\n from {{ source }}\n {% if filter %}\n where {{ filter }}\n {% endif %}\n {% endcall %}\n {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.statement", "macro.dbt.current_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6000361, "supported_languages": null }, "macro.dbt.copy_grants": { "unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__copy_grants" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6030855, "supported_languages": null }, "macro.dbt.default__copy_grants": { "unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6033602, "supported_languages": null }, "macro.dbt.support_multiple_grantees_per_dcl_statement": { "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6037388, "supported_languages": null }, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": { "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6042235, "supported_languages": null }, "macro.dbt.should_revoke": { "unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n {% if not existing_relation %}\n {#-- The table doesn't already exist, so no grants to copy over --#}\n {{ return(False) }}\n {% elif full_refresh_mode %}\n {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n {{ return(copy_grants()) }}\n {% else %}\n {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n {{ return(True) }}\n {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.copy_grants" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.605049, "supported_languages": null }, "macro.dbt.get_show_grant_sql": { "unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__get_show_grant_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.605481, "supported_languages": null }, "macro.dbt.default__get_show_grant_sql": { "unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.605752, "supported_languages": null }, "macro.dbt.get_grant_sql": { "unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__get_grant_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.606262, "supported_languages": null }, "macro.dbt.default__get_grant_sql": { "unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.606808, "supported_languages": null }, "macro.dbt.get_revoke_sql": { "unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__get_revoke_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6074302, "supported_languages": null }, "macro.dbt.default__get_revoke_sql": { "unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.607888, "supported_languages": null }, "macro.dbt.get_dcl_statement_list": { "unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__get_dcl_statement_list" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6084614, "supported_languages": null }, "macro.dbt.default__get_dcl_statement_list": { "unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n {#\n -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n #}\n {%- set dcl_statements = [] -%}\n {%- for privilege, grantees in grant_config.items() %}\n {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n {%- do dcl_statements.append(dcl) -%}\n {%- else -%}\n {%- for grantee in grantees -%}\n {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n {%- do dcl_statements.append(dcl) -%}\n {% endfor -%}\n {%- endif -%}\n {%- endfor -%}\n {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.support_multiple_grantees_per_dcl_statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6098905, "supported_languages": null }, "macro.dbt.call_dcl_statements": { "unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__call_dcl_statements" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6103034, "supported_languages": null }, "macro.dbt.default__call_dcl_statements": { "unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n {#\n -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n -- so that they're all processed together.\n\n -- Some databases do not support this. Those adapters will need to override this macro\n -- to run each statement individually.\n #}\n {% call statement('grants') %}\n {% for dcl_statement in dcl_statement_list %}\n {{ dcl_statement }};\n {% endfor %}\n {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6109493, "supported_languages": null }, "macro.dbt.apply_grants": { "unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__apply_grants" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6115658, "supported_languages": null }, "macro.dbt.default__apply_grants": { "unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n {#-- If grant_config is {} or None, this is a no-op --#}\n {% if grant_config %}\n {% if should_revoke %}\n {#-- We think previous grants may have carried over --#}\n {#-- Show current grants and calculate diffs --#}\n {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n {% if not (needs_granting or needs_revoking) %}\n {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n {% endif %}\n {% else %}\n {#-- We don't think there's any chance of previous grants having carried over. --#}\n {#-- Jump straight to granting what the user has configured. --#}\n {% set needs_revoking = {} %}\n {% set needs_granting = grant_config %}\n {% endif %}\n {% if needs_granting or needs_revoking %}\n {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n {% if dcl_statement_list %}\n {{ call_dcl_statements(dcl_statement_list) }}\n {% endif %}\n {% endif %}\n {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.613986, "supported_languages": null }, "macro.dbt.get_columns_in_relation": { "unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__get_columns_in_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6177976, "supported_languages": null }, "macro.dbt.default__get_columns_in_relation": { "unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n {{ exceptions.raise_not_implemented(\n 'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6181998, "supported_languages": null }, "macro.dbt.sql_convert_columns_in_relation": { "unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n {% set columns = [] %}\n {% for row in table %}\n {% do columns.append(api.Column(*row)) %}\n {% endfor %}\n {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6189911, "supported_languages": null }, "macro.dbt.get_columns_in_query": { "unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__get_columns_in_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6195285, "supported_languages": null }, "macro.dbt.default__get_columns_in_query": { "unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from (\n {{ select_sql }}\n ) as __dbt_sbq\n where false\n limit 0\n {% endcall %}\n\n {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6202958, "supported_languages": null }, "macro.dbt.alter_column_type": { "unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__alter_column_type" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.620777, "supported_languages": null }, "macro.dbt.default__alter_column_type": { "unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n {#\n 1. Create a new column (w/ temp name and correct type)\n 2. Copy data over to it\n 3. Drop the existing column (cascade!)\n 4. Rename the new column to existing column\n #}\n {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n {% call statement('alter_column_type') %}\n alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6221478, "supported_languages": null }, "macro.dbt.alter_relation_add_remove_columns": { "unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.622756, "supported_languages": null }, "macro.dbt.default__alter_relation_add_remove_columns": { "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n {% if add_columns is none %}\n {% set add_columns = [] %}\n {% endif %}\n {% if remove_columns is none %}\n {% set remove_columns = [] %}\n {% endif %}\n\n {% set sql -%}\n\n alter {{ relation.type }} {{ relation }}\n\n {% for column in add_columns %}\n add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n {% for column in remove_columns %}\n drop column {{ column.name }}{{ ',' if not loop.last }}\n {% endfor %}\n\n {%- endset -%}\n\n {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6244237, "supported_languages": null }, "macro.dbt.create_schema": { "unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__create_schema" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.625486, "supported_languages": null }, "macro.dbt.default__create_schema": { "unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n {%- call statement('create_schema') -%}\n create schema if not exists {{ relation.without_identifier() }}\n {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.625887, "supported_languages": null }, "macro.dbt.drop_schema": { "unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__drop_schema" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6262312, "supported_languages": null }, "macro.dbt.default__drop_schema": { "unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n {%- call statement('drop_schema') -%}\n drop schema if exists {{ relation.without_identifier() }} cascade\n {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6266868, "supported_languages": null }, "macro.dbt.default__test_accepted_values": { "unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n select\n {{ column_name }} as value_field,\n count(*) as n_records\n\n from {{ model }}\n group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n {% for value in values -%}\n {% if quote -%}\n '{{ value }}'\n {%- else -%}\n {{ value }}\n {%- endif -%}\n {%- if not loop.last -%},{%- endif %}\n {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6281607, "supported_languages": null }, "macro.dbt.default__test_unique": { "unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n {{ column_name }} as unique_field,\n count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6289234, "supported_languages": null }, "macro.dbt.default__test_relationships": { "unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n select {{ column_name }} as from_field\n from {{ model }}\n where {{ column_name }} is not null\n),\n\nparent as (\n select {{ field }} as to_field\n from {{ to }}\n)\n\nselect\n from_field\n\nfrom child\nleft join parent\n on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6298156, "supported_languages": null }, "macro.dbt.default__test_not_null": { "unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.should_store_failures" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.630719, "supported_languages": null }, "macro.dbt.generate_alias_name": { "unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__generate_alias_name" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.631706, "supported_languages": null }, "macro.dbt.default__generate_alias_name": { "unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n {%- if custom_alias_name is none -%}\n\n {{ node.name }}\n\n {%- else -%}\n\n {{ custom_alias_name | trim }}\n\n {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6322167, "supported_languages": null }, "macro.dbt.generate_schema_name": { "unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__generate_schema_name" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6333983, "supported_languages": null }, "macro.dbt.default__generate_schema_name": { "unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n {%- set default_schema = target.schema -%}\n {%- if custom_schema_name is none -%}\n\n {{ default_schema }}\n\n {%- else -%}\n\n {{ default_schema }}_{{ custom_schema_name | trim }}\n\n {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6339743, "supported_languages": null }, "macro.dbt.generate_schema_name_for_env": { "unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n {%- set default_schema = target.schema -%}\n {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n {{ custom_schema_name | trim }}\n\n {%- else -%}\n\n {{ default_schema }}\n\n {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6346395, "supported_languages": null }, "macro.dbt.generate_database_name": { "unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__generate_database_name" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.635665, "supported_languages": null }, "macro.dbt.default__generate_database_name": { "unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n {%- set default_database = target.database -%}\n {%- if custom_database_name is none -%}\n\n {{ default_database }}\n\n {%- else -%}\n\n {{ custom_database_name }}\n\n {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6362233, "supported_languages": null }, "macro.dbt.test_unique": { "unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__test_unique" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6374407, "supported_languages": null }, "macro.dbt.test_not_null": { "unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__test_not_null" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6379483, "supported_languages": null }, "macro.dbt.test_accepted_values": { "unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__test_accepted_values" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6386027, "supported_languages": null }, "macro.dbt.test_relationships": { "unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.default__test_relationships" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.639206, "supported_languages": null }, "macro.codegen.generate_base_model": { "unique_id": "macro.codegen.generate_base_model", "package_name": "codegen", "root_path": "/tmp/jobs/137931897/target/dbt_packages/codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "name": "generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False, case_sensitive_cols=False, materialized=None) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\n\n{%- if materialized is not none -%}\n {{ \"{{ config(materialized='\" ~ materialized ~ \"') }}\" }}\n{%- endif %}\n\nwith source as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n select\n {%- if leading_commas -%}\n {%- for column in column_names %}\n {{\", \" if not loop.first}}{% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}\n {%- endfor %}\n {%- else -%}\n {%- for column in column_names %}\n {% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}{{\",\" if not loop.last}}\n {%- endfor -%}\n {%- endif %}\n\n from source\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ log(base_model_sql, info=True) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6436822, "supported_languages": null }, "macro.codegen.generate_column_yaml": { "unique_id": "macro.codegen.generate_column_yaml", "package_name": "codegen", "root_path": "/tmp/jobs/137931897/target/dbt_packages/codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "name": "generate_column_yaml", "macro_sql": "{% macro generate_column_yaml(column, model_yaml, column_desc_dict, parent_column_name=\"\") %}\n {% if parent_column_name %}\n {% set column_name = parent_column_name ~ \".\" ~ column.name %}\n {% else %}\n {% set column_name = column.name %}\n {% endif %}\n\n {% do model_yaml.append(' - name: ' ~ column.name | lower ) %}\n {% do model_yaml.append(' description: \"' ~ column_desc_dict.get(column.name | lower,'') ~ '\"') %}\n {% do model_yaml.append('') %}\n\n {% if column.fields|length > 0 %}\n {% for child_column in column.fields %}\n {% set model_yaml = codegen.generate_column_yaml(child_column, model_yaml, column_desc_dict, parent_column_name=column_name) %}\n {% endfor %}\n {% endif %}\n {% do return(model_yaml) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.codegen.generate_column_yaml" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6477075, "supported_languages": null }, "macro.codegen.generate_model_yaml": { "unique_id": "macro.codegen.generate_model_yaml", "package_name": "codegen", "root_path": "/tmp/jobs/137931897/target/dbt_packages/codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "name": "generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_names=[], upstream_descriptions=False) %}\n\n {% set model_yaml=[] %}\n\n {% do model_yaml.append('version: 2') %}\n {% do model_yaml.append('') %}\n {% do model_yaml.append('models:') %}\n\n {% if model_names is string %}\n {{ exceptions.raise_compiler_error(\"The `model_names` argument must always be a list, even if there is only one model.\") }}\n {% else %}\n {% for model in model_names %}\n {% do model_yaml.append(' - name: ' ~ model | lower) %}\n {% do model_yaml.append(' description: \"\"') %}\n {% do model_yaml.append(' columns:') %}\n\n {% set relation=ref(model) %}\n {%- set columns = adapter.get_columns_in_relation(relation) -%}\n {% set column_desc_dict = codegen.build_dict_column_descriptions(model) if upstream_descriptions else {} %}\n\n {% for column in columns %}\n {% set model_yaml = codegen.generate_column_yaml(column, model_yaml, column_desc_dict) %}\n {% endfor %}\n {% endfor %}\n {% endif %}\n\n{% if execute %}\n\n {% set joined = model_yaml | join ('\\n') %}\n {{ log(joined, info=True) }}\n {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.codegen.build_dict_column_descriptions", "macro.codegen.generate_column_yaml" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6503987, "supported_languages": null }, "macro.codegen.get_tables_in_schema": { "unique_id": "macro.codegen.get_tables_in_schema", "package_name": "codegen", "root_path": "/tmp/jobs/137931897/target/dbt_packages/codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "name": "get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n \n {% set tables=dbt_utils.get_relations_by_pattern(\n schema_pattern=schema_name,\n database=database_name,\n table_pattern=table_pattern,\n exclude=exclude\n ) %}\n\n {% set table_list= tables | map(attribute='identifier') %}\n\n {{ return(table_list | sort) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.get_relations_by_pattern" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6539478, "supported_languages": null }, "macro.codegen.generate_source": { "unique_id": "macro.codegen.generate_source", "package_name": "codegen", "root_path": "/tmp/jobs/137931897/target/dbt_packages/codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "name": "generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, table_pattern='%', exclude='', name=schema_name, table_names=None) %}\n\n{% set sources_yaml=[] %}\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append(' - name: ' ~ name | lower) %}\n\n{% if include_descriptions %}\n {% do sources_yaml.append(' description: \"\"' ) %}\n{% endif %}\n\n{% if database_name != target.database %}\n{% do sources_yaml.append(' database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% if schema_name != name %}\n{% do sources_yaml.append(' schema: ' ~ schema_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append(' tables:') %}\n\n{% if table_names is none %}\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n{% else %}\n{% set tables = table_names %}\n{% endif %}\n\n{% for table in tables %}\n {% do sources_yaml.append(' - name: ' ~ table | lower ) %}\n {% if include_descriptions %}\n {% do sources_yaml.append(' description: \"\"' ) %}\n {% endif %}\n {% if generate_columns %}\n {% do sources_yaml.append(' columns:') %}\n\n {% set table_relation=api.Relation.create(\n database=database_name,\n schema=schema_name,\n identifier=table\n ) %}\n\n {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n {% for column in columns %}\n {% do sources_yaml.append(' - name: ' ~ column.name | lower ) %}\n {% if include_descriptions %}\n {% do sources_yaml.append(' description: \"\"' ) %}\n {% endif %}\n {% endfor %}\n {% do sources_yaml.append('') %}\n\n {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n {% set joined = sources_yaml | join ('\\n') %}\n {{ log(joined, info=True) }}\n {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.codegen.get_tables_in_schema" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6587424, "supported_languages": null }, "macro.codegen.generate_model_import_ctes": { "unique_id": "macro.codegen.generate_model_import_ctes", "package_name": "codegen", "root_path": "/tmp/jobs/137931897/target/dbt_packages/codegen", "path": "macros/generate_model_import_ctes.sql", "original_file_path": "macros/generate_model_import_ctes.sql", "name": "generate_model_import_ctes", "macro_sql": "{% macro generate_model_import_ctes(model_name, leading_commas = false) %}\n\n {%- if execute -%}\n {%- set nodes = graph.nodes.values() -%}\n\n {%- set model = (nodes\n | selectattr('name', 'equalto', model_name) \n | selectattr('resource_type', 'equalto', 'model')\n | list).pop() -%}\n\n {%- set model_raw_sql = model.raw_sql or model.raw_code -%}\n {%- else -%}\n {%- set model_raw_sql = '' -%}\n {%- endif -%}\n\n {#-\n\n REGEX Explanations\n\n # with_regex\n - matches (start of file followed by anything then whitespace\n or whitespace\n or a comma) followed by the word with then a space \n\n # from_ref \n - matches (from or join) followed by some spaces and then {{ref(<something>)}}\n\n # from_source \n - matches (from or join) followed by some spaces and then {{source(<something>,<something_else>)}}\n\n # from_var_1\n - matches (from or join) followed by some spaces and then {{var(<something>)}}\n\n # from_var_2\n - matches (from or join) followed by some spaces and then {{var(<something>,<something_else>)}}\n\n # from_table_1\n - matches (from or join) followed by some spaces and then <something>.<something_else>\n where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n # from_table_2\n - matches (from or join) followed by some spaces and then <something>.<something_else>.<something_different>\n where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n # from_table_3\n - matches (from or join) followed by some spaces and then <something>\n where <something> is enclosed by (` or [ or \" or ')\n\n # config block\n - matches the start of the file followed by anything and then {{config(<something>)}}\n\n -#}\n\n {%- set re = modules.re -%}\n\n {%- set with_regex = '(?i)(?s)(^.*\\s*|\\s+|,)with\\s' -%}\n {%- set does_raw_sql_contain_cte = re.search(with_regex, model_raw_sql) -%}\n\n {%- set from_regexes = {\n 'from_ref':'(?i)(from|join)\\s+({{\\s*ref\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n 'from_source':'(?i)(from|join)\\s+({{\\s*source\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(,)(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n 'from_var_1':'(?i)(from|join)\\s+({{\\s*var\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n 'from_var_2':'(?i)(from|join)\\s+({{\\s*var\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(,)(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n 'from_table_1':'(?i)(from|join)\\s+([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(\\.)([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(?=\\s|$)',\n 'from_table_2':'(?i)(from|join)\\s+([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(\\.)([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(\\.)([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(?=\\s|$)',\n 'from_table_3':'(?i)(from|join)\\s+([\\[`\\\"\\'])([\\w ]+)([\\]`\\\"\\'])(?=\\s|$)',\n 'config_block':'(?i)(?s)^.*{{\\s*config\\s*\\([^)]+\\)\\s*}}'\n } -%}\n\n {%- set from_list = [] -%}\n {%- set config_list = [] -%}\n {%- set ns = namespace(model_sql = model_raw_sql) -%}\n\n {%- for regex_name, regex_pattern in from_regexes.items() -%}\n\n {%- set all_regex_matches = re.findall(regex_pattern, model_raw_sql) -%}\n\n {%- for match in all_regex_matches -%}\n\n {%- if regex_name == 'config_block' -%}\n {%- set match_tuple = (match|trim, regex_name) -%}\n {%- do config_list.append(match_tuple) -%}\n {%- elif regex_name == 'from_source' -%} \n {%- set full_from_clause = match[1:]|join|trim -%}\n {%- set cte_name = 'source_' + match[6]|lower -%}\n {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n {%- do from_list.append(match_tuple) -%} \n {%- elif regex_name == 'from_table_1' -%}\n {%- set full_from_clause = match[1:]|join()|trim -%}\n {%- set cte_name = match[2]|lower + '_' + match[6]|lower -%}\n {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n {%- do from_list.append(match_tuple) -%} \n {%- elif regex_name == 'from_table_2' -%}\n {%- set full_from_clause = match[1:]|join()|trim -%}\n {%- set cte_name = match[2]|lower + '_' + match[6]|lower + '_' + match[10]|lower -%}\n {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n {%- do from_list.append(match_tuple) -%} \n {%- else -%}\n {%- set full_from_clause = match[1:]|join|trim -%}\n {%- set cte_name = match[2]|trim|lower -%}\n {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n {%- do from_list.append(match_tuple) -%}\n {%- endif -%}\n\n {%- endfor -%}\n\n {%- if regex_name == 'config_block' -%}\n {%- elif regex_name == 'from_source' -%}\n {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> source_\\g<7>', ns.model_sql) -%} \n {%- elif regex_name == 'from_table_1' -%}\n {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>', ns.model_sql) -%} \n {%- elif regex_name == 'from_table_2' -%}\n {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>_\\g<11>', ns.model_sql) -%} \n {%- else -%} \n {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>', ns.model_sql) -%} \n {% endif %}\n\n {%- endfor -%}\n\n{%- if from_list|length > 0 -%}\n\n{%- set model_import_ctes -%}\n\n {%- for config_obj in config_list -%}\n\n {%- set ns.model_sql = ns.model_sql|replace(config_obj[0], '') -%}\n\n{{ config_obj[0] }}\n\n{% endfor -%}\n\n {%- for from_obj in from_list|unique|sort -%}\n\n{%- if loop.first -%}with {% else -%}{%- if leading_commas -%},{%- endif -%}{%- endif -%}{{ from_obj[0] }} as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ from_obj[1] }}\n {%- if from_obj[2] == 'from_source' and from_list|length > 1 %} \n -- CAUTION: It's best practice to create staging layer for raw sources\n {%- elif from_obj[2] == 'from_table_1' or from_obj[2] == 'from_table_2' or from_obj[2] == 'from_table_3' %}\n -- CAUTION: It's best practice to use the ref or source function instead of a direct reference\n {%- elif from_obj[2] == 'from_var_1' or from_obj[2] == 'from_var_2' %}\n -- CAUTION: It's best practice to use the ref or source function instead of a var\n {%- endif %}\n \n){%- if ((loop.last and does_raw_sql_contain_cte) or (not loop.last)) and not leading_commas -%},{%- endif %}\n\n{% endfor -%}\n\n{%- if does_raw_sql_contain_cte -%}\n {%- if leading_commas -%}\n {%- set replace_with = '\\g<1>,' -%}\n {%- else -%}\n {%- set replace_with = '\\g<1>' -%}\n {%- endif -%}\n{{ re.sub(with_regex, replace_with, ns.model_sql, 1)|trim }}\n{%- else -%}\n{{ ns.model_sql|trim }}\n{%- endif -%}\n\n{%- endset -%}\n\n{%- else -%}\n\n{% set model_import_ctes = model_raw_sql %}\n\n{%- endif -%}\n\n{%- if execute -%}\n\n{{ log(model_import_ctes, info=True) }}\n{% do return(model_import_ctes) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6780577, "supported_languages": null }, "macro.codegen.get_model_dependencies": { "unique_id": "macro.codegen.get_model_dependencies", "package_name": "codegen", "root_path": "/tmp/jobs/137931897/target/dbt_packages/codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "name": "get_model_dependencies", "macro_sql": "{% macro get_model_dependencies(model_name) %}\n {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n {{ return(node.depends_on.nodes) }}\n {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6796439, "supported_languages": null }, "macro.codegen.add_model_column_descriptions_to_dict": { "unique_id": "macro.codegen.add_model_column_descriptions_to_dict", "package_name": "codegen", "root_path": "/tmp/jobs/137931897/target/dbt_packages/codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "name": "add_model_column_descriptions_to_dict", "macro_sql": "{% macro add_model_column_descriptions_to_dict(model_name,dict_with_descriptions={}) %}\n {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n {% for col_name, col_values in node.columns.items() %}\n {% do dict_with_descriptions.update( {col_name: col_values.description} ) %}\n {% endfor %}\n {% endfor %}\n {{ return(dict_with_descriptions) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6806464, "supported_languages": null }, "macro.codegen.build_dict_column_descriptions": { "unique_id": "macro.codegen.build_dict_column_descriptions", "package_name": "codegen", "root_path": "/tmp/jobs/137931897/target/dbt_packages/codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "name": "build_dict_column_descriptions", "macro_sql": "{% macro build_dict_column_descriptions(model_name) %}\n {% if execute %}\n {% set glob_dict = {} %}\n {% for full_model in codegen.get_model_dependencies(model_name) %}\n {% do codegen.add_model_column_descriptions_to_dict(full_model.split('.')[-1],glob_dict) %}\n {% endfor %}\n {{ return(glob_dict) }}\n {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.codegen.get_model_dependencies", "macro.codegen.add_model_column_descriptions_to_dict" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6815584, "supported_languages": null }, "macro.dbt_utils.test_not_empty_string": { "unique_id": "macro.dbt_utils.test_not_empty_string", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "name": "test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__test_not_empty_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6828358, "supported_languages": null }, "macro.dbt_utils.default__test_not_empty_string": { "unique_id": "macro.dbt_utils.default__test_not_empty_string", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "name": "default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n with\n \n all_values as (\n\n select \n\n\n {% if trim_whitespace == true -%}\n\n trim({{ column_name }}) as {{ column_name }}\n\n {%- else -%}\n\n {{ column_name }}\n\n {%- endif %}\n \n from {{ model }}\n\n ),\n\n errors as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from all_values\n where {{ column_name }} = ''\n\n )\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6835005, "supported_languages": null }, "macro.dbt_utils.test_equal_rowcount": { "unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__test_equal_rowcount" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.685208, "supported_languages": null }, "macro.dbt_utils.default__test_equal_rowcount": { "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n {% set join_gb_cols %}\n {% for c in group_by_columns %}\n and a.{{c}} = b.{{c}}\n {% endfor %}\n {% endset %}\n {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n select \n {{select_gb_cols}}\n 1 as id_dbtutils_test_equal_rowcount,\n count(*) as count_a \n from {{ model }}\n {{groupby_gb_cols}}\n\n\n),\nb as (\n\n select \n {{select_gb_cols}}\n 1 as id_dbtutils_test_equal_rowcount,\n count(*) as count_b \n from {{ compare_model }}\n {{groupby_gb_cols}}\n\n),\nfinal as (\n\n select\n \n {% for c in group_by_columns -%}\n a.{{c}} as {{c}}_a,\n b.{{c}} as {{c}}_b,\n {% endfor %}\n\n count_a,\n count_b,\n abs(count_a - count_b) as diff_count\n\n from a\n full join b\n on\n a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n {{join_gb_cols}}\n\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6874957, "supported_languages": null }, "macro.dbt_utils.test_not_constant": { "unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__test_not_constant" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6886058, "supported_languages": null }, "macro.dbt_utils.default__test_not_constant": { "unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n {# In TSQL, subquery aggregate columns need aliases #}\n {# thus: a filler col name, 'filler_column' #}\n {{select_gb_cols}}\n count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.689561, "supported_languages": null }, "macro.dbt_utils.test_at_least_one": { "unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__test_at_least_one" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.690718, "supported_languages": null }, "macro.dbt_utils.default__test_at_least_one": { "unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n select\n {# In TSQL, subquery aggregate columns need aliases #}\n {# thus: a filler col name, 'filler_column' #}\n {{select_gb_cols}}\n count({{ column_name }}) as filler_column\n\n from {{ model }}\n\n {{groupby_gb_cols}}\n\n having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6917272, "supported_languages": null }, "macro.dbt_utils.test_equality": { "unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__test_equality" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6933112, "supported_languages": null }, "macro.dbt_utils.default__test_equality": { "unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n count(*) + coalesce(abs(\n sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema — this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ model }}\n\n),\n\nb as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n select {{compare_cols_csv}} from a\n {{ dbt.except() }}\n select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n select {{compare_cols_csv}} from b\n {{ dbt.except() }}\n select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n union all\n select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.695216, "supported_languages": null }, "macro.dbt_utils.test_relationships_where": { "unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__test_relationships_where" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6966364, "supported_languages": null }, "macro.dbt_utils.default__test_relationships_where": { "unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n select\n {{column_name}} as id\n\n from {{model}}\n\n where {{column_name}} is not null\n and {{from_condition}}\n\n),\n\nright_table as (\n\n select\n {{field}} as id\n\n from {{to}}\n\n where {{field}} is not null\n and {{to_condition}}\n\n),\n\nexceptions as (\n\n select\n left_table.id,\n right_table.id as right_id\n\n from left_table\n\n left join right_table\n on left_table.id = right_table.id\n\n where right_table.id is null\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6973395, "supported_languages": null }, "macro.dbt_utils.test_accepted_range": { "unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__test_accepted_range" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6987472, "supported_languages": null }, "macro.dbt_utils.default__test_accepted_range": { "unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n select *\n from {{ model }}\n),\n\nvalidation_errors as (\n select *\n from meet_condition\n where\n -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n 1 = 2\n\n {%- if min_value is not none %}\n -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n {%- endif %}\n\n {%- if max_value is not none %}\n -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.6997752, "supported_languages": null }, "macro.dbt_utils.test_cardinality_equality": { "unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__test_cardinality_equality" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7009728, "supported_languages": null }, "macro.dbt_utils.default__test_cardinality_equality": { "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n {{ column_name }},\n count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n {{ field }},\n count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n select *\n from table_a\n {{ dbt.except() }}\n select *\n from table_b\n),\n\nexcept_b as (\n select *\n from table_b\n {{ dbt.except() }}\n select *\n from table_a\n),\n\nunioned as (\n select *\n from except_a\n union all\n select *\n from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.except" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.701686, "supported_languages": null }, "macro.dbt_utils.test_unique_combination_of_columns": { "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__test_unique_combination_of_columns" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.703101, "supported_languages": null }, "macro.dbt_utils.default__test_unique_combination_of_columns": { "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n {%- set column_list=[] %}\n {% for column in combination_of_columns -%}\n {% set column_list = column_list.append( adapter.quote(column) ) %}\n {%- endfor %}\n{% else %}\n {{ exceptions.raise_compiler_error(\n \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n select\n {{ columns_csv }}\n from {{ model }}\n group by {{ columns_csv }}\n having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7046676, "supported_languages": null }, "macro.dbt_utils.test_expression_is_true": { "unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__test_expression_is_true" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.705696, "supported_languages": null }, "macro.dbt_utils.default__test_expression_is_true": { "unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.should_store_failures" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.706456, "supported_languages": null }, "macro.dbt_utils.test_mutually_exclusive_ranges": { "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__test_mutually_exclusive_ranges" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7118425, "supported_languages": null }, "macro.dbt_utils.default__test_mutually_exclusive_ranges": { "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n {% set allow_gaps_operator='=' %}\n {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n {% set allow_gaps_operator='<=' %}\n {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n {% set allow_gaps_operator='<' %}\n {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n {{ exceptions.raise_compiler_error(\n \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n {% set allow_zero_length_operator='<' %}\n {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n {% set allow_zero_length_operator='<=' %}\n {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n {{ exceptions.raise_compiler_error(\n \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n select\n {% if partition_by %}\n {{ partition_by }} as partition_by_col,\n {% endif %}\n {{ lower_bound_column }} as lower_bound,\n {{ upper_bound_column }} as upper_bound,\n\n lead({{ lower_bound_column }}) over (\n {{ partition_clause }}\n order by {{ lower_bound_column }}, {{ upper_bound_column }}\n ) as next_lower_bound,\n\n row_number() over (\n {{ partition_clause }}\n order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n ) = 1 as is_last_record\n\n from {{ model }}\n\n),\n\ncalc as (\n -- We want to return records where one of our assumptions fails, so we'll use\n -- the `not` function with `and` statements so we can write our assumptions more cleanly\n select\n *,\n\n -- For each record: lower_bound should be < upper_bound.\n -- Coalesce it to return an error on the null case (implicit assumption\n -- these columns are not_null)\n coalesce(\n lower_bound {{ allow_zero_length_operator }} upper_bound,\n false\n ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n -- Coalesce it to handle null cases for the last record.\n coalesce(\n upper_bound {{ allow_gaps_operator }} next_lower_bound,\n is_last_record,\n false\n ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n from window_functions\n\n),\n\nvalidation_errors as (\n\n select\n *\n from calc\n\n where not(\n -- THE FOLLOWING SHOULD BE TRUE --\n lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n )\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.715006, "supported_languages": null }, "macro.dbt_utils.test_fewer_rows_than": { "unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__test_fewer_rows_than" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.717028, "supported_languages": null }, "macro.dbt_utils.default__test_fewer_rows_than": { "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n {% set join_gb_cols %}\n {% for c in group_by_columns %}\n and a.{{c}} = b.{{c}}\n {% endfor %}\n {% endset %}\n {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n select \n {{select_gb_cols}}\n 1 as id_dbtutils_test_fewer_rows_than,\n count(*) as count_our_model \n from {{ model }}\n {{ groupby_gb_cols }}\n\n),\nb as (\n\n select \n {{select_gb_cols}}\n 1 as id_dbtutils_test_fewer_rows_than,\n count(*) as count_comparison_model \n from {{ compare_model }}\n {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n select\n\n {% for c in group_by_columns -%}\n a.{{c}} as {{c}}_a,\n b.{{c}} as {{c}}_b,\n {% endfor %}\n\n count_our_model,\n count_comparison_model\n from a\n full join b on \n a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n {{ join_gb_cols }}\n\n),\nfinal as (\n\n select *,\n case\n -- fail the test if we have more rows than the reference model and return the row count delta\n when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n -- fail the test if they are the same number\n when count_our_model = count_comparison_model then 1\n -- pass the test if the delta is positive (i.e. return the number 0)\n else 0\n end as row_count_delta\n from counts\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7191756, "supported_languages": null }, "macro.dbt_utils.test_not_accepted_values": { "unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__test_not_accepted_values" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7204301, "supported_languages": null }, "macro.dbt_utils.default__test_not_accepted_values": { "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n select distinct\n {{ column_name }} as value_field\n\n from {{ model }}\n\n),\n\nvalidation_errors as (\n\n select\n value_field\n\n from all_values\n where value_field in (\n {% for value in values -%}\n {% if quote -%}\n '{{ value }}'\n {%- else -%}\n {{ value }}\n {%- endif -%}\n {%- if not loop.last -%},{%- endif %}\n {%- endfor %}\n )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7212417, "supported_languages": null }, "macro.dbt_utils.test_sequential_values": { "unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__test_sequential_values" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7230566, "supported_languages": null }, "macro.dbt_utils.default__test_sequential_values": { "unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n select\n {{ select_gb_cols }}\n {{ column_name }},\n lag({{ column_name }}) over (\n {{partition_gb_cols}}\n order by {{ column_name }}\n ) as {{ previous_column_name }}\n from {{ model }}\n),\n\nvalidation_errors as (\n select\n *\n from windowed\n {% if datepart %}\n where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n {% else %}\n where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7249453, "supported_languages": null }, "macro.dbt_utils.test_recency": { "unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__test_recency" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7265105, "supported_languages": null }, "macro.dbt_utils.default__test_recency": { "unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')' %}\n\n{% if group_by_columns|length() > 0 %}\n {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n select \n\n {{ select_gb_cols }}\n {% if ignore_time_component %}\n cast(max({{ field }}) as date) as most_recent\n {%- else %}\n max({{ field }}) as most_recent\n {%- endif %}\n\n from {{ model }}\n\n {{ groupby_gb_cols }}\n\n)\n\nselect\n\n {{ select_gb_cols }}\n most_recent,\n {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7282796, "supported_languages": null }, "macro.dbt_utils.test_not_null_proportion": { "unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__test_not_null_proportion" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7296543, "supported_languages": null }, "macro.dbt_utils.default__test_not_null_proportion": { "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n select\n {{select_gb_cols}}\n sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n from {{ model }}\n {{groupby_gb_cols}}\n),\nvalidation_errors as (\n select\n {{select_gb_cols}}\n not_null_proportion\n from validation\n where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7313874, "supported_languages": null }, "macro.dbt_utils.slugify": { "unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.732885, "supported_languages": null }, "macro.dbt_utils.pretty_time": { "unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__pretty_time" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7336843, "supported_languages": null }, "macro.dbt_utils.default__pretty_time": { "unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7340977, "supported_languages": null }, "macro.dbt_utils._is_relation": { "unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7352884, "supported_languages": null }, "macro.dbt_utils.pretty_log_format": { "unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__pretty_log_format" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7360933, "supported_languages": null }, "macro.dbt_utils.default__pretty_log_format": { "unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.pretty_time" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7364514, "supported_languages": null }, "macro.dbt_utils.log_info": { "unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__log_info" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7372084, "supported_languages": null }, "macro.dbt_utils.default__log_info": { "unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.pretty_log_format" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.73775, "supported_languages": null }, "macro.dbt_utils._is_ephemeral": { "unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n {%- if obj.is_cte -%}\n {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n {% if obj.name.startswith(ephemeral_prefix) %}\n {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n {% else %}\n {% set model_name = obj.name %}\n {%- endif -%}\n {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n {% endset %}\n {%- do exceptions.raise_compiler_error(error_message) -%}\n {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7396524, "supported_languages": null }, "macro.dbt_utils.unpivot": { "unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__unpivot" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.74202, "supported_languages": null }, "macro.dbt_utils.default__unpivot": { "unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n {% if not relation %}\n {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n {% endif %}\n\n {%- set exclude = exclude if exclude is not none else [] %}\n {%- set remove = remove if remove is not none else [] %}\n\n {%- set include_cols = [] %}\n\n {%- set table_columns = {} %}\n\n {%- do table_columns.update({relation: []}) %}\n\n {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n {%- for col in cols -%}\n {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n {% do include_cols.append(col) %}\n {%- endif %}\n {%- endfor %}\n\n\n {%- for col in include_cols -%}\n select\n {%- for exclude_col in exclude %}\n {{ exclude_col }},\n {%- endfor %}\n\n cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n cast( {% if col.data_type == 'boolean' %}\n {{ dbt.cast_bool_to_text(col.column) }}\n {% else %}\n {{ col.column }}\n {% endif %}\n as {{ cast_to }}) as {{ value_name }}\n\n from {{ relation }}\n\n {% if not loop.last -%}\n union all\n {% endif -%}\n {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7452679, "supported_languages": null }, "macro.dbt_utils.get_relations_by_pattern": { "unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__get_relations_by_pattern" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7467628, "supported_languages": null }, "macro.dbt_utils.default__get_relations_by_pattern": { "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n {%- call statement('get_tables', fetch_result=True) %}\n\n {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n {%- endcall -%}\n\n {%- set table_list = load_result('get_tables') -%}\n\n {%- if table_list and table_list['table'] -%}\n {%- set tbl_relations = [] -%}\n {%- for row in table_list['table'] -%}\n {%- set tbl_relation = api.Relation.create(\n database=database,\n schema=row.table_schema,\n identifier=row.table_name,\n type=row.table_type\n ) -%}\n {%- do tbl_relations.append(tbl_relation) -%}\n {%- endfor -%}\n\n {{ return(tbl_relations) }}\n {%- else -%}\n {{ return([]) }}\n {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.748518, "supported_languages": null }, "macro.dbt_utils.get_tables_by_prefix_sql": { "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__get_tables_by_prefix_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7495496, "supported_languages": null }, "macro.dbt_utils.default__get_tables_by_prefix_sql": { "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n {{ dbt_utils.get_tables_by_pattern_sql(\n schema_pattern = schema,\n table_pattern = prefix ~ '%',\n exclude = exclude,\n database = database\n ) }}\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.get_tables_by_pattern_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7501385, "supported_languages": null }, "macro.dbt_utils.union_relations": { "unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__union_relations" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7550497, "supported_languages": null }, "macro.dbt_utils.default__union_relations": { "unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n {%- if exclude and include -%}\n {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n {%- endif -%}\n\n {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n {%- if not execute %}\n {{ return('') }}\n {% endif -%}\n\n {%- set column_override = column_override if column_override is not none else {} -%}\n\n {%- set relation_columns = {} -%}\n {%- set column_superset = {} -%}\n {%- set all_excludes = [] -%}\n {%- set all_includes = [] -%}\n\n {%- if exclude -%}\n {%- for exc in exclude -%}\n {%- do all_excludes.append(exc | lower) -%}\n {%- endfor -%}\n {%- endif -%}\n\n {%- if include -%}\n {%- for inc in include -%}\n {%- do all_includes.append(inc | lower) -%}\n {%- endfor -%}\n {%- endif -%}\n\n {%- for relation in relations -%}\n\n {%- do relation_columns.update({relation: []}) -%}\n\n {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n {%- set cols = adapter.get_columns_in_relation(relation) -%}\n {%- for col in cols -%}\n\n {#- If an exclude list was provided and the column is in the list, do nothing -#}\n {%- if exclude and col.column | lower in all_excludes -%}\n\n {#- If an include list was provided and the column is not in the list, do nothing -#}\n {%- elif include and col.column | lower not in all_includes -%}\n\n {#- Otherwise add the column to the column superset -#}\n {%- else -%}\n\n {#- update the list of columns in this relation -#}\n {%- do relation_columns[relation].append(col.column) -%}\n\n {%- if col.column in column_superset -%}\n\n {%- set stored = column_superset[col.column] -%}\n {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n {%- do column_superset.update({col.column: col}) -%}\n\n {%- endif %}\n\n {%- else -%}\n\n {%- do column_superset.update({col.column: col}) -%}\n\n {%- endif -%}\n\n {%- endif -%}\n\n {%- endfor -%}\n {%- endfor -%}\n\n {%- set ordered_column_names = column_superset.keys() -%}\n {%- set dbt_command = flags.WHICH -%}\n\n\n {% if dbt_command in ['run', 'build'] %}\n {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n {%- set relations_string -%}\n {%- for relation in relations -%}\n {{ relation.name }}\n {%- if not loop.last %}, {% endif -%}\n {%- endfor -%}\n {%- endset -%}\n\n {%- set error_message -%}\n There were no columns found to union for relations {{ relations_string }}\n {%- endset -%}\n\n {{ exceptions.raise_compiler_error(error_message) }}\n {%- endif -%}\n {%- endif -%}\n\n {%- for relation in relations %}\n\n (\n select\n\n {%- if source_column_name is not none %}\n cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n {%- endif %}\n\n {% for col_name in ordered_column_names -%}\n\n {%- set col = column_superset[col_name] %}\n {%- set col_type = column_override.get(col.column, col.data_type) %}\n {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n {%- endfor %}\n\n from {{ relation }}\n\n {% if where -%}\n where {{ where }}\n {%- endif %}\n )\n\n {% if not loop.last -%}\n union all\n {% endif -%}\n\n {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.762098, "supported_languages": null }, "macro.dbt_utils.get_filtered_columns_in_relation": { "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__get_filtered_columns_in_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7633114, "supported_languages": null }, "macro.dbt_utils.default__get_filtered_columns_in_relation": { "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n {%- if not execute -%}\n {{ return('') }}\n {% endif %}\n\n {%- set include_cols = [] %}\n {%- set cols = adapter.get_columns_in_relation(from) -%}\n {%- set except = except | map(\"lower\") | list %}\n {%- for col in cols -%}\n {%- if col.column|lower not in except -%}\n {% do include_cols.append(col.column) %}\n {%- endif %}\n {%- endfor %}\n\n {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.764805, "supported_languages": null }, "macro.dbt_utils.generate_surrogate_key": { "unique_id": "macro.dbt_utils.generate_surrogate_key", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "name": "generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__generate_surrogate_key" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7658887, "supported_languages": null }, "macro.dbt_utils.default__generate_surrogate_key": { "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "name": "default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\n {% set default_null_value = \"\" %}\n{% else %}\n {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\n{% endif %}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n {%- do fields.append(\n \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value ~\"')\"\n ) -%}\n\n {%- if not loop.last %}\n {%- do fields.append(\"'-'\") -%}\n {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7673194, "supported_languages": null }, "macro.dbt_utils.pivot": { "unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n values,\n alias=True,\n agg='sum',\n cmp='=',\n prefix='',\n suffix='',\n then_value=1,\n else_value=0,\n quote_identifiers=True,\n distinct=False) %}\n {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__pivot" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7693918, "supported_languages": null }, "macro.dbt_utils.default__pivot": { "unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n values,\n alias=True,\n agg='sum',\n cmp='=',\n prefix='',\n suffix='',\n then_value=1,\n else_value=0,\n quote_identifiers=True,\n distinct=False) %}\n {% for value in values %}\n {{ agg }}(\n {% if distinct %} distinct {% endif %}\n case\n when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n then {{ then_value }}\n else {{ else_value }}\n end\n )\n {% if alias %}\n {% if quote_identifiers %}\n as {{ adapter.quote(prefix ~ value ~ suffix) }}\n {% else %}\n as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n {% endif %}\n {% endif %}\n {% if not loop.last %},{% endif %}\n {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7711694, "supported_languages": null }, "macro.dbt_utils.get_intervals_between": { "unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__get_intervals_between" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7726629, "supported_languages": null }, "macro.dbt_utils.default__get_intervals_between": { "unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n {%- call statement('get_intervals_between', fetch_result=True) %}\n\n select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n {%- endcall -%}\n\n {%- set value_list = load_result('get_intervals_between') -%}\n\n {%- if value_list and value_list['data'] -%}\n {%- set values = value_list['data'] | map(attribute=0) | list %}\n {{ return(values[0]) }}\n {%- else -%}\n {{ return(1) }}\n {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.statement", "macro.dbt.datediff" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7738743, "supported_languages": null }, "macro.dbt_utils.date_spine": { "unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__date_spine" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.774354, "supported_languages": null }, "macro.dbt_utils.default__date_spine": { "unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n \"day\",\n \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n {{dbt_utils.generate_series(\n dbt_utils.get_intervals_between(start_date, end_date, datepart)\n )}}\n\n),\n\nall_periods as (\n\n select (\n {{\n dbt.dateadd(\n datepart,\n \"row_number() over (order by 1) - 1\",\n start_date\n )\n }}\n ) as date_{{datepart}}\n from rawdata\n\n),\n\nfiltered as (\n\n select *\n from all_periods\n where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.775159, "supported_languages": null }, "macro.dbt_utils.nullcheck": { "unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__nullcheck" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7760887, "supported_languages": null }, "macro.dbt_utils.default__nullcheck": { "unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n {% if col.is_string() -%}\n\n nullif({{col.name}},'') as {{col.name}}\n\n {%- else -%}\n\n {{col.name}}\n\n {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7767944, "supported_languages": null }, "macro.dbt_utils.get_query_results_as_dict": { "unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__get_query_results_as_dict" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7777627, "supported_languages": null }, "macro.dbt_utils.default__get_query_results_as_dict": { "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n {{ query }}\n\n {%- endcall -%}\n\n {% set sql_results={} %}\n\n {%- if execute -%}\n {% set sql_results_table = load_result('get_query_results').table.columns %}\n {% for column_name, column in sql_results_table.items() %}\n {% do sql_results.update({column_name: column.values()}) %}\n {% endfor %}\n {%- endif -%}\n\n {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.779041, "supported_languages": null }, "macro.dbt_utils.safe_divide": { "unique_id": "macro.dbt_utils.safe_divide", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "name": "safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__safe_divide" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.779934, "supported_languages": null }, "macro.dbt_utils.default__safe_divide": { "unique_id": "macro.dbt_utils.default__safe_divide", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "name": "default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7802296, "supported_languages": null }, "macro.dbt_utils.get_table_types_sql": { "unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__get_table_types_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7811604, "supported_languages": null }, "macro.dbt_utils.default__get_table_types_sql": { "unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n case table_type\n when 'BASE TABLE' then 'table'\n when 'EXTERNAL TABLE' then 'external'\n when 'MATERIALIZED VIEW' then 'materializedview'\n else lower(table_type)\n end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7814672, "supported_languages": null }, "macro.dbt_utils.postgres__get_table_types_sql": { "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n case table_type\n when 'BASE TABLE' then 'table'\n when 'FOREIGN' then 'external'\n when 'MATERIALIZED VIEW' then 'materializedview'\n else lower(table_type)\n end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7817638, "supported_languages": null }, "macro.dbt_utils.get_tables_by_pattern_sql": { "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__get_tables_by_pattern_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7846575, "supported_languages": null }, "macro.dbt_utils.default__get_tables_by_pattern_sql": { "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n select distinct\n table_schema as {{ adapter.quote('table_schema') }},\n table_name as {{ adapter.quote('table_name') }},\n {{ dbt_utils.get_table_types_sql() }}\n from {{ database }}.information_schema.tables\n where table_schema ilike '{{ schema_pattern }}'\n and table_name ilike '{{ table_pattern }}'\n and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.get_table_types_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7855546, "supported_languages": null }, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": { "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n {% if '%' in schema_pattern %}\n {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n {% else %}\n {% set schemata=[schema_pattern] %}\n {% endif %}\n\n {% set sql %}\n {% for schema in schemata %}\n select distinct\n table_schema,\n table_name,\n {{ dbt_utils.get_table_types_sql() }}\n\n from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n where lower(table_name) like lower ('{{ table_pattern }}')\n and lower(table_name) not like lower ('{{ exclude }}')\n\n {% if not loop.last %} union all {% endif %}\n\n {% endfor %}\n {% endset %}\n\n {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.787083, "supported_languages": null }, "macro.dbt_utils._bigquery__get_matching_schemata": { "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n {% if execute %}\n\n {% set sql %}\n select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n where lower(schema_name) like lower('{{ schema_pattern }}')\n {% endset %}\n\n {% set results=run_query(sql) %}\n\n {% set schemata=results.columns['schema_name'].values() %}\n\n {{ return(schemata) }}\n\n {% else %}\n\n {{ return([]) }}\n\n {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7881644, "supported_languages": null }, "macro.dbt_utils.degrees_to_radians": { "unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n acos(-1) README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7901225, "supported_languages": null }, "macro.dbt_utils.haversine_distance": { "unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__haversine_distance" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7907472, "supported_languages": null }, "macro.dbt_utils.default__haversine_distance": { "unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n {% set conversion_rate = 1.60934 %}\n{% else %}\n {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n 2 README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests 3961 README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n cos(radians({{lat1}})) README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests cos(radians({{lat2}})) *\n power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.791965, "supported_languages": null }, "macro.dbt_utils.bigquery__haversine_distance": { "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n {% set conversion_rate = 1.60934 %}\n{% else %}\n {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n 2 README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests 3961 README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n cos({{ radians_lat1 }}) README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests cos({{ radians_lat2 }}) *\n power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.degrees_to_radians" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7936132, "supported_languages": null }, "macro.dbt_utils.deduplicate": { "unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.snowflake__deduplicate" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.79517, "supported_languages": null }, "macro.dbt_utils.default__deduplicate": { "unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n with row_numbered as (\n select\n _inner.*,\n row_number() over (\n partition by {{ partition_by }}\n order by {{ order_by }}\n ) as rn\n from {{ relation }} as _inner\n )\n\n select\n distinct data.*\n from {{ relation }} as data\n {#\n -- Not all DBs will support natural joins but the ones that do include:\n -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n -- Apache Spark, SingleStore, Vertica\n -- Those that do not appear to support natural joins include:\n -- SQLServer, Trino, Presto, Rockset, Athena\n #}\n natural join row_numbered\n where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.795642, "supported_languages": null }, "macro.dbt_utils.redshift__deduplicate": { "unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__deduplicate" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.796071, "supported_languages": null }, "macro.dbt_utils.postgres__deduplicate": { "unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n select\n distinct on ({{ partition_by }}) *\n from {{ relation }}\n order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7964756, "supported_languages": null }, "macro.dbt_utils.snowflake__deduplicate": { "unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n select *\n from {{ relation }}\n qualify\n row_number() over (\n partition by {{ partition_by }}\n order by {{ order_by }}\n ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7968352, "supported_languages": null }, "macro.dbt_utils.bigquery__deduplicate": { "unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n select unique.*\n from (\n select\n array_agg (\n original\n order by {{ order_by }}\n limit 1\n )[offset(0)] unique\n from {{ relation }} original\n group by {{ partition_by }}\n )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7972023, "supported_languages": null }, "macro.dbt_utils.group_by": { "unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__group_by" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.797997, "supported_languages": null }, "macro.dbt_utils.default__group_by": { "unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n group by {% for i in range(1, n + 1) -%}\n {{ i }}{{ ',' if not loop.last }} \n {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.7985756, "supported_languages": null }, "macro.dbt_utils.width_bucket": { "unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.snowflake__width_bucket" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.80101, "supported_languages": null }, "macro.dbt_utils.default__width_bucket": { "unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n {% set bin_size -%}\n (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n {%- endset %}\n (\n -- to break ties when the amount is eaxtly at the bucket egde\n case\n when\n mod(\n {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n ) = 0\n then 1\n else 0\n end\n ) +\n -- Anything over max_value goes the N+1 bucket\n least(\n ceil(\n ({{ expr }} - {{ min_value }})/{{ bin_size }}\n ),\n {{ num_buckets }} + 1\n )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.safe_cast", "macro.dbt.type_numeric" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8019674, "supported_languages": null }, "macro.dbt_utils.redshift__width_bucket": { "unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n {% set bin_size -%}\n (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n {%- endset %}\n (\n -- to break ties when the amount is exactly at the bucket edge\n case\n when\n {{ dbt.safe_cast(expr, dbt.type_numeric() ) }} %\n {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n = 0\n then 1\n else 0\n end\n ) +\n -- Anything over max_value goes the N+1 bucket\n least(\n ceil(\n ({{ expr }} - {{ min_value }})/{{ bin_size }}\n ),\n {{ num_buckets }} + 1\n )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.safe_cast", "macro.dbt.type_numeric" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8029914, "supported_languages": null }, "macro.dbt_utils.snowflake__width_bucket": { "unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8034127, "supported_languages": null }, "macro.dbt_utils.surrogate_key": { "unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n {% set frustrating_jinja_feature = varargs %}\n {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__surrogate_key" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8044293, "supported_languages": null }, "macro.dbt_utils.default__surrogate_key": { "unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8049304, "supported_languages": null }, "macro.dbt_utils.nullcheck_table": { "unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__nullcheck_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8057764, "supported_languages": null }, "macro.dbt_utils.default__nullcheck_table": { "unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n {% set cols = adapter.get_columns_in_relation(relation) %}\n\n select {{ dbt_utils.nullcheck(cols) }}\n from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8065226, "supported_languages": null }, "macro.dbt_utils.get_powers_of_two": { "unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__get_powers_of_two" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8082376, "supported_languages": null }, "macro.dbt_utils.default__get_powers_of_two": { "unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n {% if upper_bound <= 0 %}\n {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n {% endif %}\n\n {% for _ in range(1, 100) %}\n {% if upper_bound <= 2 README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests loop.index %}{{ return(loop.index) }}{% endif %}\n {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8093147, "supported_languages": null }, "macro.dbt_utils.generate_series": { "unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__generate_series" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8097153, "supported_languages": null }, "macro.dbt_utils.default__generate_series": { "unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n with p as (\n select 0 as generated_number union all select 1\n ), unioned as (\n\n select\n\n {% for i in range(n) %}\n p{{i}}.generated_number README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests power(2, {{i}})\n {% if not loop.last %} + {% endif %}\n {% endfor %}\n + 1\n as generated_number\n\n from\n\n {% for i in range(n) %}\n p as p{{i}}\n {% if not loop.last %} cross join {% endif %}\n {% endfor %}\n\n )\n\n select *\n from unioned\n where generated_number <= {{upper_bound}}\n order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.get_powers_of_two" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8108368, "supported_languages": null }, "macro.dbt_utils.safe_add": { "unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__safe_add" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8118384, "supported_languages": null }, "macro.dbt_utils.default__safe_add": { "unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.812958, "supported_languages": null }, "macro.dbt_utils.get_column_values": { "unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__get_column_values" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8151367, "supported_languages": null }, "macro.dbt_utils.default__get_column_values": { "unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n {%- if not execute -%}\n {% set default = [] if not default %}\n {{ return(default) }}\n {% endif %}\n\n {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n {# TODO: Change the method signature in a future 0.x.0 release #}\n {%- set target_relation = table -%}\n\n {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n {%- call statement('get_column_values', fetch_result=true) %}\n\n {%- if not relation_exists and default is none -%}\n\n {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n {%- elif not relation_exists and default is not none -%}\n\n {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n {{ return(default) }}\n\n {%- else -%}\n\n\n select\n {{ column }} as value\n\n from {{ target_relation }}\n\n {% if where is not none %}\n where {{ where }}\n {% endif %}\n\n group by {{ column }}\n order by {{ order_by }}\n\n {% if max_records is not none %}\n limit {{ max_records }}\n {% endif %}\n\n {% endif %}\n\n {%- endcall -%}\n\n {%- set value_list = load_result('get_column_values') -%}\n\n {%- if value_list and value_list['data'] -%}\n {%- set values = value_list['data'] | map(attribute=0) | list %}\n {{ return(values) }}\n {%- else -%}\n {{ return(default) }}\n {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8182495, "supported_languages": null }, "macro.dbt_utils.star": { "unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__star" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8206182, "supported_languages": null }, "macro.dbt_utils.default__star": { "unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n {%- do dbt_utils._is_relation(from, 'star') -%}\r\n {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n {%- if not execute -%}\r\n {% do return('*') %}\r\n {%- endif -%}\r\n\r\n {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n {%- if cols|length <= 0 -%}\r\n {% if flags.WHICH == 'compile' %}\r\n {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n {% endset %}\r\n {% do return(response) %}\r\n {% else %}\r\n {% do return(\"/* no columns returned from star() macro */\") %}\r\n {% endif %}\r\n {%- else -%}\r\n {%- for col in cols %}\r\n {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n {%- if quote_identifiers -%}\r\n {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n {%- else -%}\r\n {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n {% endif %}\r\n {%- if not loop.last %},{{ '\\n ' }}{%- endif -%}\r\n {%- endfor -%}\r\n {% endif %}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8235743, "supported_languages": null }, "macro.dbt_utils.get_relations_by_prefix": { "unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__get_relations_by_prefix" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8250222, "supported_languages": null }, "macro.dbt_utils.default__get_relations_by_prefix": { "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n {%- call statement('get_tables', fetch_result=True) %}\n\n {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n {%- endcall -%}\n\n {%- set table_list = load_result('get_tables') -%}\n\n {%- if table_list and table_list['table'] -%}\n {%- set tbl_relations = [] -%}\n {%- for row in table_list['table'] -%}\n {%- set tbl_relation = api.Relation.create(\n database=database,\n schema=row.table_schema,\n identifier=row.table_name,\n type=row.table_type\n ) -%}\n {%- do tbl_relations.append(tbl_relation) -%}\n {%- endfor -%}\n\n {{ return(tbl_relations) }}\n {%- else -%}\n {{ return([]) }}\n {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8268082, "supported_languages": null }, "macro.dbt_utils.get_single_value": { "unique_id": "macro.dbt_utils.get_single_value", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "name": "get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__get_single_value" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8280184, "supported_languages": null }, "macro.dbt_utils.default__get_single_value": { "unique_id": "macro.dbt_utils.default__get_single_value", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "name": "default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n {{ query }}\n\n {%- endcall -%}\n\n {%- if execute -%}\n\n {% set r = load_result('get_query_result').table.columns[0].values() %}\n {% if r | length == 0 %}\n {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n {% set sql_result = default %}\n {% else %}\n {% set sql_result = r[0] %}\n {% endif %}\n \n {%- else -%}\n \n {% set sql_result = default %}\n \n {%- endif -%}\n\n {% do return(sql_result) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8295367, "supported_languages": null }, "macro.dbt_utils.get_url_parameter": { "unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__get_url_parameter" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8304095, "supported_languages": null }, "macro.dbt_utils.default__get_url_parameter": { "unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.split_part" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8311455, "supported_languages": null }, "macro.dbt_utils.get_url_host": { "unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__get_url_host" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8320787, "supported_languages": null }, "macro.dbt_utils.default__get_url_host": { "unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n dbt.split_part(\n dbt.split_part(\n dbt.replace(\n dbt.replace(\n dbt.replace(field, \"'android-app://'\", \"''\"\n ), \"'http://'\", \"''\"\n ), \"'https://'\", \"''\"\n ), \"'/'\", 1\n ), \"'?'\", 1\n )\n\n-%}\n\n\n {{ dbt.safe_cast(\n parsed,\n dbt.type_string()\n )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8330283, "supported_languages": null }, "macro.dbt_utils.get_url_path": { "unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_utils.default__get_url_path" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8341, "supported_languages": null }, "macro.dbt_utils.default__get_url_path": { "unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n {%- set stripped_url =\n dbt.replace(\n dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n -%}\n\n {%- set first_slash_pos -%}\n coalesce(\n nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n {{ dbt.position(\"'?'\", stripped_url) }} - 1\n )\n {%- endset -%}\n\n {%- set parsed_path =\n dbt.split_part(\n dbt.right(\n stripped_url,\n dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n ),\n \"'?'\", 1\n )\n -%}\n\n {{ dbt.safe_cast(\n parsed_path,\n dbt.type_string()\n )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8354957, "supported_languages": null }, "macro.dbt_artifacts.upload_seeds": { "unique_id": "macro.dbt_artifacts.upload_seeds", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_seeds.sql", "original_file_path": "macros/upload_seeds.sql", "name": "upload_seeds", "macro_sql": "{% macro upload_seeds(graph) -%}\n {% set seeds = [] %}\n {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"seed\") %}\n {% do seeds.append(node) %}\n {% endfor %}\n {{ return(adapter.dispatch('get_seeds_dml_sql', 'dbt_artifacts')(seeds)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.default__get_seeds_dml_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8393471, "supported_languages": null }, "macro.dbt_artifacts.default__get_seeds_dml_sql": { "unique_id": "macro.dbt_artifacts.default__get_seeds_dml_sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_seeds.sql", "original_file_path": "macros/upload_seeds.sql", "name": "default__get_seeds_dml_sql", "macro_sql": "{% macro default__get_seeds_dml_sql(seeds) -%}\n\n {% if seeds != [] %}\n {% set seed_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(10)) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }}\n from values\n {% for seed in seeds -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ seed.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ seed.database }}', {# database #}\n '{{ seed.schema }}', {# schema #}\n '{{ seed.name }}', {# name #}\n '{{ seed.package_name }}', {# package_name #}\n '{{ seed.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n '{{ seed.checksum.checksum }}', {# checksum #}\n '{{ tojson(seed.config.meta) }}', {# meta #}\n '{{ seed.alias }}' {# alias #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ seed_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8432724, "supported_languages": null }, "macro.dbt_artifacts.bigquery__get_seeds_dml_sql": { "unique_id": "macro.dbt_artifacts.bigquery__get_seeds_dml_sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_seeds.sql", "original_file_path": "macros/upload_seeds.sql", "name": "bigquery__get_seeds_dml_sql", "macro_sql": "{% macro bigquery__get_seeds_dml_sql(seeds) -%}\n {% if seeds != [] %}\n {% set seed_values %}\n {% for seed in seeds -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ seed.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ seed.database }}', {# database #}\n '{{ seed.schema }}', {# schema #}\n '{{ seed.name }}', {# name #}\n '{{ seed.package_name }}', {# package_name #}\n '{{ seed.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n '{{ seed.checksum.checksum }}', {# checksum #}\n parse_json('{{ tojson(seed.config.meta) }}'), {# meta #}\n '{{ seed.alias }}' {# alias #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ seed_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.845054, "supported_languages": null }, "macro.dbt_artifacts.upload_sources": { "unique_id": "macro.dbt_artifacts.upload_sources", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_sources.sql", "original_file_path": "macros/upload_sources.sql", "name": "upload_sources", "macro_sql": "{% macro upload_sources(graph) -%}\n {% set sources = [] %}\n {% for node in graph.sources.values() %}\n {% do sources.append(node) %}\n {% endfor %}\n {{ return(adapter.dispatch('get_sources_dml_sql', 'dbt_artifacts')(sources)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.default__get_sources_dml_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8488424, "supported_languages": null }, "macro.dbt_artifacts.default__get_sources_dml_sql": { "unique_id": "macro.dbt_artifacts.default__get_sources_dml_sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_sources.sql", "original_file_path": "macros/upload_sources.sql", "name": "default__get_sources_dml_sql", "macro_sql": "{% macro default__get_sources_dml_sql(sources) -%}\n\n {% if sources != [] %}\n {% set source_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(11)) }}\n from values\n {% for source in sources -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ source.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ source.database }}', {# database #}\n '{{ source.schema }}', {# schema #}\n '{{ source.source_name }}', {# source_name #}\n '{{ source.loader }}', {# loader #}\n '{{ source.name }}', {# name #}\n '{{ source.identifier }}', {# identifier #}\n '{{ source.loaded_at_field | replace(\"'\",\"\\\\'\") }}', {# loaded_at_field #}\n '{{ tojson(source.freshness) | replace(\"'\",\"\\\\'\") }}' {# freshness #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ source_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8524349, "supported_languages": null }, "macro.dbt_artifacts.bigquery__get_sources_dml_sql": { "unique_id": "macro.dbt_artifacts.bigquery__get_sources_dml_sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_sources.sql", "original_file_path": "macros/upload_sources.sql", "name": "bigquery__get_sources_dml_sql", "macro_sql": "{% macro bigquery__get_sources_dml_sql(sources) -%}\n {% if sources != [] %}\n {% set source_values %}\n {% for source in sources -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ source.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ source.database }}', {# database #}\n '{{ source.schema }}', {# schema #}\n '{{ source.source_name }}', {# source_name #}\n '{{ source.loader }}', {# loader #}\n '{{ source.name }}', {# name #}\n '{{ source.identifier }}', {# identifier #}\n '{{ source.loaded_at_field | replace(\"'\",\"\\\\'\") }}', {# loaded_at_field #}\n parse_json('{{ tojson(source.freshness) | replace(\"'\",\"\\\\'\") }}') {# freshness #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ source_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8542273, "supported_languages": null }, "macro.dbt_artifacts.upload_snapshots": { "unique_id": "macro.dbt_artifacts.upload_snapshots", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_snapshots.sql", "original_file_path": "macros/upload_snapshots.sql", "name": "upload_snapshots", "macro_sql": "{% macro upload_snapshots(graph) -%}\n {% set snapshots = [] %}\n {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"snapshot\") %}\n {% do snapshots.append(node) %}\n {% endfor %}\n {{ return(adapter.dispatch('get_snapshots_dml_sql', 'dbt_artifacts')(snapshots)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.default__get_snapshots_dml_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.858846, "supported_languages": null }, "macro.dbt_artifacts.default__get_snapshots_dml_sql": { "unique_id": "macro.dbt_artifacts.default__get_snapshots_dml_sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_snapshots.sql", "original_file_path": "macros/upload_snapshots.sql", "name": "default__get_snapshots_dml_sql", "macro_sql": "{% macro default__get_snapshots_dml_sql(snapshots) -%}\n\n {% if snapshots != [] %}\n {% set snapshot_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(7)) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }}\n from values\n {% for snapshot in snapshots -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ snapshot.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ snapshot.database }}', {# database #}\n '{{ snapshot.schema }}', {# schema #}\n '{{ snapshot.name }}', {# name #}\n '{{ tojson(snapshot.depends_on.nodes) }}', {# depends_on_nodes #}\n '{{ snapshot.package_name }}', {# package_name #}\n '{{ snapshot.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n '{{ snapshot.checksum.checksum }}', {# checksum #}\n '{{ snapshot.config.strategy }}', {# strategy #}\n '{{ tojson(snapshot.config.meta) }}', {# meta #}\n '{{ snapshot.alias }}' {# alias #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ snapshot_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.863077, "supported_languages": null }, "macro.dbt_artifacts.bigquery__get_snapshots_dml_sql": { "unique_id": "macro.dbt_artifacts.bigquery__get_snapshots_dml_sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_snapshots.sql", "original_file_path": "macros/upload_snapshots.sql", "name": "bigquery__get_snapshots_dml_sql", "macro_sql": "{% macro bigquery__get_snapshots_dml_sql(snapshots) -%}\n {% if snapshots != [] %}\n {% set snapshot_values %}\n {% for snapshot in snapshots -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ snapshot.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ snapshot.database }}', {# database #}\n '{{ snapshot.schema }}', {# schema #}\n '{{ snapshot.name }}', {# name #}\n {{ tojson(snapshot.depends_on.nodes) }}, {# depends_on_nodes #}\n '{{ snapshot.package_name }}', {# package_name #}\n '{{ snapshot.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n '{{ snapshot.checksum.checksum }}', {# checksum #}\n '{{ snapshot.config.strategy }}', {# strategy #}\n parse_json('{{ tojson(snapshot.config.meta) }}'), {# meta #}\n '{{ snapshot.alias }}' {# alias #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ snapshot_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8651795, "supported_languages": null }, "macro.dbt_artifacts.parse_json": { "unique_id": "macro.dbt_artifacts.parse_json", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/parse_json.sql", "original_file_path": "macros/parse_json.sql", "name": "parse_json", "macro_sql": "{% macro parse_json(field) -%}\n {{ return(adapter.dispatch('parse_json')(field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8660848, "supported_languages": null }, "macro.dbt_artifacts.default__parse_json": { "unique_id": "macro.dbt_artifacts.default__parse_json", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/parse_json.sql", "original_file_path": "macros/parse_json.sql", "name": "default__parse_json", "macro_sql": "{% macro default__parse_json(field) -%}\n {{ field }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.866305, "supported_languages": null }, "macro.dbt_artifacts.snowflake__parse_json": { "unique_id": "macro.dbt_artifacts.snowflake__parse_json", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/parse_json.sql", "original_file_path": "macros/parse_json.sql", "name": "snowflake__parse_json", "macro_sql": "{% macro snowflake__parse_json(field) -%}\n parse_json({{ field }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8665729, "supported_languages": null }, "macro.dbt_artifacts.bigquery__parse_json": { "unique_id": "macro.dbt_artifacts.bigquery__parse_json", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/parse_json.sql", "original_file_path": "macros/parse_json.sql", "name": "bigquery__parse_json", "macro_sql": "{% macro bigquery__parse_json(field) -%}\n parse_json({{ field }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8668098, "supported_languages": null }, "macro.dbt_artifacts.upload_invocations": { "unique_id": "macro.dbt_artifacts.upload_invocations", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_invocations.sql", "original_file_path": "macros/upload_invocations.sql", "name": "upload_invocations", "macro_sql": "{% macro upload_invocations() -%}\n {{ return(adapter.dispatch('get_invocations_dml_sql', 'dbt_artifacts')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.default__get_invocations_dml_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8722813, "supported_languages": null }, "macro.dbt_artifacts.default__get_invocations_dml_sql": { "unique_id": "macro.dbt_artifacts.default__get_invocations_dml_sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_invocations.sql", "original_file_path": "macros/upload_invocations.sql", "name": "default__get_invocations_dml_sql", "macro_sql": "{% macro default__get_invocations_dml_sql() -%}\n {% set invocation_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }}, ''),\n nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }}, ''),\n nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }}, ''),\n nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }}, ''),\n nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }}, ''),\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(17)) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(18)) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(19)) }}\n from values\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ dbt_version }}', {# dbt_version #}\n '{{ project_name }}', {# project_name #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ flags.WHICH }}', {# dbt_command #}\n '{{ flags.FULL_REFRESH }}', {# full_refresh_flag #}\n '{{ target.profile_name }}', {# target_profile_name #}\n '{{ target.name }}', {# target_name #}\n '{{ target.schema }}', {# target_schema #}\n {{ target.threads }}, {# target_threads #}\n\n '{{ env_var('DBT_CLOUD_PROJECT_ID', '') }}', {# dbt_cloud_project_id #}\n '{{ env_var('DBT_CLOUD_JOB_ID', '') }}', {# dbt_cloud_job_id #}\n '{{ env_var('DBT_CLOUD_RUN_ID', '') }}', {# dbt_cloud_run_id #}\n '{{ env_var('DBT_CLOUD_RUN_REASON_CATEGORY', '') }}', {# dbt_cloud_run_reason_category #}\n '{{ env_var('DBT_CLOUD_RUN_REASON', '') | replace(\"'\",\"\\\\'\") }}', {# dbt_cloud_run_reason #}\n\n {% if var('env_vars', none) %}\n {% set env_vars_dict = {} %}\n {% for env_variable in var('env_vars') %}\n {% do env_vars_dict.update({env_variable: env_var(env_variable)}) %}\n {% endfor %}\n '{{ tojson(env_vars_dict) }}', {# env_vars #}\n {% else %}\n null, {# env_vars #}\n {% endif %}\n\n {% if var('dbt_vars', none) %}\n {% set dbt_vars_dict = {} %}\n {% for dbt_var in var('dbt_vars') %}\n {% do dbt_vars_dict.update({dbt_var: var(dbt_var)}) %}\n {% endfor %}\n '{{ tojson(dbt_vars_dict) }}', {# dbt_vars #}\n {% else %}\n null, {# dbt_vars #}\n {% endif %}\n\n '{{ tojson(invocation_args_dict) | replace('\\\\', '\\\\\\\\') }}', {# invocation_args #}\n '{{ tojson(dbt_metadata_envs) }}' {# dbt_custom_envs #}\n\n )\n {% endset %}\n {{ invocation_values }}\n\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8791761, "supported_languages": null }, "macro.dbt_artifacts.bigquery__get_invocations_dml_sql": { "unique_id": "macro.dbt_artifacts.bigquery__get_invocations_dml_sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_invocations.sql", "original_file_path": "macros/upload_invocations.sql", "name": "bigquery__get_invocations_dml_sql", "macro_sql": "{% macro bigquery__get_invocations_dml_sql() -%}\n {% set invocation_values %}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ dbt_version }}', {# dbt_version #}\n '{{ project_name }}', {# project_name #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ flags.WHICH }}', {# dbt_command #}\n {{ flags.FULL_REFRESH }}, {# full_refresh_flag #}\n '{{ target.profile_name }}', {# target_profile_name #}\n '{{ target.name }}', {# target_name #}\n '{{ target.schema }}', {# target_schema #}\n {{ target.threads }}, {# target_threads #}\n\n '{{ env_var('DBT_CLOUD_PROJECT_ID', '') }}', {# dbt_cloud_project_id #}\n '{{ env_var('DBT_CLOUD_JOB_ID', '') }}', {# dbt_cloud_job_id #}\n '{{ env_var('DBT_CLOUD_RUN_ID', '') }}', {# dbt_cloud_run_id #}\n '{{ env_var('DBT_CLOUD_RUN_REASON_CATEGORY', '') }}', {# dbt_cloud_run_reason_category #}\n '{{ env_var('DBT_CLOUD_RUN_REASON', '') | replace(\"'\",\"\\\\'\") }}', {# dbt_cloud_run_reason #}\n\n {% if var('env_vars', none) %}\n {% set env_vars_dict = {} %}\n {% for env_variable in var('env_vars') %}\n {% do env_vars_dict.update({env_variable: env_var(env_variable)}) %}\n {% endfor %}\n parse_json('{{ tojson(env_vars_dict) }}'), {# env_vars #}\n {% else %}\n null, {# env_vars #}\n {% endif %}\n\n {% if var('dbt_vars', none) %}\n {% set dbt_vars_dict = {} %}\n {% for dbt_var in var('dbt_vars') %}\n {% do dbt_vars_dict.update({dbt_var: var(dbt_var)}) %}\n {% endfor %}\n parse_json('{{ tojson(dbt_vars_dict) }}'), {# dbt_vars #}\n {% else %}\n null, {# dbt_vars #}\n {% endif %}\n\n parse_json('{{ tojson(invocation_args_dict) }}'), {# invocation_args #}\n parse_json('{{ tojson(dbt_metadata_envs) }}') {# dbt_custom_envs #}\n\n )\n {% endset %}\n {{ invocation_values }}\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8826237, "supported_languages": null }, "macro.dbt_artifacts.insert_into_metadata_table": { "unique_id": "macro.dbt_artifacts.insert_into_metadata_table", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "name": "insert_into_metadata_table", "macro_sql": "{% macro insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n {% if content != \"\" %}\n {{ return(adapter.dispatch('insert_into_metadata_table', 'dbt_artifacts')(database_name, schema_name, table_name, content)) }}\n {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.snowflake__insert_into_metadata_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8848355, "supported_languages": null }, "macro.dbt_artifacts.spark__insert_into_metadata_table": { "unique_id": "macro.dbt_artifacts.spark__insert_into_metadata_table", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "name": "spark__insert_into_metadata_table", "macro_sql": "{% macro spark__insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n {% set insert_into_table_query %}\n insert into {% if database_name %}{{ database_name }}.{% endif %}{{ schema_name }}.{{ table_name }}\n {{ content }}\n {% endset %}\n\n {% do run_query(insert_into_table_query) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.885496, "supported_languages": null }, "macro.dbt_artifacts.snowflake__insert_into_metadata_table": { "unique_id": "macro.dbt_artifacts.snowflake__insert_into_metadata_table", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "name": "snowflake__insert_into_metadata_table", "macro_sql": "{% macro snowflake__insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n {% set insert_into_table_query %}\n insert into {{database_name}}.{{ schema_name }}.{{ table_name }}\n {{ content }}\n {% endset %}\n\n {% do run_query(insert_into_table_query) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8860707, "supported_languages": null }, "macro.dbt_artifacts.bigquery__insert_into_metadata_table": { "unique_id": "macro.dbt_artifacts.bigquery__insert_into_metadata_table", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "name": "bigquery__insert_into_metadata_table", "macro_sql": "{% macro bigquery__insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n\n {% set insert_into_table_query %}\n insert into `{{database_name}}.{{ schema_name }}.{{ table_name }}`\n VALUES\n {{ content }}\n {% endset %}\n\n {% do run_query(insert_into_table_query) %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8866944, "supported_languages": null }, "macro.dbt_artifacts.default__insert_into_metadata_table": { "unique_id": "macro.dbt_artifacts.default__insert_into_metadata_table", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "name": "default__insert_into_metadata_table", "macro_sql": "{% macro default__insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.886935, "supported_languages": null }, "macro.dbt_artifacts.column_identifier": { "unique_id": "macro.dbt_artifacts.column_identifier", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/column_identifier.sql", "original_file_path": "macros/column_identifier.sql", "name": "column_identifier", "macro_sql": "{% macro column_identifier(column_index) -%}\n {{ return(adapter.dispatch('column_identifier')(column_index)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.snowflake__column_identifier" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8878348, "supported_languages": null }, "macro.dbt_artifacts.default__column_identifier": { "unique_id": "macro.dbt_artifacts.default__column_identifier", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/column_identifier.sql", "original_file_path": "macros/column_identifier.sql", "name": "default__column_identifier", "macro_sql": "{% macro default__column_identifier(column_index) -%}\n {{ column_index }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8880541, "supported_languages": null }, "macro.dbt_artifacts.snowflake__column_identifier": { "unique_id": "macro.dbt_artifacts.snowflake__column_identifier", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/column_identifier.sql", "original_file_path": "macros/column_identifier.sql", "name": "snowflake__column_identifier", "macro_sql": "{% macro snowflake__column_identifier(column_index) -%}\n ${{ column_index }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8882713, "supported_languages": null }, "macro.dbt_artifacts.spark__column_identifier": { "unique_id": "macro.dbt_artifacts.spark__column_identifier", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/column_identifier.sql", "original_file_path": "macros/column_identifier.sql", "name": "spark__column_identifier", "macro_sql": "{% macro spark__column_identifier(column_index) -%}\n col{{ column_index }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8884847, "supported_languages": null }, "macro.dbt_artifacts.type_boolean": { "unique_id": "macro.dbt_artifacts.type_boolean", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "type_boolean", "macro_sql": "{% macro type_boolean() %}\n {{ return(adapter.dispatch('type_boolean', 'dbt_artifacts')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.default__type_boolean" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8895733, "supported_languages": null }, "macro.dbt_artifacts.default__type_boolean": { "unique_id": "macro.dbt_artifacts.default__type_boolean", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "default__type_boolean", "macro_sql": "{% macro default__type_boolean() %}\n {{ return(api.Column.translate_type(\"boolean\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8899064, "supported_languages": null }, "macro.dbt_artifacts.type_json": { "unique_id": "macro.dbt_artifacts.type_json", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "type_json", "macro_sql": "{% macro type_json() %}\n {{ return(adapter.dispatch('type_json', 'dbt_artifacts')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.snowflake__type_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.89026, "supported_languages": null }, "macro.dbt_artifacts.default__type_json": { "unique_id": "macro.dbt_artifacts.default__type_json", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "default__type_json", "macro_sql": "{% macro default__type_json() %}\n {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8906322, "supported_languages": null }, "macro.dbt_artifacts.snowflake__type_json": { "unique_id": "macro.dbt_artifacts.snowflake__type_json", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "snowflake__type_json", "macro_sql": "{% macro snowflake__type_json() %}\n OBJECT\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8908145, "supported_languages": null }, "macro.dbt_artifacts.bigquery__type_json": { "unique_id": "macro.dbt_artifacts.bigquery__type_json", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "bigquery__type_json", "macro_sql": "{% macro bigquery__type_json() %}\n JSON\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.890982, "supported_languages": null }, "macro.dbt_artifacts.type_array": { "unique_id": "macro.dbt_artifacts.type_array", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "type_array", "macro_sql": "{% macro type_array() %}\n {{ return(adapter.dispatch('type_array', 'dbt_artifacts')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.snowflake__type_array" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8913405, "supported_languages": null }, "macro.dbt_artifacts.default__type_array": { "unique_id": "macro.dbt_artifacts.default__type_array", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "default__type_array", "macro_sql": "{% macro default__type_array() %}\n {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8916707, "supported_languages": null }, "macro.dbt_artifacts.snowflake__type_array": { "unique_id": "macro.dbt_artifacts.snowflake__type_array", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "snowflake__type_array", "macro_sql": "{% macro snowflake__type_array() %}\n ARRAY\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8918548, "supported_languages": null }, "macro.dbt_artifacts.bigquery__type_array": { "unique_id": "macro.dbt_artifacts.bigquery__type_array", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "bigquery__type_array", "macro_sql": "{% macro bigquery__type_array() %}\n ARRAY<string>\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8920155, "supported_languages": null }, "macro.dbt_artifacts.upload_snapshot_executions": { "unique_id": "macro.dbt_artifacts.upload_snapshot_executions", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_snapshot_executions.sql", "original_file_path": "macros/upload_snapshot_executions.sql", "name": "upload_snapshot_executions", "macro_sql": "{% macro upload_snapshot_executions(results) -%}\n {% set snapshots = [] %}\n {% for result in results %}\n {% if result.node.resource_type == \"snapshot\" %}\n {% do snapshots.append(result) %}\n {% endif %}\n {% endfor %}\n {{ return(adapter.dispatch('get_snapshot_executions_dml_sql', 'dbt_artifacts')(snapshots)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.snowflake__get_snapshot_executions_dml_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.8993127, "supported_languages": null }, "macro.dbt_artifacts.default__get_snapshot_executions_dml_sql": { "unique_id": "macro.dbt_artifacts.default__get_snapshot_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_snapshot_executions.sql", "original_file_path": "macros/upload_snapshot_executions.sql", "name": "default__get_snapshot_executions_dml_sql", "macro_sql": "{% macro default__get_snapshot_executions_dml_sql(snapshots) -%}\n {% if snapshots != [] %}\n {% set snapshot_execution_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }}\n from values\n {% for model in snapshots -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ model.node.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n\n {% set config_full_refresh = model.node.config.full_refresh %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n '{{ config_full_refresh }}', {# was_full_refresh #}\n\n '{{ model.thread_id }}', {# thread_id #}\n '{{ model.status }}', {# status #}\n\n {% if model.timing != [] %}\n {% for stage in model.timing if stage.name == \"compile\" %}\n {% if loop.length == 0 %}\n null, {# compile_started_at #}\n {% else %}\n '{{ stage.started_at }}', {# compile_started_at #}\n {% endif %}\n {% endfor %}\n\n {% for stage in model.timing if stage.name == \"execute\" %}\n {% if loop.length == 0 %}\n null, {# query_completed_at #}\n {% else %}\n '{{ stage.completed_at }}', {# query_completed_at #}\n {% endif %}\n {% endfor %}\n {% else %}\n null, {# compile_started_at #}\n null, {# query_completed_at #}\n {% endif %}\n\n {{ model.execution_time }}, {# total_node_runtime #}\n null, -- rows_affected not available {# Only available in Snowflake #}\n '{{ model.node.config.materialized }}', {# materialization #}\n '{{ model.node.schema }}', {# schema #}\n '{{ model.node.name }}', {# name #}\n '{{ model.node.alias }}' {# alias #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ snapshot_execution_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.9048388, "supported_languages": null }, "macro.dbt_artifacts.bigquery__get_snapshot_executions_dml_sql": { "unique_id": "macro.dbt_artifacts.bigquery__get_snapshot_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_snapshot_executions.sql", "original_file_path": "macros/upload_snapshot_executions.sql", "name": "bigquery__get_snapshot_executions_dml_sql", "macro_sql": "{% macro bigquery__get_snapshot_executions_dml_sql(snapshots) -%}\n {% if snapshots != [] %}\n {% set snapshot_execution_values %}\n {% for model in snapshots -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ model.node.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n\n {% set config_full_refresh = model.node.config.full_refresh %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n {{ config_full_refresh }}, {# was_full_refresh #}\n\n '{{ model.thread_id }}', {# thread_id #}\n '{{ model.status }}', {# status #}\n\n {% if model.timing != [] %}\n {% for stage in model.timing if stage.name == \"compile\" %}\n {% if loop.length == 0 %}\n null, {# compile_started_at #}\n {% else %}\n '{{ stage.started_at }}', {# compile_started_at #}\n {% endif %}\n {% endfor %}\n\n {% for stage in model.timing if stage.name == \"execute\" %}\n {% if loop.length == 0 %}\n null, {# query_completed_at #}\n {% else %}\n '{{ stage.completed_at }}', {# query_completed_at #}\n {% endif %}\n {% endfor %}\n {% else %}\n null, {# compile_started_at #}\n null, {# query_completed_at #}\n {% endif %}\n\n {{ model.execution_time }}, {# total_node_runtime #}\n null, -- rows_affected not available {# Databricks #}\n '{{ model.node.config.materialized }}', {# materialization #}\n '{{ model.node.schema }}', {# schema #}\n '{{ model.node.name }}', {# name #}\n '{{ model.node.alias }}' {# alias #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ snapshot_execution_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.9082117, "supported_languages": null }, "macro.dbt_artifacts.snowflake__get_snapshot_executions_dml_sql": { "unique_id": "macro.dbt_artifacts.snowflake__get_snapshot_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_snapshot_executions.sql", "original_file_path": "macros/upload_snapshot_executions.sql", "name": "snowflake__get_snapshot_executions_dml_sql", "macro_sql": "{% macro snowflake__get_snapshot_executions_dml_sql(snapshots) -%}\n {% if snapshots != [] %}\n {% set snapshot_execution_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }}\n from values\n {% for model in snapshots -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ model.node.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n\n {% set config_full_refresh = model.node.config.full_refresh %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n '{{ config_full_refresh }}', {# was_full_refresh #}\n\n '{{ model.thread_id }}', {# thread_id #}\n '{{ model.status }}', {# status #}\n\n {% if model.timing != [] %}\n {% for stage in model.timing if stage.name == \"compile\" %}\n {% if loop.length == 0 %}\n null, {# compile_started_at #}\n {% else %}\n '{{ stage.started_at }}', {# compile_started_at #}\n {% endif %}\n {% endfor %}\n\n {% for stage in model.timing if stage.name == \"execute\" %}\n {% if loop.length == 0 %}\n null, {# query_completed_at #}\n {% else %}\n '{{ stage.completed_at }}', {# query_completed_at #}\n {% endif %}\n {% endfor %}\n {% else %}\n null, {# compile_started_at #}\n null, {# query_completed_at #}\n {% endif %}\n\n {{ model.execution_time }}, {# total_node_runtime #}\n try_cast('{{ model.adapter_response.rows_affected }}' as int), {# rows_affected #}\n '{{ model.node.config.materialized }}', {# materialization #}\n '{{ model.node.schema }}', {# schema #}\n '{{ model.node.name }}', {# name #}\n '{{ model.node.alias }}' {# alias #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ snapshot_execution_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.913642, "supported_languages": null }, "macro.dbt_artifacts.upload_model_executions": { "unique_id": "macro.dbt_artifacts.upload_model_executions", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_model_executions.sql", "original_file_path": "macros/upload_model_executions.sql", "name": "upload_model_executions", "macro_sql": "{% macro upload_model_executions(results) -%}\n {% set models = [] %}\n {% for result in results %}\n {% if result.node.resource_type == \"model\" %}\n {% do models.append(result) %}\n {% endif %}\n {% endfor %}\n {{ return(adapter.dispatch('get_model_executions_dml_sql', 'dbt_artifacts')(models)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.snowflake__get_model_executions_dml_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.9209557, "supported_languages": null }, "macro.dbt_artifacts.default__get_model_executions_dml_sql": { "unique_id": "macro.dbt_artifacts.default__get_model_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_model_executions.sql", "original_file_path": "macros/upload_model_executions.sql", "name": "default__get_model_executions_dml_sql", "macro_sql": "{% macro default__get_model_executions_dml_sql(models) -%}\n {% if models != [] %}\n {% set model_execution_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }}\n from values\n {% for model in models -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ model.node.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n\n {% set config_full_refresh = model.node.config.full_refresh %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n '{{ config_full_refresh }}', {# was_full_refresh #}\n\n '{{ model.thread_id }}', {# thread_id #}\n '{{ model.status }}', {# status #}\n\n {% if model.timing != [] %}\n {% for stage in model.timing if stage.name == \"compile\" %}\n {% if loop.length == 0 %}\n null, {# compile_started_at #}\n {% else %}\n '{{ stage.started_at }}', {# compile_started_at #}\n {% endif %}\n {% endfor %}\n\n {% for stage in model.timing if stage.name == \"execute\" %}\n {% if loop.length == 0 %}\n null, {# query_completed_at #}\n {% else %}\n '{{ stage.completed_at }}', {# query_completed_at #}\n {% endif %}\n {% endfor %}\n {% else %}\n null, {# compile_started_at #}\n null, {# query_completed_at #}\n {% endif %}\n\n {{ model.execution_time }}, {# total_node_runtime #}\n null, -- rows_affected not available {# Only available in Snowflake & BigQuery #}\n '{{ model.node.config.materialized }}', {# materialization #}\n '{{ model.node.schema }}', {# schema #}\n '{{ model.node.name }}', {# name #}\n '{{ model.node.alias }}' {# alias #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ model_execution_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.9264152, "supported_languages": null }, "macro.dbt_artifacts.bigquery__get_model_executions_dml_sql": { "unique_id": "macro.dbt_artifacts.bigquery__get_model_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_model_executions.sql", "original_file_path": "macros/upload_model_executions.sql", "name": "bigquery__get_model_executions_dml_sql", "macro_sql": "{% macro bigquery__get_model_executions_dml_sql(models) -%}\n {% if models != [] %}\n {% set model_execution_values %}\n {% for model in models -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ model.node.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n\n {% set config_full_refresh = model.node.config.full_refresh %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n {{ config_full_refresh }}, {# was_full_refresh #}\n\n '{{ model.thread_id }}', {# thread_id #}\n '{{ model.status }}', {# status #}\n\n {% if model.timing != [] %}\n {% for stage in model.timing if stage.name == \"compile\" %}\n {% if loop.length == 0 %}\n null, {# compile_started_at #}\n {% else %}\n '{{ stage.started_at }}', {# compile_started_at #}\n {% endif %}\n {% endfor %}\n\n {% for stage in model.timing if stage.name == \"execute\" %}\n {% if loop.length == 0 %}\n null, {# query_completed_at #}\n {% else %}\n '{{ stage.completed_at }}', {# query_completed_at #}\n {% endif %}\n {% endfor %}\n {% else %}\n null, {# compile_started_at #}\n null, {# query_completed_at #}\n {% endif %}\n\n {{ model.execution_time }}, {# total_node_runtime #}\n safe_cast('{{ model.adapter_response.rows_affected }}' as int64),\n safe_cast('{{ model.adapter_response.bytes_processed }}' as int64),\n '{{ model.node.config.materialized }}', {# materialization #}\n '{{ model.node.schema }}', {# schema #}\n '{{ model.node.name }}', {# name #}\n '{{ model.node.alias }}' {# alias #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ model_execution_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.9298108, "supported_languages": null }, "macro.dbt_artifacts.snowflake__get_model_executions_dml_sql": { "unique_id": "macro.dbt_artifacts.snowflake__get_model_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_model_executions.sql", "original_file_path": "macros/upload_model_executions.sql", "name": "snowflake__get_model_executions_dml_sql", "macro_sql": "{% macro snowflake__get_model_executions_dml_sql(models) -%}\n {% if models != [] %}\n {% set model_execution_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }}\n from values\n {% for model in models -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ model.node.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n\n {% set config_full_refresh = model.node.config.full_refresh %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n '{{ config_full_refresh }}', {# was_full_refresh #}\n\n '{{ model.thread_id }}', {# thread_id #}\n '{{ model.status }}', {# status #}\n\n {% if model.timing != [] %}\n {% for stage in model.timing if stage.name == \"compile\" %}\n {% if loop.length == 0 %}\n null, {# compile_started_at #}\n {% else %}\n '{{ stage.started_at }}', {# compile_started_at #}\n {% endif %}\n {% endfor %}\n\n {% for stage in model.timing if stage.name == \"execute\" %}\n {% if loop.length == 0 %}\n null, {# query_completed_at #}\n {% else %}\n '{{ stage.completed_at }}', {# query_completed_at #}\n {% endif %}\n {% endfor %}\n {% else %}\n null, {# compile_started_at #}\n null, {# query_completed_at #}\n {% endif %}\n\n {{ model.execution_time }}, {# total_node_runtime #}\n try_cast('{{ model.adapter_response.rows_affected }}' as int), {# rows_affected #}\n '{{ model.node.config.materialized }}', {# materialization #}\n '{{ model.node.schema }}', {# schema #}\n '{{ model.node.name }}', {# name #}\n '{{ model.node.alias }}' {# alias #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ model_execution_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.9353087, "supported_languages": null }, "macro.dbt_artifacts.surrogate_key": { "unique_id": "macro.dbt_artifacts.surrogate_key", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/surrogate_key.sql", "original_file_path": "macros/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "\n\n{%- macro surrogate_key(field_list) -%}\n {# needed for safe_add to allow for non-keyword arguments see SO post #}\n {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n {% set frustrating_jinja_feature = varargs %}\n {{ return(adapter.dispatch('surrogate_key', 'dbt_artifacts')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.default__surrogate_key" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.9367795, "supported_languages": null }, "macro.dbt_artifacts.default__surrogate_key": { "unique_id": "macro.dbt_artifacts.default__surrogate_key", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/surrogate_key.sql", "original_file_path": "macros/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n {%- set _ = fields.append(\n \"coalesce(cast(\" ~ field ~ \" as \" ~ type_string() ~ \"), '')\"\n ) -%}\n\n {%- if not loop.last %}\n {%- set _ = fields.append(\"'-'\") -%}\n {%- endif -%}\n\n{%- endfor -%}\n\n{{ hash(concat(fields)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.9386806, "supported_languages": null }, "macro.dbt_artifacts.upload_exposures": { "unique_id": "macro.dbt_artifacts.upload_exposures", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_exposures.sql", "original_file_path": "macros/upload_exposures.sql", "name": "upload_exposures", "macro_sql": "{% macro upload_exposures(graph) -%}\n {% set exposures = [] %}\n {% for node in graph.exposures.values() %}\n {% do exposures.append(node) %}\n {% endfor %}\n {{ return(adapter.dispatch('get_exposures_dml_sql', 'dbt_artifacts')(exposures)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.default__get_exposures_dml_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.94307, "supported_languages": null }, "macro.dbt_artifacts.default__get_exposures_dml_sql": { "unique_id": "macro.dbt_artifacts.default__get_exposures_dml_sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_exposures.sql", "original_file_path": "macros/upload_exposures.sql", "name": "default__get_exposures_dml_sql", "macro_sql": "{% macro default__get_exposures_dml_sql(exposures) -%}\n\n {% if exposures != [] %}\n {% set exposure_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(6)) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }}\n from values\n {% for exposure in exposures -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ exposure.unique_id | replace(\"'\",\"\\\\'\") }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ exposure.name | replace(\"'\",\"\\\\'\") }}', {# name #}\n '{{ exposure.type }}', {# type #}\n '{{ tojson(exposure.owner) }}', {# owner #}\n '{{ exposure.maturity }}', {# maturity #}\n '{{ exposure.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n '{{ exposure.description | replace(\"'\",\"\\\\'\") }}', {# description #}\n '{{ exposure.url }}', {# url #}\n '{{ exposure.package_name }}', {# package_name #}\n '{{ tojson(exposure.depends_on.nodes) }}' {# depends_on_nodes #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ exposure_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.9472737, "supported_languages": null }, "macro.dbt_artifacts.bigquery__get_exposures_dml_sql": { "unique_id": "macro.dbt_artifacts.bigquery__get_exposures_dml_sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_exposures.sql", "original_file_path": "macros/upload_exposures.sql", "name": "bigquery__get_exposures_dml_sql", "macro_sql": "{% macro bigquery__get_exposures_dml_sql(exposures) -%}\n {% if exposures != [] %}\n {% set exposure_values %}\n {% for exposure in exposures -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ exposure.unique_id | replace(\"'\",\"\\\\'\") }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ exposure.name | replace(\"'\",\"\\\\'\") }}', {# name #}\n '{{ exposure.type }}', {# type #}\n parse_json('{{ tojson(exposure.owner) | replace(\"'\",\"\\\\'\") }}'), {# owner #}\n '{{ exposure.maturity }}', {# maturity #}\n '{{ exposure.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n \"\"\"{{ exposure.description | replace(\"'\",\"\\\\'\") }}\"\"\", {# description #}\n '{{ exposure.url }}', {# url #}\n '{{ exposure.package_name }}', {# package_name #}\n {{ tojson(exposure.depends_on.nodes) }} {# depends_on_nodes #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ exposure_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.9498656, "supported_languages": null }, "macro.dbt_artifacts.upload_seed_executions": { "unique_id": "macro.dbt_artifacts.upload_seed_executions", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_seed_executions.sql", "original_file_path": "macros/upload_seed_executions.sql", "name": "upload_seed_executions", "macro_sql": "{% macro upload_seed_executions(results) -%}\n {% set seeds = [] %}\n {% for result in results %}\n {% if result.node.resource_type == \"seed\" %}\n {% do seeds.append(result) %}\n {% endif %}\n {% endfor %}\n {{ return(adapter.dispatch('get_seed_executions_dml_sql', 'dbt_artifacts')(seeds)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.snowflake__get_seed_executions_dml_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.9570425, "supported_languages": null }, "macro.dbt_artifacts.default__get_seed_executions_dml_sql": { "unique_id": "macro.dbt_artifacts.default__get_seed_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_seed_executions.sql", "original_file_path": "macros/upload_seed_executions.sql", "name": "default__get_seed_executions_dml_sql", "macro_sql": "{% macro default__get_seed_executions_dml_sql(seeds) -%}\n {% if seeds != [] %}\n {% set seed_execution_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }}\n from values\n {% for model in seeds -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ model.node.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n\n {% set config_full_refresh = model.node.config.full_refresh %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n '{{ config_full_refresh }}', {# was_full_refresh #}\n\n '{{ model.thread_id }}', {# thread_id #}\n '{{ model.status }}', {# status #}\n\n {% if model.timing != [] %}\n {% for stage in model.timing if stage.name == \"compile\" %}\n {% if loop.length == 0 %}\n null, {# compile_started_at #}\n {% else %}\n '{{ stage.started_at }}', {# compile_started_at #}\n {% endif %}\n {% endfor %}\n\n {% for stage in model.timing if stage.name == \"execute\" %}\n {% if loop.length == 0 %}\n null, {# query_completed_at #}\n {% else %}\n '{{ stage.completed_at }}', {# query_completed_at #}\n {% endif %}\n {% endfor %}\n {% else %}\n null, {# compile_started_at #}\n null, {# query_completed_at #}\n {% endif %}\n\n {{ model.execution_time }}, {# total_node_runtime #}\n null, -- rows_affected not available {# Only available in Snowflake #}\n '{{ model.node.config.materialized }}', {# materialization #}\n '{{ model.node.schema }}', {# schema #}\n '{{ model.node.name }}', {# name #}\n '{{ model.node.alias }}' {# alias #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ seed_execution_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.962437, "supported_languages": null }, "macro.dbt_artifacts.bigquery__get_seed_executions_dml_sql": { "unique_id": "macro.dbt_artifacts.bigquery__get_seed_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_seed_executions.sql", "original_file_path": "macros/upload_seed_executions.sql", "name": "bigquery__get_seed_executions_dml_sql", "macro_sql": "{% macro bigquery__get_seed_executions_dml_sql(seeds) -%}\n {% if seeds != [] %}\n {% set seed_execution_values %}\n {% for model in seeds -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ model.node.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n\n {% set config_full_refresh = model.node.config.full_refresh %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n {{ config_full_refresh }}, {# was_full_refresh #}\n\n '{{ model.thread_id }}', {# thread_id #}\n '{{ model.status }}', {# status #}\n\n {% if model.timing != [] %}\n {% for stage in model.timing if stage.name == \"compile\" %}\n {% if loop.length == 0 %}\n null, {# compile_started_at #}\n {% else %}\n '{{ stage.started_at }}', {# compile_started_at #}\n {% endif %}\n {% endfor %}\n\n {% for stage in model.timing if stage.name == \"execute\" %}\n {% if loop.length == 0 %}\n null, {# query_completed_at #}\n {% else %}\n '{{ stage.completed_at }}', {# query_completed_at #}\n {% endif %}\n {% endfor %}\n {% else %}\n null, {# compile_started_at #}\n null, {# query_completed_at #}\n {% endif %}\n\n {{ model.execution_time }}, {# total_node_runtime #}\n null, -- rows_affected not available {# Databricks #}\n '{{ model.node.config.materialized }}', {# materialization #}\n '{{ model.node.schema }}', {# schema #}\n '{{ model.node.name }}', {# name #}\n '{{ model.node.alias }}' {# alias #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ seed_execution_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.9657183, "supported_languages": null }, "macro.dbt_artifacts.snowflake__get_seed_executions_dml_sql": { "unique_id": "macro.dbt_artifacts.snowflake__get_seed_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_seed_executions.sql", "original_file_path": "macros/upload_seed_executions.sql", "name": "snowflake__get_seed_executions_dml_sql", "macro_sql": "{% macro snowflake__get_seed_executions_dml_sql(seeds) -%}\n {% if seeds != [] %}\n {% set seed_execution_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }}\n from values\n {% for model in seeds -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ model.node.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n\n {% set config_full_refresh = model.node.config.full_refresh %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n '{{ config_full_refresh }}', {# was_full_refresh #}\n\n '{{ model.thread_id }}', {# thread_id #}\n '{{ model.status }}', {# status #}\n\n {% if model.timing != [] %}\n {% for stage in model.timing if stage.name == \"compile\" %}\n {% if loop.length == 0 %}\n null, {# compile_started_at #}\n {% else %}\n '{{ stage.started_at }}', {# compile_started_at #}\n {% endif %}\n {% endfor %}\n\n {% for stage in model.timing if stage.name == \"execute\" %}\n {% if loop.length == 0 %}\n null, {# query_completed_at #}\n {% else %}\n '{{ stage.completed_at }}', {# query_completed_at #}\n {% endif %}\n {% endfor %}\n {% else %}\n null, {# compile_started_at #}\n null, {# query_completed_at #}\n {% endif %}\n\n {{ model.execution_time }}, {# total_node_runtime #}\n try_cast('{{ model.adapter_response.rows_affected }}' as int), {# rows_affected #}\n '{{ model.node.config.materialized }}', {# materialization #}\n '{{ model.node.schema }}', {# schema #}\n '{{ model.node.name }}', {# name #}\n '{{ model.node.alias }}' {# alias #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ seed_execution_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.9711714, "supported_languages": null }, "macro.dbt_artifacts.get_relation": { "unique_id": "macro.dbt_artifacts.get_relation", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_results.sql", "original_file_path": "macros/upload_results.sql", "name": "get_relation", "macro_sql": "{% macro get_relation(get_relation_name) %}\n {% if execute %}\n {% set model_get_relation_node = graph.nodes.values() | selectattr('name', 'equalto', get_relation_name) | first %}\n {% set relation = api.Relation.create(\n database = model_get_relation_node.database,\n schema = model_get_relation_node.schema,\n identifier = model_get_relation_node.alias\n )\n %}\n {% do return(relation) %}\n {% else %}\n {% do return(api.Relation.create()) %}\n {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.9805608, "supported_languages": null }, "macro.dbt_artifacts.upload_results": { "unique_id": "macro.dbt_artifacts.upload_results", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_results.sql", "original_file_path": "macros/upload_results.sql", "name": "upload_results", "macro_sql": "{% macro upload_results(results) -%}\n\n {% if execute %}\n\n {% if results != [] %}\n {% do log(\"Uploading model executions\", true) %}\n {% set model_executions = dbt_artifacts.get_relation('model_executions') %}\n {% set content_model_executions = dbt_artifacts.upload_model_executions(results) %}\n {{ dbt_artifacts.insert_into_metadata_table(\n database_name=model_executions.database,\n schema_name=model_executions.schema,\n table_name=model_executions.identifier,\n content=content_model_executions\n )\n }}\n\n {% do log(\"Uploading seed executions\", true) %}\n {% set seed_executions = dbt_artifacts.get_relation('seed_executions') %}\n {% set content_seed_executions = dbt_artifacts.upload_seed_executions(results) %}\n {{ dbt_artifacts.insert_into_metadata_table(\n database_name=seed_executions.database,\n schema_name=seed_executions.schema,\n table_name=seed_executions.identifier,\n content=content_seed_executions\n )\n }}\n\n {% do log(\"Uploading snapshot executions\", true) %}\n {% set snapshot_executions = dbt_artifacts.get_relation('snapshot_executions') %}\n {% set content_snapshot_executions = dbt_artifacts.upload_snapshot_executions(results) %}\n {{ dbt_artifacts.insert_into_metadata_table(\n database_name=snapshot_executions.database,\n schema_name=snapshot_executions.schema,\n table_name=snapshot_executions.identifier,\n content=content_snapshot_executions\n )\n }}\n\n {% do log(\"Uploading test executions\", true) %}\n {% set test_executions = dbt_artifacts.get_relation('test_executions') %}\n {% set content_test_executions = dbt_artifacts.upload_test_executions(results) %}\n {{ dbt_artifacts.insert_into_metadata_table(\n database_name=test_executions.database,\n schema_name=test_executions.schema,\n table_name=test_executions.identifier,\n content=content_test_executions\n )\n }}\n\n {% endif %}\n\n {% do log(\"Uploading exposures\", true) %}\n {% set exposures = dbt_artifacts.get_relation('exposures') %}\n {% set content_exposures = dbt_artifacts.upload_exposures(graph) %}\n {{ dbt_artifacts.insert_into_metadata_table(\n database_name=exposures.database,\n schema_name=exposures.schema,\n table_name=exposures.identifier,\n content=content_exposures\n )\n }}\n\n {% do log(\"Uploading tests\", true) %}\n {% set tests = dbt_artifacts.get_relation('tests') %}\n {% set content_tests = dbt_artifacts.upload_tests(graph) %}\n {{ dbt_artifacts.insert_into_metadata_table(\n database_name=tests.database,\n schema_name=tests.schema,\n table_name=tests.identifier,\n content=content_tests\n )\n }}\n\n {% do log(\"Uploading seeds\", true) %}\n {% set seeds = dbt_artifacts.get_relation('seeds') %}\n {% set content_seeds = dbt_artifacts.upload_seeds(graph) %}\n {{ dbt_artifacts.insert_into_metadata_table(\n database_name=seeds.database,\n schema_name=seeds.schema,\n table_name=seeds.identifier,\n content=content_seeds\n )\n }}\n\n {% do log(\"Uploading models\", true) %}\n {% set models = dbt_artifacts.get_relation('models') %}\n {% set content_models = dbt_artifacts.upload_models(graph) %}\n {{ dbt_artifacts.insert_into_metadata_table(\n database_name=models.database,\n schema_name=models.schema,\n table_name=models.identifier,\n content=content_models\n )\n }}\n\n {% do log(\"Uploading sources\", true) %}\n {% set sources = dbt_artifacts.get_relation('sources') %}\n {% set content_sources = dbt_artifacts.upload_sources(graph) %}\n {{ dbt_artifacts.insert_into_metadata_table(\n database_name=sources.database,\n schema_name=sources.schema,\n table_name=sources.identifier,\n content=content_sources\n )\n }}\n\n {% do log(\"Uploading snapshots\", true) %}\n {% set snapshots = dbt_artifacts.get_relation('snapshots') %}\n {% set content_snapshots = dbt_artifacts.upload_snapshots(graph) %}\n {{ dbt_artifacts.insert_into_metadata_table(\n database_name=snapshots.database,\n schema_name=snapshots.schema,\n table_name=snapshots.identifier,\n content=content_snapshots\n )\n }}\n\n {% do log(\"Uploading invocations\", true) %}\n {% set invocations = dbt_artifacts.get_relation('invocations') %}\n {% set content_invocations = dbt_artifacts.upload_invocations() %}\n {{ dbt_artifacts.insert_into_metadata_table(\n database_name=invocations.database,\n schema_name=invocations.schema,\n table_name=invocations.identifier,\n content=content_invocations\n )\n }}\n\n {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.get_relation", "macro.dbt_artifacts.upload_model_executions", "macro.dbt_artifacts.insert_into_metadata_table", "macro.dbt_artifacts.upload_seed_executions", "macro.dbt_artifacts.upload_snapshot_executions", "macro.dbt_artifacts.upload_test_executions", "macro.dbt_artifacts.upload_exposures", "macro.dbt_artifacts.upload_tests", "macro.dbt_artifacts.upload_seeds", "macro.dbt_artifacts.upload_models", "macro.dbt_artifacts.upload_sources", "macro.dbt_artifacts.upload_snapshots", "macro.dbt_artifacts.upload_invocations" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.989687, "supported_languages": null }, "macro.dbt_artifacts.upload_models": { "unique_id": "macro.dbt_artifacts.upload_models", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_models.sql", "original_file_path": "macros/upload_models.sql", "name": "upload_models", "macro_sql": "{% macro upload_models(graph) -%}\n {% set models = [] %}\n {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"model\") %}\n {% do models.append(node) %}\n {% endfor %}\n {{ return(adapter.dispatch('get_models_dml_sql', 'dbt_artifacts')(models)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.default__get_models_dml_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.9947882, "supported_languages": null }, "macro.dbt_artifacts.default__get_models_dml_sql": { "unique_id": "macro.dbt_artifacts.default__get_models_dml_sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_models.sql", "original_file_path": "macros/upload_models.sql", "name": "default__get_models_dml_sql", "macro_sql": "{% macro default__get_models_dml_sql(models) -%}\n\n {% if models != [] %}\n {% set model_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(7)) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(13)) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }}\n from values\n {% for model in models -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ model.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ model.database }}', {# database #}\n '{{ model.schema }}', {# schema #}\n '{{ model.name }}', {# name #}\n '{{ tojson(model.depends_on.nodes) | replace('\\\\', '\\\\\\\\') }}', {# depends_on_nodes #}\n '{{ model.package_name }}', {# package_name #}\n '{{ model.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n '{{ model.checksum.checksum }}', {# checksum #}\n '{{ model.config.materialized }}', {# materialization #}\n '{{ tojson(model.tags) }}', {# tags #}\n '{{ tojson(model.config.meta) }}', {# meta #}\n '{{ model.alias }}' {# alias #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ model_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812389.9994652, "supported_languages": null }, "macro.dbt_artifacts.bigquery__get_models_dml_sql": { "unique_id": "macro.dbt_artifacts.bigquery__get_models_dml_sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_models.sql", "original_file_path": "macros/upload_models.sql", "name": "bigquery__get_models_dml_sql", "macro_sql": "{% macro bigquery__get_models_dml_sql(models) -%}\n {% if models != [] %}\n {% set model_values %}\n {% for model in models -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ model.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ model.database }}', {# database #}\n '{{ model.schema }}', {# schema #}\n '{{ model.name }}', {# name #}\n {{ tojson(model.depends_on.nodes) }}, {# depends_on_nodes #}\n '{{ model.package_name }}', {# package_name #}\n '{{ model.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n '{{ model.checksum.checksum }}', {# checksum #}\n '{{ model.config.materialized }}', {# materialization #}\n {{ tojson(model.tags) }}, {# tags #}\n parse_json('{{ tojson(model.config.meta) }}'), {# meta #}\n '{{ model.alias }}' {# alias #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ model_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.00163, "supported_languages": null }, "macro.dbt_artifacts.upload_test_executions": { "unique_id": "macro.dbt_artifacts.upload_test_executions", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_test_executions.sql", "original_file_path": "macros/upload_test_executions.sql", "name": "upload_test_executions", "macro_sql": "{% macro upload_test_executions(results) -%}\n {% set tests = [] %}\n {% for result in results %}\n {% if result.node.resource_type == \"test\" %}\n {% do tests.append(result) %}\n {% endif %}\n {% endfor %}\n {{ return(adapter.dispatch('get_test_executions_dml_sql', 'dbt_artifacts')(tests)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.default__get_test_executions_dml_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.006074, "supported_languages": null }, "macro.dbt_artifacts.default__get_test_executions_dml_sql": { "unique_id": "macro.dbt_artifacts.default__get_test_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_test_executions.sql", "original_file_path": "macros/upload_test_executions.sql", "name": "default__get_test_executions_dml_sql", "macro_sql": "{% macro default__get_test_executions_dml_sql(tests) -%}\n {% if tests != [] %}\n {% set test_execution_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }}\n from values\n {% for test in tests -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ test.node.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n\n {% set config_full_refresh = test.node.config.full_refresh %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n '{{ config_full_refresh }}', {# was_full_refresh #}\n\n '{{ test.thread_id }}', {# thread_id #}\n '{{ test.status }}', {# status #}\n\n {% if test.timing != [] %}\n {% for stage in test.timing if stage.name == \"compile\" %}\n {% if loop.length == 0 %}\n null, {# compile_started_at #}\n {% else %}\n '{{ stage.started_at }}', {# compile_started_at #}\n {% endif %}\n {% endfor %}\n\n {% for stage in test.timing if stage.name == \"execute\" %}\n {% if loop.length == 0 %}\n null, {# query_completed_at #}\n {% else %}\n '{{ stage.completed_at }}', {# query_completed_at #}\n {% endif %}\n {% endfor %}\n {% else %}\n null, {# compile_started_at #}\n null, {# query_completed_at #}\n {% endif %}\n\n {{ test.execution_time }}, {# total_node_runtime #}\n null, {# rows_affected not available in Databricks #}\n {{ 'null' if test.failures is none else test.failures }} {# failures #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ test_execution_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.010904, "supported_languages": null }, "macro.dbt_artifacts.bigquery__get_test_executions_dml_sql": { "unique_id": "macro.dbt_artifacts.bigquery__get_test_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_test_executions.sql", "original_file_path": "macros/upload_test_executions.sql", "name": "bigquery__get_test_executions_dml_sql", "macro_sql": "{% macro bigquery__get_test_executions_dml_sql(tests) -%}\n {% if tests != [] %}\n {% set test_execution_values %}\n {% for test in tests -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ test.node.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n\n {% set config_full_refresh = test.node.config.full_refresh %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n {{ config_full_refresh }}, {# was_full_refresh #}\n\n '{{ test.thread_id }}', {# thread_id #}\n '{{ test.status }}', {# status #}\n\n {% if test.timing != [] %}\n {% for stage in test.timing if stage.name == \"compile\" %}\n {% if loop.length == 0 %}\n null, {# compile_started_at #}\n {% else %}\n '{{ stage.started_at }}', {# compile_started_at #}\n {% endif %}\n {% endfor %}\n\n {% for stage in test.timing if stage.name == \"execute\" %}\n {% if loop.length == 0 %}\n null, {# query_completed_at #}\n {% else %}\n '{{ stage.completed_at }}', {# query_completed_at #}\n {% endif %}\n {% endfor %}\n {% else %}\n null, {# compile_started_at #}\n null, {# query_completed_at #}\n {% endif %}\n\n {{ test.execution_time }}, {# total_node_runtime #}\n null, {# rows_affected not available in Databricks #}\n {{ 'null' if test.failures is none else test.failures }} {# failures #}\n )\n {%- if not loop.last %},{%- endif %}\n\n {%- endfor %}\n {% endset %}\n {{ test_execution_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.0139177, "supported_languages": null }, "macro.dbt_artifacts.migrate_from_v0_to_v1": { "unique_id": "macro.dbt_artifacts.migrate_from_v0_to_v1", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/migrate_from_v0_to_v1.sql", "original_file_path": "macros/migrate_from_v0_to_v1.sql", "name": "migrate_from_v0_to_v1", "macro_sql": "{%- macro migrate_from_v0_to_v1(old_database, old_schema, new_database, new_schema) -%}\n\n {% set migrate_model_executions %}\n insert into {{new_database}}.{{new_schema}}.model_executions (\n command_invocation_id,\n compile_started_at,\n materialization,\n name,\n node_id,\n query_completed_at,\n rows_affected,\n schema,\n status,\n thread_id,\n total_node_runtime,\n was_full_refresh,\n run_started_at\n )\n select\n command_invocation_id,\n compile_started_at,\n model_materialization,\n name,\n node_id,\n query_completed_at,\n rows_affected,\n model_schema,\n status,\n thread_id,\n total_node_runtime,\n was_full_refresh,\n artifact_generated_at\n from {{old_database}}.{{old_schema}}.fct_dbt__model_executions\n {% endset %}\n\n {{ log(\"Migrating model_executions\", info=True) }}\n {%- call statement(auto_begin=True) -%}\n {{ migrate_model_executions }}\n {%- endcall -%}\n\n {% set migrate_tests %}\n insert into {{new_database}}.{{new_schema}}.tests (\n command_invocation_id,\n depends_on_nodes,\n name,\n node_id,\n package_name,\n tags,\n test_path,\n run_started_at\n )\n select\n command_invocation_id,\n depends_on_nodes,\n name,\n node_id,\n package_name,\n [],\n test_path,\n artifact_generated_at\n from {{old_database}}.{{old_schema}}.dim_dbt__tests\n {% endset %}\n\n {{ log(\"Migrating tests\", info=True) }}\n {%- call statement(auto_begin=True) -%}\n {{ migrate_tests }}\n {%- endcall -%}\n\n {% set migrate_test_executions %}\n insert into {{new_database}}.{{new_schema}}.test_executions (\n command_invocation_id,\n compile_started_at,\n failures,\n node_id,\n query_completed_at,\n rows_affected,\n status,\n thread_id,\n total_node_runtime,\n was_full_refresh,\n run_started_at\n )\n select\n command_invocation_id,\n compile_started_at,\n null,\n node_id,\n query_completed_at,\n rows_affected,\n status,\n thread_id,\n total_node_runtime,\n was_full_refresh,\n artifact_generated_at\n from {{old_database}}.{{old_schema}}.fct_dbt__test_executions\n {% endset %}\n\n {{ log(\"Migrating test_executions\", info=True) }}\n {%- call statement(auto_begin=True) -%}\n {{ migrate_test_executions }}\n {%- endcall -%}\n\n {% set migrate_models %}\n insert into {{new_database}}.{{new_schema}}.models (\n checksum,\n command_invocation_id,\n database,\n depends_on_nodes,\n materialization,\n name,\n node_id,\n package_name,\n path,\n schema,\n run_started_at\n )\n select\n checksum,\n command_invocation_id,\n model_database,\n depends_on_nodes,\n model_materialization,\n name,\n node_id,\n package_name,\n model_path,\n model_schema,\n artifact_generated_at\n from {{old_database}}.{{old_schema}}.dim_dbt__models\n {% endset %}\n\n {{ log(\"Migrating models\", info=True) }}\n {%- call statement(auto_begin=True) -%}\n {{ migrate_models }}\n {%- endcall -%}\n\n {% set migrate_seeds %}\n insert into {{new_database}}.{{new_schema}}.seeds (\n checksum,\n command_invocation_id,\n database,\n name,\n node_id,\n package_name,\n path,\n schema,\n run_started_at\n )\n select\n checksum,\n command_invocation_id,\n seed_database,\n name,\n node_id,\n package_name,\n seed_path,\n seed_schema,\n artifact_generated_at\n from {{old_database}}.{{old_schema}}.dim_dbt__seeds\n {% endset %}\n\n {{ log(\"Migrating seeds\", info=True) }}\n {%- call statement(auto_begin=True) -%}\n {{ migrate_seeds }}\n {%- endcall -%}\n\n {% set migrate_seed_executions %}\n insert into {{new_database}}.{{new_schema}}.seed_executions (\n command_invocation_id,\n compile_started_at,\n materialization,\n name,\n node_id,\n query_completed_at,\n rows_affected,\n schema,\n status,\n thread_id,\n total_node_runtime,\n was_full_refresh,\n run_started_at\n )\n select\n command_invocation_id,\n compile_started_at,\n 'seed',\n name,\n node_id,\n query_completed_at,\n rows_affected,\n seed_schema,\n status,\n thread_id,\n total_node_runtime,\n was_full_refresh,\n artifact_generated_at\n from {{old_database}}.{{old_schema}}.fct_dbt__seed_executions\n {% endset %}\n\n {{ log(\"Migrating seed_executions\", info=True) }}\n {%- call statement(auto_begin=True) -%}\n {{ migrate_seed_executions }}\n {%- endcall -%}\n\n {% set migrate_exposures %}\n insert into {{new_database}}.{{new_schema}}.exposures (\n command_invocation_id,\n depends_on_nodes,\n description,\n maturity,\n name,\n node_id,\n owner,\n package_name,\n path,\n type,\n url,\n run_started_at\n )\n select\n command_invocation_id,\n array_agg(output_feeds), {#- Here we un-flatten the transformation originally done -#}\n null,\n any_value(maturity) as maturity,\n name,\n node_id,\n null, {#- v0 is a string, v1 is a variant -#}\n any_value(package_name) as package_name,\n null,\n any_value(type) as type,\n null,\n any_value(artifact_generated_at) as artifact_generated_at\n from {{old_database}}.{{old_schema}}.dim_dbt__exposures\n group by command_invocation_id, node_id, name, artifact_generated_at\n {% endset %}\n\n {{ log(\"Migrating exposures\", info=True) }}\n {%- call statement(auto_begin=True) -%}\n {{ migrate_exposures }}\n {%- endcall -%}\n\n {% set migrate_snapshots %}\n insert into {{new_database}}.{{new_schema}}.snapshots (\n checksum,\n command_invocation_id,\n database,\n depends_on_nodes,\n name,\n node_id,\n package_name,\n path,\n schema,\n strategy,\n run_started_at\n )\n select\n checksum,\n command_invocation_id,\n snapshot_database,\n depends_on_nodes,\n name,\n node_id,\n package_name,\n snapshot_path,\n snapshot_schema,\n null,\n artifact_generated_at\n from {{old_database}}.{{old_schema}}.dim_dbt__snapshots\n {% endset %}\n\n {{ log(\"Migrating snapshots\", info=True) }}\n {%- call statement(auto_begin=True) -%}\n {{ migrate_snapshots }}\n {%- endcall -%}\n\n {% set migrate_snapshot_executions %}\n insert into {{new_database}}.{{new_schema}}.snapshot_executions (\n command_invocation_id,\n compile_started_at,\n materialization,\n name,\n node_id,\n query_completed_at,\n rows_affected,\n schema,\n status,\n thread_id,\n total_node_runtime,\n was_full_refresh,\n run_started_at\n )\n select\n command_invocation_id,\n compile_started_at,\n 'snapshot',\n name,\n node_id,\n query_completed_at,\n rows_affected,\n snapshot_schema,\n status,\n thread_id,\n total_node_runtime,\n was_full_refresh,\n artifact_generated_at\n from {{old_database}}.{{old_schema}}.fct_dbt__snapshot_executions\n {% endset %}\n\n {{ log(\"Migrating snapshot_executions\", info=True) }}\n {%- call statement(auto_begin=True) -%}\n {{ migrate_snapshot_executions }}\n {%- endcall -%}\n\n {% set migrate_sources %}\n insert into {{new_database}}.{{new_schema}}.sources (\n command_invocation_id,\n database,\n freshness,\n identifier,\n loaded_at_field,\n loader,\n name,\n node_id,\n schema,\n source_name,\n run_started_at\n )\n select\n command_invocation_id,\n node_database,\n parse_json('[{\"error_after\":{\"count\":null,\"period\":null},\"filter\":null,\"warn_after\":{\"count\":null,\"period\":null}}]'),\n name,\n null,\n source_loader,\n name,\n node_id,\n source_schema,\n source_name,\n artifact_generated_at\n from {{old_database}}.{{old_schema}}.dim_dbt__sources\n {% endset %}\n\n {{ log(\"Migrating sources\", info=True) }}\n {%- call statement(auto_begin=True) -%}\n {{ migrate_sources }}\n {%- endcall -%}\n\n {{ log(\"Migration complete. You can now safely delete any data from before 1.0.0\", info=True) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.0330029, "supported_languages": null }, "macro.dbt_artifacts.upload_tests": { "unique_id": "macro.dbt_artifacts.upload_tests", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_tests.sql", "original_file_path": "macros/upload_tests.sql", "name": "upload_tests", "macro_sql": "{% macro upload_tests(graph) -%}\n {% set tests = [] %}\n {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"test\") %}\n {% do tests.append(node) %}\n {% endfor %}\n {{ return(adapter.dispatch('get_tests_dml_sql', 'dbt_artifacts')(tests)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.default__get_tests_dml_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.0363467, "supported_languages": null }, "macro.dbt_artifacts.default__get_tests_dml_sql": { "unique_id": "macro.dbt_artifacts.default__get_tests_dml_sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_tests.sql", "original_file_path": "macros/upload_tests.sql", "name": "default__get_tests_dml_sql", "macro_sql": "{% macro default__get_tests_dml_sql(tests) -%}\n\n {% if tests != [] %}\n {% set test_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(5)) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(8)) }}\n from values\n {% for test in tests -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ test.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ test.name }}', {# name #}\n '{{ tojson(test.depends_on.nodes) }}', {# depends_on_nodes #}\n '{{ test.package_name }}', {# package_name #}\n '{{ test.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# test_path #}\n '{{ tojson(test.tags) }}' {# tags #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ test_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.0393667, "supported_languages": null }, "macro.dbt_artifacts.bigquery__get_tests_dml_sql": { "unique_id": "macro.dbt_artifacts.bigquery__get_tests_dml_sql", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "macros/upload_tests.sql", "original_file_path": "macros/upload_tests.sql", "name": "bigquery__get_tests_dml_sql", "macro_sql": "{% macro bigquery__get_tests_dml_sql(tests) -%}\n {% if tests != [] %}\n {% set test_values %}\n {% for test in tests -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ test.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ test.name }}', {# name #}\n {{ tojson(test.depends_on.nodes) }}, {# depends_on_nodes #}\n '{{ test.package_name }}', {# package_name #}\n '{{ test.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# test_path #}\n {{ tojson(test.tags) }} {# tags #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ test_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.0409265, "supported_languages": null }, "macro.metrics.develop": { "unique_id": "macro.metrics.develop", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/develop.sql", "original_file_path": "macros/develop.sql", "name": "develop", "macro_sql": "{%- macro develop(develop_yml, metric_list, grain, dimensions=[], secondary_calculations=[], start_date=None, end_date=None, where=None) -%}\n {{ return(adapter.dispatch('develop', 'metrics')(develop_yml, metric_list, grain, dimensions, secondary_calculations, start_date, end_date, where)) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__develop" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.0442708, "supported_languages": null }, "macro.metrics.default__develop": { "unique_id": "macro.metrics.default__develop", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/develop.sql", "original_file_path": "macros/develop.sql", "name": "default__develop", "macro_sql": "{% macro default__develop(develop_yml, metric_list, grain, dimensions=[], secondary_calculations=[], start_date=None, end_date=None, where=None) -%}\n {#- Need this here, since the actual ref is nested within loops/conditions: -#}\n -- depends on: {{ ref(var('dbt_metrics_calendar_model', 'dbt_metrics_default_calendar')) }}\n\n {% if not execute -%}\n {%- do return(\"not execute\") -%}\n {%- endif %}\n\n {%- if metric_list is string -%}\n {%- set metric_list = [metric_list] -%}\n {%- endif -%}\n\n {# For the sake of consistency with metrics definition and the ability to easily\n reference the metric object, we are creating a metrics_dictionary for set of metrics\n included in the provided yml. This is used to construct the metric tree #}\n {%- set develop_yml = fromyaml(develop_yml) -%}\n\n {% set develop_dictionary = {} %}\n {% for metric_definition in develop_yml.metrics %}\n {% do develop_dictionary.update({metric_definition.name:{}}) %}\n {% do develop_dictionary.update({metric_definition.name:metric_definition}) %}\n {% endfor %}\n {% set develop_yml = develop_dictionary %}\n\n {# ############\n VALIDATION OF PROVIDED YML - Gotta make sure the metric looks good!\n ############ #}\n\n {# {%- if develop_yml.metrics | length > 1 -%}\n {%- do exceptions.raise_compiler_error(\"The develop macro only supports testing a single macro.\") -%}\n {%- endif -%} #}\n\n {% for metric_name in metric_list %}\n {% set metric_definition = develop_yml[metric_name] %}\n\n {%- if not metric_definition.name %}\n {%- do exceptions.raise_compiler_error(\"The provided yml is missing a metric name\") -%}\n {%- endif %}\n\n {%- if not metric_definition.calculation_method %}\n {%- do exceptions.raise_compiler_error(\"The provided yml for metric \" ~ metric_definition.name ~ \" is missing a calculation method\") -%}\n {%- endif %}\n\n {%- if not metric_definition.model and metric_definition.calculation_method != 'derived' %}\n {%- do exceptions.raise_compiler_error(\"The provided yml for metric \" ~ metric_definition.name ~ \" is missing a model\") -%}\n {%- endif %}\n\n {%- if not metric_definition.timestamp %}\n {%- do exceptions.raise_compiler_error(\"The provided yml for metric \" ~ metric_definition.name ~ \" is missing a timestamp\") -%}\n {%- endif %}\n\n {%- if not metric_definition.time_grains %}\n {%- do exceptions.raise_compiler_error(\"The provided yml for metric \" ~ metric_definition.name ~ \" is missing time grains\") -%}\n {%- endif %}\n\n {%- if grain not in metric_definition.time_grains %}\n {%- do exceptions.raise_compiler_error(\"The selected grain is missing from the metric definition of metric \" ~ metric_definition.name ) -%}\n {%- endif %}\n\n {%- if not metric_definition.expression %}\n {%- do exceptions.raise_compiler_error(\"The provided yml for metric \" ~ metric_definition.name ~ \" is missing an expression\") -%}\n {%- endif %}\n\n {%- for dim in dimensions -%}\n {% if dim not in metric_definition.dimensions -%}\n {%- do exceptions.raise_compiler_error(\"The macro provided dimension is missing from the metric definition of metric \" ~ metric_definition.name ) %}\n {% endif %}\n {%- endfor -%}\n\n\n {%- endfor -%}\n\n {# ############\n VALIDATION OF MACRO INPUTS - Making sure we have a provided grain!\n ############ #}\n\n {%- if not grain %}\n {%- do exceptions.raise_compiler_error(\"No date grain provided\") %}\n {%- endif %}\n\n {# ############\n VARIABLE SETTING - Creating the faux metric tree and faux metric list. The faux fur of 2022\n ############ #}\n\n {% set metric_tree = metrics.get_faux_metric_tree(metric_list=metric_list, develop_yml=develop_yml) %}\n\n {% set metrics_dictionary = metrics.get_metrics_dictionary(metric_tree=metric_tree, develop_yml=develop_yml) %}\n\n {# ############\n SECONDARY CALCULATION VALIDATION - Gotta make sure the secondary calcs are good!\n ############ #}\n\n {%- do metrics.validate_develop_grain(grain=grain, metric_tree=metric_tree, metrics_dictionary=metrics_dictionary, secondary_calculations=secondary_calculations) -%}\n {%- do metrics.validate_metric_config(metrics_dictionary=metrics_dictionary) -%}\n\n {%- for calc_config in secondary_calculations if calc_config.aggregate %}\n {%- do metrics.validate_aggregate_coherence(metric_aggregate=metrics_dictionary[0].calculation_method, calculation_aggregate=calc_config.aggregate) %}\n {%- endfor %}\n\n {%- for calc_config in secondary_calculations if calc_config.period -%}\n {%- do metrics.validate_grain_order(metric_grain=grain, calculation_grain=calc_config.period) -%}\n {%- endfor -%}\n\n {# ############\n SQL GENERATION - Lets build that SQL!\n ############ -#}\n\n {%- set sql = metrics.get_metric_sql(\n metrics_dictionary=metrics_dictionary,\n grain=grain,\n dimensions=dimensions,\n secondary_calculations=secondary_calculations,\n start_date=start_date,\n end_date=end_date,\n where=where,\n metric_tree=metric_tree\n ) %}\n ({{ sql }}) metric_subq\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.get_faux_metric_tree", "macro.metrics.get_metrics_dictionary", "macro.metrics.validate_develop_grain", "macro.metrics.validate_metric_config", "macro.metrics.validate_aggregate_coherence", "macro.metrics.validate_grain_order", "macro.metrics.get_metric_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.0507798, "supported_languages": null }, "macro.metrics.get_metric_sql": { "unique_id": "macro.metrics.get_metric_sql", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/get_metric_sql.sql", "original_file_path": "macros/get_metric_sql.sql", "name": "get_metric_sql", "macro_sql": "\n{%- macro get_metric_sql(metrics_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, where, metric_tree) %}\n\n{#- ############\nTODO: COMMENT AROUND how get metric sql doesn't do validation and that lives further upstream in calculate and develop\n############ -#}\n\n\n{#- ############\nLETS SET SOME VARIABLES!\n############ -#}\n\n{#- We have to break out calendar dimensions as their own list of acceptable dimensions. \nThis is because of the date-spining. If we don't do this, it creates impossible combinations\nof calendar dimension + base dimensions -#}\n{%- set calendar_dimensions = metrics.get_calendar_dimensions(dimensions) -%}\n\n{#- Additionally, we also have to restrict the dimensions coming in from the macro to \nno longer include those we've designated as calendar dimensions. That way they \nare correctly handled by the spining. We override the dimensions variable for \ncleanliness -#}\n{%- set non_calendar_dimensions = metrics.get_non_calendar_dimension_list(dimensions, var('custom_calendar_dimension_list',[])) -%}\n\n{#- Finally we set the relevant periods, which is a list of all time grains that need to be contained\nwithin the final dataset in order to accomplish base + secondary calc functionality. -#}\n{%- set relevant_periods = metrics.get_relevent_periods(grain, secondary_calculations) -%}\n\n{# Setting a variable to denote if the user has provided any dimensions #}\n{%- if non_calendar_dimensions | length > 0 -%}\n {%- set dimensions_provided = true -%}\n{%- else -%}\n {%- set dimensions_provided = false -%}\n{%- endif -%}\n\n{#- Here we set the calendar table as a variable, which ensures the default overwritten if they include\na custom calendar -#}\n{%- set calendar_tbl = ref(var('dbt_metrics_calendar_model', \"dbt_metrics_default_calendar\")) -%}\n\n{#- ############\nLET THE COMPOSITION BEGIN!\n############ -#}\n\n{#- First we add the calendar table - we only need to do this once no matter how many\nmetrics there are -#}\n{{ metrics.gen_calendar_cte(\n calendar_tbl=calendar_tbl,\n start_date=start_date, \n end_date=end_date) \n }}\n\n{#- Next we check if it is a composite metric or single metric by checking the length of the list -#}\n{#- This filter forms the basis of how we construct the SQL -#}\n\n{#- If composite, we begin by looping through each of the metric names that make\nup the composite metric. -#}\n\n{%- for metric_name in metric_tree[\"parent_set\"] -%}\n\n {{ metrics.build_metric_sql(\n metric_dictionary=metrics_dictionary[metric_name], \n grain=grain, \n dimensions=non_calendar_dimensions, \n secondary_calculations=secondary_calculations, \n start_date=start_date, \n end_date=end_date,\n calendar_tbl=calendar_tbl, \n relevant_periods=relevant_periods,\n calendar_dimensions=calendar_dimensions,\n dimensions_provided=dimensions_provided\n ) \n }}\n\n{%- endfor -%}\n\n{%- if metric_tree[\"full_set\"] | length > 1 -%}\n\n {{ metrics.gen_joined_metrics_cte(\n metric_tree=metric_tree,\n grain=grain, \n dimensions=non_calendar_dimensions, \n calendar_dimensions=calendar_dimensions, \n secondary_calculations=secondary_calculations, \n relevant_periods=relevant_periods,\n metrics_dictionary=metrics_dictionary ) \n }}\n\n{% endif -%}\n\n{{ metrics.gen_secondary_calculation_cte(\n metric_tree=metric_tree,\n grain=grain, \n dimensions=non_calendar_dimensions, \n secondary_calculations=secondary_calculations, \n calendar_dimensions=calendar_dimensions,\n metric_dictionary=metrics_dictionary \n ) \n }}\n\n{{ metrics.gen_final_cte(\n metric_tree=metric_tree,\n grain=grain, \n dimensions=non_calendar_dimensions, \n calendar_dimensions=calendar_dimensions, \n relevant_periods=relevant_periods,\n secondary_calculations=secondary_calculations,\n where=where) \n }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.get_calendar_dimensions", "macro.metrics.get_non_calendar_dimension_list", "macro.metrics.get_relevent_periods", "macro.metrics.gen_calendar_cte", "macro.metrics.build_metric_sql", "macro.metrics.gen_joined_metrics_cte", "macro.metrics.gen_secondary_calculation_cte", "macro.metrics.gen_final_cte" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.0554225, "supported_languages": null }, "macro.metrics.calculate": { "unique_id": "macro.metrics.calculate", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/calculate.sql", "original_file_path": "macros/calculate.sql", "name": "calculate", "macro_sql": "{% macro calculate(metric_list, grain, dimensions=[], secondary_calculations=[], start_date=None, end_date=None, where=None) %}\n {{ return(adapter.dispatch('calculate', 'metrics')(metric_list, grain, dimensions, secondary_calculations, start_date, end_date, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__calculate" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.0575356, "supported_languages": null }, "macro.metrics.default__calculate": { "unique_id": "macro.metrics.default__calculate", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/calculate.sql", "original_file_path": "macros/calculate.sql", "name": "default__calculate", "macro_sql": "{% macro default__calculate(metric_list, grain, dimensions=[], secondary_calculations=[], start_date=None, end_date=None, where=None) %}\n {#- Need this here, since the actual ref is nested within loops/conditions: -#}\n -- depends on: {{ ref(var('dbt_metrics_calendar_model', 'dbt_metrics_default_calendar')) }}\n {# ############\n VARIABLE SETTING - Creating the metric tree and making sure metric list is a list!\n ############ -#}\n\n {%- if metric_list is not iterable -%}\n {%- set metric_list = [metric_list] -%}\n {%- endif -%}\n\n {%- set metric_tree = metrics.get_metric_tree(metric_list=metric_list) -%}\n\n {#- Here we are creating the metrics dictionary which contains all of the metric information needed for sql gen. -#}\n {%- set metrics_dictionary = metrics.get_metrics_dictionary(metric_tree=metric_tree) -%}\n\n {#- ############\n VALIDATION - Make sure everything is good!\n ############ -#}\n\n {%- if not execute -%}\n {%- do return(\"Did not execute\") -%}\n {%- endif -%}\n\n {%- if not metric_list -%}\n {%- do exceptions.raise_compiler_error(\"No metric or metrics provided\") -%}\n {%- endif -%}\n\n {%- if not grain -%}\n {%- do exceptions.raise_compiler_error(\"No date grain provided\") -%}\n {%- endif -%}\n\n {%- if where is iterable and (where is not string and where is not mapping) -%}\n {%- do exceptions.raise_compiler_error(\"From v0.3.0 onwards, the where clause takes a single string, not a list of filters. Please fix to reflect this change\") %}\n {%- endif -%}\n\n {%- do metrics.validate_grain(grain=grain, metric_tree=metric_tree, metrics_dictionary=metrics_dictionary, secondary_calculations=secondary_calculations) -%}\n\n {%- do metrics.validate_derived_metrics(metric_tree=metric_tree) -%}\n\n {%- do metrics.validate_dimension_list(dimensions=dimensions, metric_tree=metric_tree) -%} \n\n {%- do metrics.validate_metric_config(metrics_dictionary=metrics_dictionary) -%} \n\n {#- ############\n SECONDARY CALCULATION VALIDATION - Let there be window functions\n ############ -#}\n\n {%- for metric_name in metric_tree.base_set %}\n {%- for calc_config in secondary_calculations if calc_config.aggregate -%}\n {%- do metrics.validate_aggregate_coherence(metric_aggregate=metrics_dictionary[metric_name].calculation_method, calculation_aggregate=calc_config.aggregate) -%}\n {%- endfor -%}\n {%- endfor -%}\n\n {%- for calc_config in secondary_calculations if calc_config.period -%}\n {%- do metrics.validate_grain_order(metric_grain=grain, calculation_grain=calc_config.period) -%}\n {%- endfor -%} \n\n {#- ############\n SQL GENERATION - Lets build that SQL!\n ############ -#}\n\n {%- set sql = metrics.get_metric_sql(\n metrics_dictionary=metrics_dictionary,\n grain=grain,\n dimensions=dimensions,\n secondary_calculations=secondary_calculations,\n start_date=start_date,\n end_date=end_date,\n where=where,\n metric_tree=metric_tree\n ) %}\n\n({{ sql }}) metric_subq \n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.get_metric_tree", "macro.metrics.get_metrics_dictionary", "macro.metrics.validate_grain", "macro.metrics.validate_derived_metrics", "macro.metrics.validate_dimension_list", "macro.metrics.validate_metric_config", "macro.metrics.validate_aggregate_coherence", "macro.metrics.validate_grain_order", "macro.metrics.get_metric_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.061432, "supported_languages": null }, "macro.metrics.test_metric_equality": { "unique_id": "macro.metrics.test_metric_equality", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/misc/metrics__equality.sql", "original_file_path": "macros/misc/metrics__equality.sql", "name": "test_metric_equality", "macro_sql": "{% test metric_equality(model, compare_model, compare_columns=None) %}\n {{ return(adapter.dispatch('test_metric_equality', 'metrics')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__test_metric_equality" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.0642147, "supported_languages": null }, "macro.metrics.default__test_metric_equality": { "unique_id": "macro.metrics.default__test_metric_equality", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/misc/metrics__equality.sql", "original_file_path": "macros/misc/metrics__equality.sql", "name": "default__test_metric_equality", "macro_sql": "{% macro default__test_metric_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n count(*) + coalesce(abs(\n sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do metrics._metric_is_relation(model, 'test_metric_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema — this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n {%- do metrics._metric_is_ephemeral(model, 'test_metric_equality') -%}\n {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ model }}\n\n),\n\nb as (\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n select {{compare_cols_csv}} from a\n {{ except() }}\n select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n select {{compare_cols_csv}} from b\n {{ except() }}\n select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n union all\n select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics._metric_is_relation", "macro.metrics._metric_is_ephemeral", "macro.dbt.except" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.0660014, "supported_languages": null }, "macro.metrics._metric_is_relation": { "unique_id": "macro.metrics._metric_is_relation", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/misc/metrics__equality.sql", "original_file_path": "macros/misc/metrics__equality.sql", "name": "_metric_is_relation", "macro_sql": "{% macro _metric_is_relation(obj, macro) %}\n {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.0668375, "supported_languages": null }, "macro.metrics._metric_is_ephemeral": { "unique_id": "macro.metrics._metric_is_ephemeral", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/misc/metrics__equality.sql", "original_file_path": "macros/misc/metrics__equality.sql", "name": "_metric_is_ephemeral", "macro_sql": "{% macro _metric_is_ephemeral(obj, macro) %}\n {%- if obj.is_cte -%}\n {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n {% if obj.name.startswith(ephemeral_prefix) %}\n {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n {% else %}\n {% set model_name = obj.name %}\n {%- endif -%}\n {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n {% endset %}\n {%- do exceptions.raise_compiler_error(error_message) -%}\n {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.0681016, "supported_languages": null }, "macro.metrics.metric_get_intervals_between": { "unique_id": "macro.metrics.metric_get_intervals_between", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "name": "metric_get_intervals_between", "macro_sql": "{% macro metric_get_intervals_between(start_date, end_date, datepart) -%}\n {{ return(adapter.dispatch('metric_get_intervals_between', 'metrics')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__metric_get_intervals_between" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.0708199, "supported_languages": null }, "macro.metrics.default__metric_get_intervals_between": { "unique_id": "macro.metrics.default__metric_get_intervals_between", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "name": "default__metric_get_intervals_between", "macro_sql": "{% macro default__metric_get_intervals_between(start_date, end_date, datepart) -%}\n {%- call statement('metric_get_intervals_between', fetch_result=True) %}\n\n select {{ datediff(start_date, end_date, datepart) }}\n\n {%- endcall -%}\n\n {%- set value_list = load_result('metric_get_intervals_between') -%}\n\n {%- if value_list and value_list['data'] -%}\n {%- set values = value_list['data'] | map(attribute=0) | list %}\n {{ return(values[0]) }}\n {%- else -%}\n {{ return(1) }}\n {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.statement", "macro.dbt.datediff" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.0720685, "supported_languages": null }, "macro.metrics.metric_date_spine": { "unique_id": "macro.metrics.metric_date_spine", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "name": "metric_date_spine", "macro_sql": "{% macro metric_date_spine(datepart, start_date, end_date) %}\n {{ return(adapter.dispatch('metric_date_spine', 'metrics')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__metric_date_spine" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.0725546, "supported_languages": null }, "macro.metrics.default__metric_date_spine": { "unique_id": "macro.metrics.default__metric_date_spine", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "name": "default__metric_date_spine", "macro_sql": "{% macro default__metric_date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\nmetric_date_spine(\n \"day\",\n \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n {{metrics.metric_generate_series(\n metrics.metric_get_intervals_between(start_date, end_date, datepart)\n )}}\n\n),\n\nall_periods as (\n\n select (\n {{\n dateadd(\n datepart,\n \"row_number() over (order by 1) - 1\",\n start_date\n )\n }}\n ) as date_{{datepart}}\n from rawdata\n\n),\n\nfiltered as (\n\n select *\n from all_periods\n where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.metric_generate_series", "macro.metrics.metric_get_intervals_between", "macro.dbt.dateadd" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.0732827, "supported_languages": null }, "macro.metrics.metric_get_powers_of_two": { "unique_id": "macro.metrics.metric_get_powers_of_two", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "name": "metric_get_powers_of_two", "macro_sql": "{% macro metric_get_powers_of_two(upper_bound) %}\n {{ return(adapter.dispatch('metric_get_powers_of_two', 'metrics')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__metric_get_powers_of_two" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.0736806, "supported_languages": null }, "macro.metrics.default__metric_get_powers_of_two": { "unique_id": "macro.metrics.default__metric_get_powers_of_two", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "name": "default__metric_get_powers_of_two", "macro_sql": "{% macro default__metric_get_powers_of_two(upper_bound) %}\n\n {% if upper_bound <= 0 %}\n {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n {% endif %}\n\n {% for _ in range(1, 100) %}\n {% if upper_bound <= 2 README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests loop.index %}{{ return(loop.index) }}{% endif %}\n {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.0745928, "supported_languages": null }, "macro.metrics.metric_generate_series": { "unique_id": "macro.metrics.metric_generate_series", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "name": "metric_generate_series", "macro_sql": "{% macro metric_generate_series(upper_bound) %}\n {{ return(adapter.dispatch('metric_generate_series', 'metrics')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__metric_generate_series" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.0750184, "supported_languages": null }, "macro.metrics.default__metric_generate_series": { "unique_id": "macro.metrics.default__metric_generate_series", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/misc/metrics__date_spine.sql", "original_file_path": "macros/misc/metrics__date_spine.sql", "name": "default__metric_generate_series", "macro_sql": "{% macro default__metric_generate_series(upper_bound) %}\n\n {% set n = metrics.metric_get_powers_of_two(upper_bound) %}\n\n with p as (\n select 0 as generated_number union all select 1\n ), unioned as (\n\n select\n\n {% for i in range(n) %}\n p{{i}}.generated_number README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests power(2, {{i}})\n {% if not loop.last %} + {% endif %}\n {% endfor %}\n + 1\n as generated_number\n\n from\n\n {% for i in range(n) %}\n p as p{{i}}\n {% if not loop.last %} cross join {% endif %}\n {% endfor %}\n\n )\n\n select *\n from unioned\n where generated_number <= {{upper_bound}}\n order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.metric_get_powers_of_two" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.0761335, "supported_languages": null }, "macro.metrics.validate_grain": { "unique_id": "macro.metrics.validate_grain", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/validation/validate_grain.sql", "original_file_path": "macros/validation/validate_grain.sql", "name": "validate_grain", "macro_sql": "{% macro validate_grain(grain, metric_tree, metrics_dictionary, secondary_calculations) %}\n\n {# We loop through the full set here to ensure that the provided grain works for all metrics\n returned or used, not just those listed #}\n\n {% for metric_name in metric_tree.full_set %}\n {% set metric_relation = metric(metric_name)%}\n {% if grain not in metric_relation.time_grains%}\n {% if metric_name not in metric_tree.base_set %}\n {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric_name ~ \" is an upstream metric of one of the provided metrics. The grain \" ~ grain ~ \" is not defined in its metric definition.\") %}\n {% else %}\n {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric_name ~ \" does not have the provided time grain \" ~ grain ~ \" defined in the metric definition.\") %}\n {% endif %}\n {% endif %}\n {% endfor %}\n\n {% if grain == 'all_time' %}\n\n {% if secondary_calculations | length > 0 %}\n {%- do exceptions.raise_compiler_error(\"The selected grain - all_time - does not support secondary calculations.\") %}\n {% endif %}\n\n {% for metric_name in metric_tree.full_set %}\n {% if metrics_dictionary[metric_name].window is not none%}\n {%- do exceptions.raise_compiler_error(\"The selected grain - all_time - does not support metrics with window definitions.\") %}\n {% endif%}\n {% endfor%}\n\n {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.0794134, "supported_languages": null }, "macro.metrics.validate_metric_config": { "unique_id": "macro.metrics.validate_metric_config", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/validation/validate_metric_config.sql", "original_file_path": "macros/validation/validate_metric_config.sql", "name": "validate_metric_config", "macro_sql": "{%- macro validate_metric_config(metrics_dictionary) -%}\n\n {#- We loop through the metrics dictionary here to ensure that\n 1) all configs are real configs we know about\n 2) all of those have valid values passed\n returned or used, not just those listed -#}\n\n {%- set accepted_configs = {\n \"enabled\" : {\"accepted_values\" : [True, False]},\n \"treat_null_values_as_zero\" : {\"accepted_values\" : [True, False]}\n }\n -%}\n\n {%- for metric in metrics_dictionary -%}\n {%- set metric_config = metrics_dictionary[metric].get(\"config\", None) -%}\n {%- if metric_config -%}\n {%- for config in metric_config -%}\n {%- set config_value = metric_config[config] -%}\n {#- some wonkiness here -- metric_config is not a dictionary, it's a MetricConfig object, so can't use the items() method -#}\n {#- check that the config is one that we expect -#}\n {%- if not accepted_configs[config] -%}\n {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric ~ \" has an invalid config option. The config '\" ~ config ~ \"' is not accepted.\") -%}\n {%- endif -%}\n {#- check that the config datatype is expected -#}\n {%- if accepted_configs[config] -%}\n {%- set accepted_values = accepted_configs[config][\"accepted_values\"] -%}\n {%- if not config_value in accepted_values -%}\n {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric ~ \" has an invalid config value specified. The config '\" ~ config ~ \"' expects one of \" ~ accepted_values) -%}\n {%- endif -%}\n {% endif %}\n {%- endfor %}\n {%- endif -%}\n {%- endfor %}\n \n\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.082244, "supported_languages": null }, "macro.metrics.validate_aggregate_coherence": { "unique_id": "macro.metrics.validate_aggregate_coherence", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/validation/validate_aggregate_coherence.sql", "original_file_path": "macros/validation/validate_aggregate_coherence.sql", "name": "validate_aggregate_coherence", "macro_sql": "{% macro validate_aggregate_coherence(metric_aggregate, calculation_aggregate) %}\n {% set allowlist = metrics.get_metric_allowlist()[metric_aggregate] %}\n\n {% if (calculation_aggregate not in allowlist) %}\n {% do exceptions.raise_compiler_error(\"Can't calculate secondary aggregate \" ~ calculation_aggregate ~ \" when metric's aggregation is \" ~ metric_aggregate ~ \". Allowed options are \" ~ allowlist ~ \".\") %}\n {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.get_metric_allowlist" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.0835063, "supported_languages": null }, "macro.metrics.validate_derived_metrics": { "unique_id": "macro.metrics.validate_derived_metrics", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/validation/validate_derived_metrics.sql", "original_file_path": "macros/validation/validate_derived_metrics.sql", "name": "validate_derived_metrics", "macro_sql": "{% macro validate_derived_metrics(metric_tree) %}\n\n {# We loop through the full set here to ensure that metrics that aren't listed \n as derived are not dependent on another metric. #}\n\n {% for metric_name in metric_tree.full_set %}\n {% set metric_relation = metric(metric_name)%}\n {% set metric_relation_depends_on = metric_relation.metrics | join (\",\") %}\n {% if metric_relation.calculation_method != \"derived\" and metric_relation.metrics | length > 0 %}\n {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric_relation.name ~\" also references '\" ~ metric_relation_depends_on ~ \"' but its calculation method is '\" ~ metric_relation.calculation_method ~ \"'. Only metrics of calculation method derived can reference other metrics.\") %}\n {%- endif %}\n {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.0851226, "supported_languages": null }, "macro.metrics.validate_dimension_list": { "unique_id": "macro.metrics.validate_dimension_list", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/validation/validate_dimension_list.sql", "original_file_path": "macros/validation/validate_dimension_list.sql", "name": "validate_dimension_list", "macro_sql": "{% macro validate_dimension_list(dimensions, metric_tree) %}\n \n {# This macro exists to invalidate dimensions provided to the metric macro that are not viable \n candidates based on metric definitions. This prevents downstream run issues when the sql \n logic attempts to group by provided dimensions and fails because they don't exist for \n one or more of the required metrics. #}\n\n {% set calendar_dimensions = var('custom_calendar_dimension_list',[]) %}\n\n {% for dim in dimensions %}\n\n {# Now we loop through all the metrics in the full set, which is all metrics, parent metrics,\n and derived metrics associated with the macro call #}\n {% for metric_name in metric_tree.full_set %}\n {% set metric_relation = metric(metric_name)%}\n \n {# This macro returns a list of dimensions that are inclusive of calendar dimensions #}\n {% set complete_dimension_list = metric_relation.dimensions + calendar_dimensions %}\n\n {# If the dimension provided is not present in the loop metrics dimension list then we \n will raise an error. If it is missing in ANY of the metrics, it cannot be used in the \n macro call. Only dimensions that are valid in all metrics are valid in the macro call #}\n {% if dim not in complete_dimension_list %}\n {% if dim not in calendar_dimensions %}\n {% do exceptions.raise_compiler_error(\"The dimension \" ~ dim ~ \" is not part of the metric \" ~ metric_relation.name) %}\n {% else %}\n {% do exceptions.raise_compiler_error(\"The dimension \" ~ dim ~ \" is not part of the metric \" ~ metric_relation.name ~ \". If the dimension is from a custom calendar table, please create the custom_calendar_dimension_list as shown in the README.\") %}\n {% endif %}\n {% endif %}\n\n {%endfor%}\n {%endfor%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.087564, "supported_languages": null }, "macro.metrics.validate_grain_order": { "unique_id": "macro.metrics.validate_grain_order", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/validation/validate_grain_order.sql", "original_file_path": "macros/validation/validate_grain_order.sql", "name": "validate_grain_order", "macro_sql": "{% macro validate_grain_order(metric_grain, calculation_grain) %}\n {% set grains = metrics.get_grain_order() %}\n \n {% if metric_grain not in grains or calculation_grain not in grains %}\n {% set comma = joiner(\", \") %}\n {% do exceptions.raise_compiler_error(\"Unknown grains: [\" ~ (comma() ~ metric_grain if metric_grain not in grains) ~ (comma() ~ calculation_grain if calculation_grain not in grains) ~ \"]\") %}\n {% endif %}\n\n {% set metric_grain_index = grains.index(metric_grain) %}\n {% set calculation_grain_index = grains.index(calculation_grain) %}\n\n {% if (calculation_grain_index < metric_grain_index) %}\n {% do exceptions.raise_compiler_error(\"Can't calculate secondary metric at \" ~ calculation_grain ~\"-level when metric is at \" ~ metric_grain ~ \"-level\") %}\n {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.get_grain_order" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.0898423, "supported_languages": null }, "macro.metrics.validate_develop_grain": { "unique_id": "macro.metrics.validate_develop_grain", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/validation/validate_develop_grain.sql", "original_file_path": "macros/validation/validate_develop_grain.sql", "name": "validate_develop_grain", "macro_sql": "{% macro validate_develop_grain(grain, metric_tree, metrics_dictionary, secondary_calculations) %}\n\n {# We loop through the full set here to ensure that the provided grain works for all metrics\n returned or used, not just those listed #}\n\n {% if grain == 'all_time' %}\n\n {% if secondary_calculations | length > 0 %}\n {%- do exceptions.raise_compiler_error(\"The selected grain - all_time - does not support secondary calculations.\") %}\n {% endif %}\n\n {% for metric in metrics_dictionary %}\n {% if metric.window is not none %}\n {%- do exceptions.raise_compiler_error(\"The selected grain - all_time - does not support metrics with window definitions.\") %}\n {% endif %}\n {% endfor%}\n\n {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.091497, "supported_languages": null }, "macro.metrics.is_valid_dimension": { "unique_id": "macro.metrics.is_valid_dimension", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/validation/is_valid_dimension.sql", "original_file_path": "macros/validation/is_valid_dimension.sql", "name": "is_valid_dimension", "macro_sql": "{% macro is_valid_dimension(dim_name, dimension_list) %}\n {% if execute %}\n {%- if dim_name not in dimension_list -%}\n {%- do exceptions.raise_compiler_error(dim_name ~ \" is not a valid dimension\") %}\n {%- endif -%}\n {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.092449, "supported_languages": null }, "macro.metrics.gen_joined_metrics_cte": { "unique_id": "macro.metrics.gen_joined_metrics_cte", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_joined_metrics_cte.sql", "original_file_path": "macros/sql_gen/gen_joined_metrics_cte.sql", "name": "gen_joined_metrics_cte", "macro_sql": "{%- macro gen_joined_metrics_cte(metric_tree, grain, dimensions, calendar_dimensions, secondary_calculations, relevant_periods, metrics_dictionary) -%}\n {{ return(adapter.dispatch('gen_joined_metrics_cte', 'metrics')(metric_tree, grain, dimensions, calendar_dimensions, secondary_calculations, relevant_periods, metrics_dictionary)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__gen_joined_metrics_cte" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1022422, "supported_languages": null }, "macro.metrics.default__gen_joined_metrics_cte": { "unique_id": "macro.metrics.default__gen_joined_metrics_cte", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_joined_metrics_cte.sql", "original_file_path": "macros/sql_gen/gen_joined_metrics_cte.sql", "name": "default__gen_joined_metrics_cte", "macro_sql": "{% macro default__gen_joined_metrics_cte(metric_tree, grain, dimensions, calendar_dimensions, secondary_calculations, relevant_periods, metrics_dictionary) %}\n\n{#- This section is a hacky workaround to account for postgres changes -#}\n{%- set cte_numbers = [] -%}\n{%- set unique_cte_numbers = [] -%}\n{#- the cte numbers are more representative of node depth -#}\n{%- if metric_tree.expression_set | length > 0 -%}\n {%- for metric_name in metric_tree.ordered_expression_set -%}\n {%- do cte_numbers.append(metric_tree.ordered_expression_set[metric_name]) -%}\n {%- endfor -%}\n {%- for cte_num in cte_numbers|unique -%}\n {%- do unique_cte_numbers.append(cte_num) -%}\n {%- endfor -%}\n{%- endif -%}\n\n{% set dimension_count = (dimensions | length + calendar_dimensions | length) | int %}\n\n, first_join_metrics as (\n\n select\n {% if grain != 'all_time'-%}\n date_{{grain}}\n {%- else -%}\n 1 as comma_placeholder\n {%- endif -%}\n {%- for calendar_dim in calendar_dimensions %}\n , coalesce(\n {%- for metric_name in metric_tree.parent_set %}\n {{metric_name}}__final.{{ calendar_dim }}{%- if not loop.last -%},{% endif %}\n {%- if metric_tree.parent_set | length == 1 -%}\n , NULL\n {%- endif -%}\n {% endfor %}\n ) as {{calendar_dim}}\n {% endfor %}\n\n {%- for period in relevant_periods %}\n , coalesce(\n {%- for metric_name in metric_tree.parent_set %}\n {{metric_name}}__final.date_{{ period }} {%- if not loop.last -%},{% endif %}\n {%- if metric_tree.parent_set | length == 1 %}\n , NULL\n {%- endif -%}\n {% endfor %}\n ) as date_{{period}}\n {%- endfor %}\n\n\n {%- for dim in dimensions %}\n , coalesce(\n {%- for metric_name in metric_tree.parent_set %}\n {{metric_name}}__final.{{ dim }} {%- if not loop.last -%},{% endif %}\n {%- if metric_tree.parent_set | length == 1 %}\n , NULL\n {%- endif -%}\n {% endfor %}\n ) as {{dim}}\n {%- endfor %}\n {% for metric_name in metric_tree.parent_set %}\n , {{metric_name}} as {{metric_name}}\n {%- endfor %} \n\n {%- if grain == 'all_time' %}\n \n , coalesce(\n {%- for metric_name in metric_tree.parent_set %}\n {{metric_name}}__final.metric_start_date {%- if not loop.last -%},{% endif %}\n {%- if metric_tree.parent_set | length == 1 %}\n , NULL\n {%- endif -%}\n {% endfor %}\n ) as metric_start_date\n\n , coalesce(\n {%- for metric_name in metric_tree.parent_set %}\n {{metric_name}}__final.metric_end_date {%- if not loop.last -%},{% endif %}\n {%- if metric_tree.parent_set | length == 1 %}\n , NULL\n {%- endif -%}\n {% endfor %}\n ) as metric_end_date\n\n {%- endif %}\n\n from \n {#- Loop through leaf metric list -#}\n {%- for metric_name in metric_tree.parent_set -%}\n {%- if loop.first %}\n {{ metric_name }}__final\n {%- else %}\n {%- if grain != 'all_time'%}\n full outer join {{metric_name}}__final\n using (\n date_{{grain}}\n {%- for calendar_dim in calendar_dimensions %}\n , {{ calendar_dim }}\n {% endfor %}\n {%- for dim in dimensions %}\n , {{ dim }}\n {%- endfor %}\n )\n {%- else -%}\n {% if dimension_count != 0 %}\n full outer join {{metric_name}}__final\n using (\n {%- for calendar_dim in calendar_dimensions %}\n {%- if not loop.first -%},{%- endif -%} {{ calendar_dim }}\n {% endfor -%}\n \n {%- for dim in dimensions %}\n {%- if loop.first and calendar_dimensions | length == 0 -%}\n {{ dim }}\n {%- elif not loop.first and calendar_dimensions | length == 0 -%}\n , {{ dim }}\n {%- else -%}\n , {{ dim }}\n {%- endif -%}\n {%- endfor -%}\n )\n {%- elif dimension_count == 0 %}\n cross join {{metric_name}}__final\n {%- endif %}\n {%- endif %}\n {%- endif -%}\n {%- endfor %} \n)\n\n{%- for cte_number in cte_numbers | unique | sort %}\n {% set previous_cte_number = cte_number - 1 %}\n, join_metrics__{{cte_number}} as (\n\n select \n {% if loop.first %}\n first_join_metrics.*\n {%- else %}\n join_metrics__{{previous_cte_number}}.*\n {%- endif %}\n {%- for metric in metric_tree.expression_set %}\n {%- if metric_tree.ordered_expression_set[metric] == cte_number %}\n {#- this logic will parse an expression for divisions signs (/) and wrap all divisors in nullif functions to prevent divide by zero -#}\n {#- \"1 / 2 / 3 / ... / N\" results in \"1 / nullif(2, 0) / nullif(3, 0) / ... / nullif(N, 0)\" -#}\n {%- set metric_expression = metrics_dictionary[metric].expression %}\n {%- if \"/\" in metric_expression -%}\n {%- set split_division_metric = metric_expression.split('/') -%}\n {%- set dividend = split_division_metric[0] -%}\n {%- set divisors = split_division_metric[1:] | list -%}\n {%- set expression = dividend ~ \" / nullif(\" ~ divisors | join(\", 0) / nullif(\") ~ \", 0)\" -%}\n {%- else -%}\n {%- set expression = metric_expression -%}\n {%- endif %}\n , ({{ expression | replace(\".metric_value\",\"\") }}) as {{ metrics_dictionary[metric].name }}\n {%- endif -%}\n {%- endfor -%}\n\n {% if loop.first %}\n from first_join_metrics\n {%- else %}\n from join_metrics__{{previous_cte_number}}\n {%- endif %}\n\n\n)\n \n{%- endfor %}\n\n, joined_metrics as (\n\n select \n\n {%- if grain != 'all_time' %}\n date_{{grain}}\n {% else %}\n metric_start_date\n , metric_end_date\n {%- endif -%}\n {%- for period in relevant_periods %}\n ,date_{{ period }}\n {%- endfor %}\n {%- for calendar_dim in calendar_dimensions %}\n , {{ calendar_dim }}\n {%- endfor %}\n {%- for dim in dimensions %}\n , {{ dim }}\n {%- endfor %}\n {%- for metric_name in metric_tree.parent_set %}\n , {{metric_name}}\n {%- endfor %} \n {%- for metric in metric_tree.expression_set %}\n , {{ metric }}\n {% endfor -%}\n \n {% if metric_tree.expression_set | length == 0 %}\n from first_join_metrics\n {% else %}\n from join_metrics__999\n {% endif %}\n\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1125407, "supported_languages": null }, "macro.metrics.gen_order_by": { "unique_id": "macro.metrics.gen_order_by", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_order_by.sql", "original_file_path": "macros/sql_gen/gen_order_by.sql", "name": "gen_order_by", "macro_sql": "{%- macro gen_order_by(grain, dimensions, calendar_dimensions, relevant_periods) -%}\n {{ return(adapter.dispatch('gen_order_by', 'metrics')(grain, dimensions, calendar_dimensions, relevant_periods)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__gen_order_by" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1139398, "supported_languages": null }, "macro.metrics.default__gen_order_by": { "unique_id": "macro.metrics.default__gen_order_by", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_order_by.sql", "original_file_path": "macros/sql_gen/gen_order_by.sql", "name": "default__gen_order_by", "macro_sql": "{% macro default__gen_order_by(grain, dimensions, calendar_dimensions, relevant_periods) %}\n\n{#- This model exclusively exists because dynamic group by counts based on range \nwere too funky when we hardcoded values for 1+1. So we're getting around it by\nmaking it its own function -#}\n\n{#- The issue arises when we have an initial date column (ie date_month) where month \nis also included in the relevent periods. This causes issues and so we need to\nremove the grain from the list of relevant periods so it isnt double counted -#}\n\n {%- set dimension_length = dimensions | length -%}\n {%- set calendar_dimension_length = calendar_dimensions | length -%}\n\n {%- set cleaned_relevant_periods = [] -%}\n {%- set period_length = relevant_periods | length -%}\n {%- set total_length = dimension_length + period_length + calendar_dimension_length -%}\n\n {% if grain != 'all_time' %}\n order by\n {% for number in range(1,total_length+2) -%}\n {{ number }} desc {%- if not loop.last -%}, {% endif -%}\n {% endfor -%}\n {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1152565, "supported_languages": null }, "macro.metrics.gen_calendar_table_join": { "unique_id": "macro.metrics.gen_calendar_table_join", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_calendar_table_join.sql", "original_file_path": "macros/sql_gen/gen_calendar_table_join.sql", "name": "gen_calendar_table_join", "macro_sql": "{% macro gen_calendar_table_join(metric_dictionary, calendar_tbl) %}\n {{ return(adapter.dispatch('gen_calendar_table_join', 'metrics')(metric_dictionary, calendar_tbl)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__gen_calendar_table_join" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1184008, "supported_languages": null }, "macro.metrics.default__gen_calendar_table_join": { "unique_id": "macro.metrics.default__gen_calendar_table_join", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_calendar_table_join.sql", "original_file_path": "macros/sql_gen/gen_calendar_table_join.sql", "name": "default__gen_calendar_table_join", "macro_sql": "{% macro default__gen_calendar_table_join(metric_dictionary, calendar_tbl) %}\n\n left join {{calendar_tbl}} calendar_table\n {% if metric_dictionary.window is not none %}\n on cast(base_model.{{metric_dictionary.timestamp}} as date) > dateadd({{metric_dictionary.window.period}}, -{{metric_dictionary.window.count}}, calendar_table.date_day)\n and cast(base_model.{{metric_dictionary.timestamp}} as date) <= calendar_table.date_day\n {% else %}\n on cast(base_model.{{metric_dictionary.timestamp}} as date) = calendar_table.date_day\n {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.119204, "supported_languages": null }, "macro.metrics.bigquery__gen_calendar_table_join": { "unique_id": "macro.metrics.bigquery__gen_calendar_table_join", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_calendar_table_join.sql", "original_file_path": "macros/sql_gen/gen_calendar_table_join.sql", "name": "bigquery__gen_calendar_table_join", "macro_sql": "{% macro bigquery__gen_calendar_table_join(metric_dictionary, calendar_tbl) %}\n\n left join {{calendar_tbl}} calendar_table\n {% if metric_dictionary.window is not none %}\n on cast(base_model.{{metric_dictionary.timestamp}} as date) > date_sub(calendar_table.date_day, interval {{metric_dictionary.window.count}} {{metric_dictionary.window.period}})\n and cast(base_model.{{metric_dictionary.timestamp}} as date) <= calendar_table.date_day\n {% else %}\n on cast(base_model.{{metric_dictionary.timestamp}} as date) = calendar_table.date_day\n {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1199644, "supported_languages": null }, "macro.metrics.postgres__gen_calendar_table_join": { "unique_id": "macro.metrics.postgres__gen_calendar_table_join", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_calendar_table_join.sql", "original_file_path": "macros/sql_gen/gen_calendar_table_join.sql", "name": "postgres__gen_calendar_table_join", "macro_sql": "{% macro postgres__gen_calendar_table_join(metric_dictionary, calendar_tbl) %}\n\n left join {{calendar_tbl}} calendar_table\n {% if metric_dictionary.window is not none %}\n on cast(base_model.{{metric_dictionary.timestamp}} as date) > calendar_table.date_day - interval '{{metric_dictionary.window.count}} {{metric_dictionary.window.period}}'\n and cast(base_model.{{metric_dictionary.timestamp}} as date) <= calendar_table.date_day\n {% else %}\n on cast(base_model.{{metric_dictionary.timestamp}} as date) = calendar_table.date_day\n {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1206932, "supported_languages": null }, "macro.metrics.redshift__gen_calendar_table_join": { "unique_id": "macro.metrics.redshift__gen_calendar_table_join", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_calendar_table_join.sql", "original_file_path": "macros/sql_gen/gen_calendar_table_join.sql", "name": "redshift__gen_calendar_table_join", "macro_sql": "{% macro redshift__gen_calendar_table_join(metric_dictionary, calendar_tbl) %}\n\n left join {{calendar_tbl}} calendar_table\n {% if metric_dictionary.window is not none %}\n on cast(base_model.{{metric_dictionary.timestamp}} as date) > dateadd({{metric_dictionary.window.period}}, -{{metric_dictionary.window.count}}, calendar_table.date_day)\n and cast(base_model.{{metric_dictionary.timestamp}} as date) <= calendar_table.date_day\n {% else %}\n on cast(base_model.{{metric_dictionary.timestamp}} as date) = calendar_table.date_day\n {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.121411, "supported_languages": null }, "macro.metrics.gen_calendar_cte": { "unique_id": "macro.metrics.gen_calendar_cte", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_calendar_cte.sql", "original_file_path": "macros/sql_gen/gen_calendar_cte.sql", "name": "gen_calendar_cte", "macro_sql": "{%- macro gen_calendar_cte(calendar_tbl, start_date, end_date) -%}\n {{ return(adapter.dispatch('gen_calendar_cte', 'metrics')(calendar_tbl, start_date, end_date)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__gen_calendar_cte" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1225598, "supported_languages": null }, "macro.metrics.default__gen_calendar_cte": { "unique_id": "macro.metrics.default__gen_calendar_cte", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_calendar_cte.sql", "original_file_path": "macros/sql_gen/gen_calendar_cte.sql", "name": "default__gen_calendar_cte", "macro_sql": "{%- macro default__gen_calendar_cte(calendar_tbl, start_date, end_date) %}\n\nwith calendar as (\n\n {# This CTE creates our base calendar and then limits the date range for the \n start and end date provided by the macro call -#}\n select \n README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests \n from {{ calendar_tbl }}\n {% if start_date or end_date %}\n {%- if start_date and end_date -%}\n where date_day >= cast('{{ start_date }}' as date)\n and date_day <= cast('{{ end_date }}' as date)\n {%- elif start_date and not end_date -%}\n where date_day >= cast('{{ start_date }}' as date)\n {%- elif end_date and not start_date -%}\n where date_day <= cast('{{ end_date }}' as date)\n {%- endif -%} \n {% endif %} \n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1235013, "supported_languages": null }, "macro.metrics.gen_secondary_calculation_cte": { "unique_id": "macro.metrics.gen_secondary_calculation_cte", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_secondary_calculations_cte.sql", "original_file_path": "macros/sql_gen/gen_secondary_calculations_cte.sql", "name": "gen_secondary_calculation_cte", "macro_sql": "{%- macro gen_secondary_calculation_cte(metric_tree, grain, dimensions, secondary_calculations, calendar_dimensions, metric_dictionary\n) -%}\n {{ return(adapter.dispatch('gen_secondary_calculation_cte', 'metrics')(metric_tree, grain, dimensions, secondary_calculations, calendar_dimensions, metric_dictionary)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__gen_secondary_calculation_cte" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.125136, "supported_languages": null }, "macro.metrics.default__gen_secondary_calculation_cte": { "unique_id": "macro.metrics.default__gen_secondary_calculation_cte", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_secondary_calculations_cte.sql", "original_file_path": "macros/sql_gen/gen_secondary_calculations_cte.sql", "name": "default__gen_secondary_calculation_cte", "macro_sql": "{% macro default__gen_secondary_calculation_cte(metric_tree, grain, dimensions, secondary_calculations, calendar_dimensions, metric_dictionary) %}\n\n{%- set metric_config = {} -%}\n{%- for metric_name, data in metric_dictionary.items() -%}\n {%- do metric_config.update({metric_name: data.config}) -%}\n{%- endfor -%}\n\n{#- The logic for secondary calculations is past the point where having calendar + dim\nin a single list would create issues. So here we join them together. Plus it makes it\neasier for not having to update the working secondary calc logic -#}\n{%- set dimensions = dimensions+calendar_dimensions -%}\n\n, secondary_calculations as (\n\n select \n *\n\n {%- for calc_config in secondary_calculations %}\n\n {# This step exists to only provide the limited list if that is provided #}\n {%- if calc_config.metric_list | length > 0 -%}\n\n {%- for metric_name in calc_config.metric_list %}\n , {{ metrics.perform_secondary_calculation(metric_name, grain, dimensions, calc_config, metric_config[metric_name]) }} as {{ metrics.generate_secondary_calculation_alias(metric_name,calc_config, grain, true) }}\n {%- endfor %} \n\n {%- else %}\n\n {%- for metric_name in metric_tree.base_set %}\n , {{ metrics.perform_secondary_calculation(metric_name, grain, dimensions, calc_config, metric_config[metric_name]) }} as {{ metrics.generate_secondary_calculation_alias(metric_name,calc_config, grain, true) }}\n {%- endfor %}\n\n {%- endif %}\n\n {%- endfor %}\n\n\n from {% if metric_tree.full_set | length > 1 -%} joined_metrics {%- else -%} {{ metric_tree.base_set[0] }}__final {%- endif %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.perform_secondary_calculation", "macro.metrics.generate_secondary_calculation_alias" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1276808, "supported_languages": null }, "macro.metrics.gen_filters": { "unique_id": "macro.metrics.gen_filters", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_filters.sql", "original_file_path": "macros/sql_gen/gen_filters.sql", "name": "gen_filters", "macro_sql": "{%- macro gen_filters(metric_dictionary, start_date, end_date) -%}\n {{ return(adapter.dispatch('gen_filters', 'metrics')(metric_dictionary, start_date, end_date)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__gen_filters" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.129012, "supported_languages": null }, "macro.metrics.default__gen_filters": { "unique_id": "macro.metrics.default__gen_filters", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_filters.sql", "original_file_path": "macros/sql_gen/gen_filters.sql", "name": "default__gen_filters", "macro_sql": "{%- macro default__gen_filters(metric_dictionary, start_date, end_date) -%}\n\n {#- metric start/end dates also applied here to limit incoming data -#}\n {% if start_date or end_date %}\n and (\n {% if start_date and end_date -%}\n cast(base_model.{{metric_dictionary.timestamp}} as date) >= cast('{{ start_date }}' as date)\n and cast(base_model.{{metric_dictionary.timestamp}} as date) <= cast('{{ end_date }}' as date)\n {%- elif start_date and not end_date -%}\n cast(base_model.{{metric_dictionary.timestamp}} as date) >= cast('{{ start_date }}' as date)\n {%- elif end_date and not start_date -%}\n cast(base_model.{{metric_dictionary.timestamp}} as date) <= cast('{{ end_date }}' as date)\n {%- endif %} \n )\n {% endif -%} \n\n {#- metric filter clauses... -#}\n {% if metric_dictionary.filters %}\n and (\n {% for filter in metric_dictionary.filters -%}\n {%- if not loop.first -%} and {% endif %}{{ filter.field }} {{ filter.operator }} {{ filter.value }}\n {% endfor -%}\n )\n {% endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1306193, "supported_languages": null }, "macro.metrics.gen_aggregate_cte": { "unique_id": "macro.metrics.gen_aggregate_cte", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_aggregate_cte.sql", "original_file_path": "macros/sql_gen/gen_aggregate_cte.sql", "name": "gen_aggregate_cte", "macro_sql": "{%- macro gen_aggregate_cte(metric_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, calendar_tbl, relevant_periods, calendar_dimensions) -%}\n {{ return(adapter.dispatch('gen_aggregate_cte', 'metrics')(metric_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, calendar_tbl, relevant_periods, calendar_dimensions)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__gen_aggregate_cte" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1325738, "supported_languages": null }, "macro.metrics.default__gen_aggregate_cte": { "unique_id": "macro.metrics.default__gen_aggregate_cte", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_aggregate_cte.sql", "original_file_path": "macros/sql_gen/gen_aggregate_cte.sql", "name": "default__gen_aggregate_cte", "macro_sql": "{%- macro default__gen_aggregate_cte(metric_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, calendar_tbl, relevant_periods, calendar_dimensions) %}\n\n, {{metric_dictionary.name}}__aggregate as (\n {# This is the most important CTE. Instead of joining all relevant information\n and THEN aggregating, we are instead aggregating from the beginning and then \n joining downstream for performance. Additionally, we're using a subquery instead \n of a CTE, which was significantly more performant during our testing. -#}\n select\n\n {%- if grain != 'all_time' %}\n date_{{grain}},\n\n {#- All of the other relevant periods that aren't currently selected as the grain\n are neccesary for downstream secondary calculations. We filter it on whether \n there are secondary calculations to reduce the need for overhead -#}\n {%- if secondary_calculations | length > 0 -%}\n {%- for period in relevant_periods %}\n date_{{ period }},\n {% endfor -%}\n {% endif -%}\n {% endif -%}\n\n {#- This is the consistent code you'll find that loops through the list of \n dimensions. It is used throughout this macro, with slight differences to \n account for comma syntax around loop last -#}\n {% for dim in dimensions %}\n {{ dim }},\n {%- endfor %}\n\n {%- for calendar_dim in calendar_dimensions %}\n {{ calendar_dim }},\n {% endfor -%}\n\n {#- This line performs the relevant aggregation by calling the \n gen_primary_metric_aggregate macro. Take a look at that one if you're curious -#}\n {{ metrics.gen_primary_metric_aggregate(metric_dictionary.calculation_method, 'property_to_aggregate') }} as {{ metric_dictionary.name }},\n\n {%- if grain != 'all_time' %}\n {{ bool_or('metric_date_day is not null') }} as has_data\n {% else %}\n min(metric_date_day) as metric_start_date,\n max(metric_date_day) as metric_end_date\n {% endif %}\n\n from ({{ metrics.gen_base_query(\n metric_dictionary=metric_dictionary,\n grain=grain, \n dimensions=dimensions, \n secondary_calculations=secondary_calculations, \n start_date=start_date, \n end_date=end_date, \n calendar_tbl=calendar_tbl, \n relevant_periods=relevant_periods, \n calendar_dimensions=calendar_dimensions) }}\n ) as base_query\n\n where 1=1\n\n {% if metric_dictionary.window is not none %}\n and date_{{grain}} = window_filter_date\n {% endif %}\n\n {{ metrics.gen_group_by(grain, dimensions, calendar_dimensions, relevant_periods) }}\n\n)\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.gen_primary_metric_aggregate", "macro.dbt.bool_or", "macro.metrics.gen_base_query", "macro.metrics.gen_group_by" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1352487, "supported_languages": null }, "macro.metrics.build_metric_sql": { "unique_id": "macro.metrics.build_metric_sql", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/build_metric_sql.sql", "original_file_path": "macros/sql_gen/build_metric_sql.sql", "name": "build_metric_sql", "macro_sql": "{%- macro build_metric_sql(metric_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, calendar_tbl, relevant_periods, calendar_dimensions, dimensions_provided) %}\n \n {%- set treat_null_values_as_zero = metric_dictionary.get(\"config\").get(\"treat_null_values_as_zero\", True) -%}\n {#- This is the SQL Gen part - we've broken each component out into individual macros -#}\n {#- We broke this out so it can loop for composite metrics -#}\n {{ metrics.gen_aggregate_cte(\n metric_dictionary=metric_dictionary,\n grain=grain, \n dimensions=dimensions, \n secondary_calculations=secondary_calculations,\n start_date=start_date, \n end_date=end_date, \n calendar_tbl=calendar_tbl, \n relevant_periods=relevant_periods, \n calendar_dimensions=calendar_dimensions\n ) }}\n \n {#- Adding conditional logic to exclude the unique combinations of dimensions if there are no dimensions -#}\n {%- if grain != \"all_time\" -%}\n\n {%- if dimensions_provided == true -%}\n \n {{ metrics.gen_dimensions_cte(\n metric_name=metric_dictionary.name, \n dimensions=dimensions\n ) }}\n \n {%- endif -%}\n\n\n {{ metrics.gen_spine_time_cte(\n metric_name=metric_dictionary.name, \n grain=grain, \n dimensions=dimensions, \n secondary_calculations=secondary_calculations, \n relevant_periods=relevant_periods, \n calendar_dimensions=calendar_dimensions, \n dimensions_provided=dimensions_provided\n )}}\n\n {%- endif -%}\n\n {{ metrics.gen_metric_cte(\n metric_name=metric_dictionary.name, \n grain=grain, \n dimensions=dimensions, \n secondary_calculations=secondary_calculations, \n start_date=start_date, \n end_date=end_date, \n relevant_periods=relevant_periods, \n calendar_dimensions=calendar_dimensions,\n treat_null_values_as_zero=treat_null_values_as_zero\n )}}\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.gen_aggregate_cte", "macro.metrics.gen_dimensions_cte", "macro.metrics.gen_spine_time_cte", "macro.metrics.gen_metric_cte" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1382394, "supported_languages": null }, "macro.metrics.gen_metric_cte": { "unique_id": "macro.metrics.gen_metric_cte", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_metric_cte.sql", "original_file_path": "macros/sql_gen/gen_metric_cte.sql", "name": "gen_metric_cte", "macro_sql": "{%- macro gen_metric_cte(metric_name, grain, dimensions, secondary_calculations, start_date, end_date, relevant_periods, calendar_dimensions, treat_null_values_as_zero) -%}\n {{ return(adapter.dispatch('gen_metric_cte', 'metrics')(metric_name, grain, dimensions, secondary_calculations, start_date, end_date, relevant_periods, calendar_dimensions, treat_null_values_as_zero)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__gen_metric_cte" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1435432, "supported_languages": null }, "macro.metrics.default__gen_metric_cte": { "unique_id": "macro.metrics.default__gen_metric_cte", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_metric_cte.sql", "original_file_path": "macros/sql_gen/gen_metric_cte.sql", "name": "default__gen_metric_cte", "macro_sql": "{%- macro default__gen_metric_cte(metric_name, grain, dimensions, secondary_calculations, start_date, end_date, relevant_periods, calendar_dimensions, treat_null_values_as_zero) %}\n\n, {{metric_name}}__final as (\n\n {%- if not treat_null_values_as_zero -%}\n {%- set metric_val = metric_name -%}\n {%- else -%}\n {%- set metric_val = \"coalesce(\" ~ metric_name ~ \", 0) as \" ~ metric_name -%}\n {%- endif %}\n \n select\n {% if grain != 'all_time' %}\n parent_metric_cte.date_{{grain}},\n {%- if secondary_calculations | length > 0 -%}\n {% for period in relevant_periods %}\n parent_metric_cte.date_{{ period }},\n {%- endfor -%}\n {%- endif -%}\n {%- endif -%}\n \n {%- for calendar_dim in calendar_dimensions %}\n parent_metric_cte.{{ calendar_dim }},\n {%- endfor %}\n\n {%- for dim in dimensions %}\n parent_metric_cte.{{ dim }},\n {%- endfor %}\n {{ metric_val }}\n \n {%- if grain == 'all_time' %}\n\n ,metric_start_date\n ,metric_end_date\n\n from {{metric_name}}__aggregate as parent_metric_cte\n\n {% else %}\n\n from {{metric_name}}__spine_time as parent_metric_cte\n left outer join {{metric_name}}__aggregate\n using (\n date_{{grain}}\n {%- for calendar_dim in calendar_dimensions %}\n , {{ calendar_dim }}\n {%- endfor %}\n {%- for dim in dimensions %}\n , {{ dim }}\n {%- endfor %}\n )\n\n {% if not start_date or not end_date -%}\n where (\n {% if not start_date and not end_date -%}\n parent_metric_cte.date_{{grain}} >= (\n select \n min(case when has_data then date_{{grain}} end) \n from {{metric_name}}__aggregate\n )\n and parent_metric_cte.date_{{grain}} <= (\n select \n max(case when has_data then date_{{grain}} end) \n from {{metric_name}}__aggregate\n )\n {% elif not start_date and end_date -%}\n parent_metric_cte.date_{{grain}} >= (\n select \n min(case when has_data then date_{{grain}} end) \n from {{metric_name}}__aggregate\n )\n {% elif start_date and not end_date -%}\n parent_metric_cte.date_{{grain}} <= (\n select \n max(case when has_data then date_{{grain}} end) \n from {{metric_name}}__aggregate\n )\n {%- endif %} \n ) \n {% endif %} \n {% endif -%}\n\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1466835, "supported_languages": null }, "macro.metrics.gen_primary_metric_aggregate": { "unique_id": "macro.metrics.gen_primary_metric_aggregate", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "name": "gen_primary_metric_aggregate", "macro_sql": " \n{%- macro gen_primary_metric_aggregate(aggregate, expression) -%}\n {{ return(adapter.dispatch('gen_primary_metric_aggregate', 'metrics')(aggregate, expression)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__gen_primary_metric_aggregate" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1492016, "supported_languages": null }, "macro.metrics.default__gen_primary_metric_aggregate": { "unique_id": "macro.metrics.default__gen_primary_metric_aggregate", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "name": "default__gen_primary_metric_aggregate", "macro_sql": "{%- macro default__gen_primary_metric_aggregate(aggregate, expression) -%}\n\n {%- if aggregate == 'count' -%}\n {{ return(adapter.dispatch('metric_count', 'metrics')(expression)) }}\n \n {%- elif aggregate == 'count_distinct' -%}\n {{ return(adapter.dispatch('metric_count_distinct', 'metrics')(expression)) }}\n \n {%- elif aggregate == 'average' -%}\n {{ return(adapter.dispatch('metric_average', 'metrics')(expression)) }}\n \n {%- elif aggregate == 'max' -%}\n {{ return(adapter.dispatch('metric_max', 'metrics')(expression)) }}\n \n {%- elif aggregate == 'min' -%}\n {{ return(adapter.dispatch('metric_min', 'metrics')(expression)) }}\n \n {%- elif aggregate == 'sum' -%}\n {{ return(adapter.dispatch('metric_sum', 'metrics')(expression)) }}\n\n {%- elif aggregate == 'derived' -%}\n {{ return(adapter.dispatch('metric_derived', 'metrics')(expression)) }}\n\n {%- else -%}\n {%- do exceptions.raise_compiler_error(\"Unknown aggregation style: \" ~ aggregate) -%} \n {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__metric_count", "macro.metrics.default__metric_count_distinct", "macro.metrics.default__metric_average", "macro.metrics.default__metric_max", "macro.metrics.default__metric_min", "macro.metrics.default__metric_sum", "macro.metrics.default__metric_derived" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1515384, "supported_languages": null }, "macro.metrics.default__metric_count": { "unique_id": "macro.metrics.default__metric_count", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "name": "default__metric_count", "macro_sql": "{% macro default__metric_count(expression) %}\n count({{ expression }})\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1518164, "supported_languages": null }, "macro.metrics.default__metric_count_distinct": { "unique_id": "macro.metrics.default__metric_count_distinct", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "name": "default__metric_count_distinct", "macro_sql": "{% macro default__metric_count_distinct(expression) %}\n count(distinct {{ expression }})\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1520483, "supported_languages": null }, "macro.metrics.default__metric_average": { "unique_id": "macro.metrics.default__metric_average", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "name": "default__metric_average", "macro_sql": "{% macro default__metric_average(expression) %}\n avg({{ expression }})\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1522722, "supported_languages": null }, "macro.metrics.redshift__metric_average": { "unique_id": "macro.metrics.redshift__metric_average", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "name": "redshift__metric_average", "macro_sql": "{% macro redshift__metric_average(expression) %}\n avg(cast({{ expression }} as float))\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1524978, "supported_languages": null }, "macro.metrics.default__metric_max": { "unique_id": "macro.metrics.default__metric_max", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "name": "default__metric_max", "macro_sql": "{% macro default__metric_max(expression) %}\n max({{ expression }})\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1527164, "supported_languages": null }, "macro.metrics.default__metric_min": { "unique_id": "macro.metrics.default__metric_min", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "name": "default__metric_min", "macro_sql": "{% macro default__metric_min(expression) %}\n min({{ expression }})\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1529336, "supported_languages": null }, "macro.metrics.default__metric_sum": { "unique_id": "macro.metrics.default__metric_sum", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "name": "default__metric_sum", "macro_sql": "{% macro default__metric_sum(expression) %}\n sum({{ expression }})\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1531534, "supported_languages": null }, "macro.metrics.default__metric_derived": { "unique_id": "macro.metrics.default__metric_derived", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "original_file_path": "macros/sql_gen/gen_primary_metric_aggregate.sql", "name": "default__metric_derived", "macro_sql": "{% macro default__metric_derived(expression) %}\n {{ expression }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.153369, "supported_languages": null }, "macro.metrics.gen_spine_time_cte": { "unique_id": "macro.metrics.gen_spine_time_cte", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_spine_time_cte.sql", "original_file_path": "macros/sql_gen/gen_spine_time_cte.sql", "name": "gen_spine_time_cte", "macro_sql": "{%- macro gen_spine_time_cte(metric_name, grain, dimensions, secondary_calculations, relevant_periods, calendar_dimensions, dimensions_provided) -%}\n {{ return(adapter.dispatch('gen_spine_time_cte', 'metrics')(metric_name, grain, dimensions, secondary_calculations, relevant_periods, calendar_dimensions, dimensions_provided)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__gen_spine_time_cte" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1550615, "supported_languages": null }, "macro.metrics.default__gen_spine_time_cte": { "unique_id": "macro.metrics.default__gen_spine_time_cte", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_spine_time_cte.sql", "original_file_path": "macros/sql_gen/gen_spine_time_cte.sql", "name": "default__gen_spine_time_cte", "macro_sql": "{% macro default__gen_spine_time_cte(metric_name, grain, dimensions, secondary_calculations, relevant_periods, calendar_dimensions, dimensions_provided) %}\n\n, {{metric_name}}__spine_time as (\n\n select\n calendar.date_{{grain}}\n\n {%- if secondary_calculations | length > 0 -%}\n {% for period in relevant_periods %}\n {%- if period != grain -%}\n , calendar.date_{{ period }}\n {%- endif -%}\n {% endfor -%}\n {% endif -%}\n\n {% for calendar_dim in calendar_dimensions %}\n , calendar.{{ calendar_dim }}\n {%- endfor %}\n\n {%- for dim in dimensions %}\n , {{metric_name}}__dims.{{ dim }}\n {%- endfor %}\n\n from calendar\n {%- if dimensions_provided %}\n cross join {{metric_name}}__dims\n {%- endif %}\n {{ metrics.gen_group_by(grain,dimensions,calendar_dimensions,relevant_periods) }}\n\n)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.gen_group_by" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1564987, "supported_languages": null }, "macro.metrics.gen_group_by": { "unique_id": "macro.metrics.gen_group_by", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_group_by.sql", "original_file_path": "macros/sql_gen/gen_group_by.sql", "name": "gen_group_by", "macro_sql": "{%- macro gen_group_by(grain, dimensions, calendar_dimensions, relevant_periods) -%}\n {{ return(adapter.dispatch('gen_group_by', 'metrics')(grain, dimensions, calendar_dimensions, relevant_periods)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__gen_group_by" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1578677, "supported_languages": null }, "macro.metrics.default__gen_group_by": { "unique_id": "macro.metrics.default__gen_group_by", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_group_by.sql", "original_file_path": "macros/sql_gen/gen_group_by.sql", "name": "default__gen_group_by", "macro_sql": "{% macro default__gen_group_by(grain, dimensions, calendar_dimensions, relevant_periods) %}\n\n{#- This model exclusively exists because dynamic group by counts based on range \nwere too funky when we hardcoded values for 1+1. So we're getting around it by\nmaking it its own function -#}\n\n{#- The issue arises when we have an initial date column (ie date_month) where month \nis also included in the relevent periods. This causes issues and so we need to\nremove the grain from the list of relevant periods so it isnt double counted -#}\n\n {%- set dimension_length = dimensions | length -%}\n {%- set calendar_dimension_length = calendar_dimensions | length -%}\n\n {%- set cleaned_relevant_periods = [] -%}\n {%- set period_length = relevant_periods | length -%}\n {%- set total_length = dimension_length + period_length + calendar_dimension_length -%}\n\n {% if grain == 'all_time' %}\n {% if total_length > 0%}\n group by\n {% for number in range(1,total_length+1) -%}\n {{ number }} {%- if not loop.last -%}, {% endif -%}\n {% endfor -%}\n {% endif %}\n {% else %}\n group by\n {% for number in range(1,total_length+2) -%}\n {{ number }} {%- if not loop.last -%}, {% endif -%}\n {% endfor -%}\n {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1597931, "supported_languages": null }, "macro.metrics.gen_dimensions_cte": { "unique_id": "macro.metrics.gen_dimensions_cte", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_dimensions_cte.sql", "original_file_path": "macros/sql_gen/gen_dimensions_cte.sql", "name": "gen_dimensions_cte", "macro_sql": "{%- macro gen_dimensions_cte(metric_name, dimensions) -%}\n {{ return(adapter.dispatch('gen_dimensions_cte', 'metrics')(metric_name, dimensions)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__gen_dimensions_cte" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1607206, "supported_languages": null }, "macro.metrics.default__gen_dimensions_cte": { "unique_id": "macro.metrics.default__gen_dimensions_cte", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_dimensions_cte.sql", "original_file_path": "macros/sql_gen/gen_dimensions_cte.sql", "name": "default__gen_dimensions_cte", "macro_sql": "{% macro default__gen_dimensions_cte(metric_name, dimensions) %}\n\n, {{metric_name}}__dims as (\n select distinct\n {% for dim in dimensions %}\n {{ dim }}{%- if not loop.last -%},{% endif -%}\n {%- endfor %}\n \n from {{metric_name}}__aggregate\n)\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1612897, "supported_languages": null }, "macro.metrics.gen_base_query": { "unique_id": "macro.metrics.gen_base_query", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_base_query.sql", "original_file_path": "macros/sql_gen/gen_base_query.sql", "name": "gen_base_query", "macro_sql": "{% macro gen_base_query(metric_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, calendar_tbl, relevant_periods, calendar_dimensions) %}\n {{ return(adapter.dispatch('gen_base_query', 'metrics')(metric_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, calendar_tbl, relevant_periods, calendar_dimensions)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__gen_base_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1632955, "supported_languages": null }, "macro.metrics.default__gen_base_query": { "unique_id": "macro.metrics.default__gen_base_query", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_base_query.sql", "original_file_path": "macros/sql_gen/gen_base_query.sql", "name": "default__gen_base_query", "macro_sql": "{% macro default__gen_base_query(metric_dictionary, grain, dimensions, secondary_calculations, start_date, end_date, calendar_tbl, relevant_periods, calendar_dimensions) %}\n\n {# This is the \"base\" CTE which selects the fields we need to correctly \n calculate the metric. #}\n select \n \n cast(base_model.{{metric_dictionary.timestamp}} as date) as metric_date_day, -- timestamp field\n \n {%- if grain != 'all_time'%}\n calendar_table.date_{{ grain }} as date_{{grain}},\n {% endif -%}\n\n calendar_table.date_day as window_filter_date,\n\n {% if secondary_calculations | length > 0 -%}\n {%- for period in relevant_periods %}\n calendar_table.date_{{ period }},\n {% endfor -%}\n {%- endif -%}\n\n {%- for dim in dimensions %}\n base_model.{{ dim }},\n {%- endfor %}\n\n {%- for calendar_dim in calendar_dimensions %}\n calendar_table.{{ calendar_dim }},\n {%- endfor %}\n\n {%- if metric_dictionary.expression and metric_dictionary.expression | replace('*', '') | trim != '' %}\n ({{ metric_dictionary.expression }}) as property_to_aggregate\n {%- elif metric_dictionary.calculation_type == 'count' -%}\n {# We use 1 as the property to aggregate in count so that it matches count(*) #}\n 1 as property_to_aggregate \n {%- else -%}\n {%- do exceptions.raise_compiler_error(\"Expression to aggregate is required for non-count aggregation in metric `\" ~ metric_dictionary.name ~ \"`\") -%} \n {%- endif %}\n\n from {{ metric_dictionary.metric_model }} base_model \n {{ metrics.gen_calendar_table_join(metric_dictionary, calendar_tbl) }} \n\n where 1=1\n \n {{ metrics.gen_filters(metric_dictionary, start_date, end_date) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.gen_calendar_table_join", "macro.metrics.gen_filters" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1655202, "supported_languages": null }, "macro.metrics.gen_final_cte": { "unique_id": "macro.metrics.gen_final_cte", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_final_cte.sql", "original_file_path": "macros/sql_gen/gen_final_cte.sql", "name": "gen_final_cte", "macro_sql": "{%- macro gen_final_cte(metric_tree, grain, dimensions, calendar_dimensions, relevant_periods, secondary_calculations, where) -%}\n {{ return(adapter.dispatch('gen_final_cte', 'metrics')(metric_tree, grain, dimensions, calendar_dimensions, relevant_periods, secondary_calculations, where)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__gen_final_cte" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.168103, "supported_languages": null }, "macro.metrics.default__gen_final_cte": { "unique_id": "macro.metrics.default__gen_final_cte", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_final_cte.sql", "original_file_path": "macros/sql_gen/gen_final_cte.sql", "name": "default__gen_final_cte", "macro_sql": "{% macro default__gen_final_cte(metric_tree, grain, dimensions, calendar_dimensions, relevant_periods, secondary_calculations, where) %}\n\n\n{%- if secondary_calculations | length > 0 -%}\n\n , final as (\n\n select\n *\n from secondary_calculations\n )\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from final \n\n {# metric where clauses #}\n {%- if where %}\n where {{ where }}\n {%- endif %}\n {{ metrics.gen_order_by(grain, dimensions, calendar_dimensions, relevant_periods) }}\n\n{% else %}\n\n {%- if metric_tree.full_set | length > 1 %}\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from joined_metrics\n {#- metric where clauses -#}\n {%- if where %}\n where {{ where }}\n {%- endif -%}\n {{ metrics.gen_order_by(grain, dimensions, calendar_dimensions, relevant_periods) }}\n\n {% else %}\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{metric_tree.base_set[0]}}__final \n {%- if where %}\n where {{ where }}\n {%- endif -%}\n {{ metrics.gen_order_by(grain, dimensions, calendar_dimensions, relevant_periods) }}\n \n {%- endif %}\n\n\n{%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.gen_order_by" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1697826, "supported_languages": null }, "macro.metrics.redshift__gen_final_cte": { "unique_id": "macro.metrics.redshift__gen_final_cte", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_final_cte.sql", "original_file_path": "macros/sql_gen/gen_final_cte.sql", "name": "redshift__gen_final_cte", "macro_sql": "{% macro redshift__gen_final_cte(metric_tree, grain, dimensions, calendar_dimensions, relevant_periods, secondary_calculations, where) %}\n\n\n{%- if secondary_calculations | length > 0 -%}\n\n , final as (\n\n select\n *\n from secondary_calculations\n )\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from final \n\n {# metric where clauses #}\n {%- if where %}\n where {{ where }}\n {%- endif %}\n\n{% else %}\n\n {%- if metric_tree.full_set | length > 1 %}\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from joined_metrics\n {#- metric where clauses -#}\n {%- if where %}\n where {{ where }}\n {%- endif -%}\n\n {% else %}\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{metric_tree.base_set[0]}}__final \n {%- if where %}\n where {{ where }}\n {%- endif -%}\n \n {%- endif %}\n\n\n{%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1710174, "supported_languages": null }, "macro.metrics.postgres__gen_final_cte": { "unique_id": "macro.metrics.postgres__gen_final_cte", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/sql_gen/gen_final_cte.sql", "original_file_path": "macros/sql_gen/gen_final_cte.sql", "name": "postgres__gen_final_cte", "macro_sql": "{% macro postgres__gen_final_cte(metric_tree, grain, dimensions, calendar_dimensions, relevant_periods, secondary_calculations, where) %}\n\n\n{%- if secondary_calculations | length > 0 -%}\n\n , final as (\n\n select\n *\n from secondary_calculations\n )\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from final \n\n {# metric where clauses #}\n {%- if where %}\n where {{ where }}\n {%- endif %}\n\n{% else %}\n\n {%- if metric_tree.full_set | length > 1 %}\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from joined_metrics\n {#- metric where clauses -#}\n {%- if where %}\n where {{ where }}\n {%- endif -%}\n\n {% else %}\n\n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from {{metric_tree.base_set[0]}}__final \n {%- if where %}\n where {{ where }}\n {%- endif -%}\n \n {%- endif %}\n\n\n{%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.172206, "supported_languages": null }, "macro.metrics.period_to_date": { "unique_id": "macro.metrics.period_to_date", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/secondary_calculations_configuration/period_to_date.sql", "original_file_path": "macros/secondary_calculations_configuration/period_to_date.sql", "name": "period_to_date", "macro_sql": "{% macro period_to_date(aggregate, period, alias, metric_list = []) %}\n\n {% set missing_args = [] %}\n {% if not aggregate %} \n {% set _ = missing_args.append(\"aggregate\") %}\n {% endif %}\n {% if not period %}\n {% set _ = missing_args.append(\"period\") %}\n {% endif %}\n {% if missing_args | length > 0 %}\n {% do exceptions.raise_compiler_error( missing_args | join(\", \") ~ ' not provided to period_to_date') %}\n {% endif %}\n {% if metric_list is string %}\n {% set metric_list = [metric_list] %}\n {% endif %}\n\n {% do return ({\n \"calculation\": \"period_to_date\",\n \"aggregate\": aggregate,\n \"period\": period,\n \"alias\": alias,\n \"metric_list\": metric_list\n })\n %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1747694, "supported_languages": null }, "macro.metrics.prior": { "unique_id": "macro.metrics.prior", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/secondary_calculations_configuration/prior.sql", "original_file_path": "macros/secondary_calculations_configuration/prior.sql", "name": "prior", "macro_sql": "{% macro prior(interval, alias, metric_list = []) %}\n\n {% set missing_args = [] %}\n {% if not interval %} \n {% set _ = missing_args.append(\"interval\") %}\n {% endif %}\n {% if missing_args | length > 0 %}\n {% do exceptions.raise_compiler_error( missing_args | join(\", \") ~ ' not provided to prior') %}\n {% endif %}\n {% if metric_list is string %}\n {% set metric_list = [metric_list] %}\n {% endif %}\n\n {% do return ({\n \"calculation\": \"prior\",\n \"interval\": interval,\n \"alias\": alias,\n \"metric_list\": metric_list\n })\n %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.176983, "supported_languages": null }, "macro.metrics.rolling": { "unique_id": "macro.metrics.rolling", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/secondary_calculations_configuration/rolling.sql", "original_file_path": "macros/secondary_calculations_configuration/rolling.sql", "name": "rolling", "macro_sql": "{% macro rolling(aggregate, interval, alias, metric_list=[]) %}\n\n {% set missing_args = [] %}\n {% if not aggregate %} \n {% set _ = missing_args.append(\"aggregate\") %}\n {% endif %}\n {% if missing_args | length > 0 %}\n {% do exceptions.raise_compiler_error( missing_args | join(\", \") ~ ' not provided to rolling') %}\n {% endif %}\n {% if metric_list is string %}\n {% set metric_list = [metric_list] %}\n {% endif %}\n\n {% do return ({\n \"calculation\": \"rolling\",\n \"aggregate\": aggregate,\n \"interval\": interval,\n \"alias\": alias,\n \"metric_list\": metric_list\n })\n %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.179214, "supported_languages": null }, "macro.metrics.period_over_period": { "unique_id": "macro.metrics.period_over_period", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/secondary_calculations_configuration/period_over_period.sql", "original_file_path": "macros/secondary_calculations_configuration/period_over_period.sql", "name": "period_over_period", "macro_sql": "{% macro period_over_period(comparison_strategy, interval, alias, metric_list = []) %}\n\n {% set missing_args = [] %}\n {% if not comparison_strategy %}\n {% set _ = missing_args.append(\"comparison_strategy\") %}\n {% endif %}\n {% if not interval %} \n {% set _ = missing_args.append(\"interval\") %}\n {% endif %}\n {% if missing_args | length > 0 %}\n {% do exceptions.raise_compiler_error( missing_args | join(\", \") ~ ' not provided to period_over_period') %}\n {% endif %}\n {% if metric_list is string %}\n {% set metric_list = [metric_list] %}\n {% endif %}\n\n {% do return ({\n \"calculation\": \"period_over_period\",\n \"comparison_strategy\": comparison_strategy,\n \"interval\": interval,\n \"alias\": alias,\n \"metric_list\": metric_list\n })\n %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1817539, "supported_languages": null }, "macro.metrics.perform_secondary_calculation": { "unique_id": "macro.metrics.perform_secondary_calculation", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/secondary_calculations/perform_secondary_calculation.sql", "original_file_path": "macros/secondary_calculations/perform_secondary_calculation.sql", "name": "perform_secondary_calculation", "macro_sql": "{%- macro perform_secondary_calculation(metric_name, grain, dimensions, calc_config, metric_config) -%}\n\n {{ return(adapter.dispatch('perform_secondary_calculation', 'metrics')(metric_name, grain, dimensions, calc_config, metric_config)) }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__perform_secondary_calculation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1832778, "supported_languages": null }, "macro.metrics.default__perform_secondary_calculation": { "unique_id": "macro.metrics.default__perform_secondary_calculation", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/secondary_calculations/perform_secondary_calculation.sql", "original_file_path": "macros/secondary_calculations/perform_secondary_calculation.sql", "name": "default__perform_secondary_calculation", "macro_sql": "{% macro default__perform_secondary_calculation(metric_name, grain, dimensions, calc_config, metric_config) %}\n {%- set calc_type = calc_config.calculation -%}\n {%- set calc_sql = '' -%}\n \n {%- if calc_type == 'period_over_period' -%}\n {%- set calc_sql = adapter.dispatch('secondary_calculation_period_over_period', 'metrics')(metric_name, grain, dimensions, calc_config, metric_config) -%}\n {%- elif calc_type == 'rolling' -%}\n {%- set calc_sql = adapter.dispatch('secondary_calculation_rolling', 'metrics')(metric_name, grain, dimensions, calc_config) -%}\n {%- elif calc_type == 'period_to_date' -%}\n {%- set calc_sql = adapter.dispatch('secondary_calculation_period_to_date', 'metrics')(metric_name, grain, dimensions, calc_config) -%}\n {%- elif calc_type == 'prior' -%}\n {%- set calc_sql = adapter.dispatch('secondary_calculation_prior', 'metrics')(metric_name, grain, dimensions, calc_config) -%}\n {%- else -%}\n {%- do exceptions.raise_compiler_error(\"Unknown secondary calculation: \" ~ calc_type ~ \". calc_config: \" ~ calc_config) -%} \n {%- endif -%}\n\n {{ calc_sql }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__secondary_calculation_period_over_period", "macro.metrics.default__secondary_calculation_rolling", "macro.metrics.default__secondary_calculation_period_to_date", "macro.metrics.default__secondary_calculation_prior" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.185377, "supported_languages": null }, "macro.metrics.default__secondary_calculation_period_to_date": { "unique_id": "macro.metrics.default__secondary_calculation_period_to_date", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/secondary_calculations/secondary_calculation_period_to_date.sql", "original_file_path": "macros/secondary_calculations/secondary_calculation_period_to_date.sql", "name": "default__secondary_calculation_period_to_date", "macro_sql": "{% macro default__secondary_calculation_period_to_date(metric_name, grain, dimensions, calc_config) %}\n {%- set calc_sql -%}\n {{- adapter.dispatch('gen_primary_metric_aggregate', 'metrics')(calc_config.aggregate, metric_name) -}}\n over (\n partition by date_{{ calc_config.period }}\n {% if dimensions -%}\n , {{ dimensions | join(\", \") }}\n {%- endif %}\n order by date_{{grain}}\n rows between unbounded preceding and current row\n )\n {%- endset %}\n\n {%- do return (calc_sql) %}\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.gen_primary_metric_aggregate", "macro.metrics.default__gen_primary_metric_aggregate" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.186895, "supported_languages": null }, "macro.metrics.default__secondary_calculation_period_over_period": { "unique_id": "macro.metrics.default__secondary_calculation_period_over_period", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/secondary_calculations/secondary_calculation_period_over_period.sql", "original_file_path": "macros/secondary_calculations/secondary_calculation_period_over_period.sql", "name": "default__secondary_calculation_period_over_period", "macro_sql": "{%- macro default__secondary_calculation_period_over_period(metric_name, grain, dimensions, calc_config, metric_config) -%}\n {%- set calc_sql %}\n lag(\n {{ metric_name }}, {{ calc_config.interval }}\n ) over (\n {% if dimensions -%}\n partition by {{ dimensions | join(\", \") }} \n {% endif -%}\n order by date_{{grain}}\n )\n {%- endset-%}\n \n {%- if calc_config.comparison_strategy == 'difference' -%}\n {% do return (adapter.dispatch('metric_comparison_strategy_difference', 'metrics')(metric_name, calc_sql, metric_config)) %}\n \n {%- elif calc_config.comparison_strategy == 'ratio' -%}\n {% do return (adapter.dispatch('metric_comparison_strategy_ratio', 'metrics')(metric_name, calc_sql, metric_config)) %}\n \n {-% else -%}\n {% do exceptions.raise_compiler_error(\"Bad comparison_strategy for period_over_period: \" ~ calc_config.comparison_strategy ~ \". calc_config: \" ~ calc_config) %}\n {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__metric_comparison_strategy_difference", "macro.metrics.default__metric_comparison_strategy_ratio" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1902921, "supported_languages": null }, "macro.metrics.default__metric_comparison_strategy_difference": { "unique_id": "macro.metrics.default__metric_comparison_strategy_difference", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/secondary_calculations/secondary_calculation_period_over_period.sql", "original_file_path": "macros/secondary_calculations/secondary_calculation_period_over_period.sql", "name": "default__metric_comparison_strategy_difference", "macro_sql": "{% macro default__metric_comparison_strategy_difference(metric_name, calc_sql, metric_config) -%}\n {%- if not metric_config.get(\"treat_null_values_as_zero\", True) %}\n {{ metric_name }} - {{ calc_sql }}\n {%- else -%}\n coalesce({{ metric_name }}, 0) - coalesce(\n {{ calc_sql }}\n , 0)\n {%- endif %}\n \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1911104, "supported_languages": null }, "macro.metrics.default__metric_comparison_strategy_ratio": { "unique_id": "macro.metrics.default__metric_comparison_strategy_ratio", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/secondary_calculations/secondary_calculation_period_over_period.sql", "original_file_path": "macros/secondary_calculations/secondary_calculation_period_over_period.sql", "name": "default__metric_comparison_strategy_ratio", "macro_sql": "{% macro default__metric_comparison_strategy_ratio(metric_name, calc_sql, metric_config) -%}\n \n {%- if not metric_config.get(\"treat_null_values_as_zero\", True) %}\n cast({{ metric_name }} as {{ type_float() }}) / nullif(\n {{ calc_sql }}\n , 0)\n {%- else -%}\n coalesce(\n cast({{ metric_name }} as {{ type_float() }}) / nullif(\n {{ calc_sql }}\n , 0) \n , 0)\n {%- endif %}\n \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.type_float" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1918712, "supported_languages": null }, "macro.metrics.default__secondary_calculation_rolling": { "unique_id": "macro.metrics.default__secondary_calculation_rolling", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/secondary_calculations/secondary_calculation_rolling.sql", "original_file_path": "macros/secondary_calculations/secondary_calculation_rolling.sql", "name": "default__secondary_calculation_rolling", "macro_sql": "{% macro default__secondary_calculation_rolling(metric_name, grain, dimensions, calc_config) %}\n {% set calc_sql %}\n {{ adapter.dispatch('gen_primary_metric_aggregate', 'metrics')(calc_config.aggregate, metric_name) }}\n over (\n {% if dimensions -%}\n partition by {{ dimensions | join(\", \") }} \n {% endif -%}\n order by date_{{grain}}\n {% if calc_config.interval %}\n rows between {{ calc_config.interval - 1 }} preceding and current row\n {% else %}\n rows between unbounded preceding and current row\n {% endif %}\n )\n {% endset %}\n\n {% do return (calc_sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.gen_primary_metric_aggregate", "macro.metrics.default__gen_primary_metric_aggregate" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1936035, "supported_languages": null }, "macro.metrics.default__secondary_calculation_prior": { "unique_id": "macro.metrics.default__secondary_calculation_prior", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/secondary_calculations/secondary_calculation_prior.sql", "original_file_path": "macros/secondary_calculations/secondary_calculation_prior.sql", "name": "default__secondary_calculation_prior", "macro_sql": "{%- macro default__secondary_calculation_prior(metric_name, grain, dimensions, calc_config, metric_config) -%}\n \n {%- set calc_sql %}\n lag(\n {{ metric_name }}, {{ calc_config.interval }}\n ) over (\n {% if dimensions -%}\n partition by {{ dimensions | join(\", \") }} \n {% endif -%}\n order by date_{{grain}}\n )\n {%- endset-%}\n \n {{ calc_sql }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1948895, "supported_languages": null }, "macro.metrics.generate_secondary_calculation_alias": { "unique_id": "macro.metrics.generate_secondary_calculation_alias", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/secondary_calculations/generate_secondary_calculation_alias.sql", "original_file_path": "macros/secondary_calculations/generate_secondary_calculation_alias.sql", "name": "generate_secondary_calculation_alias", "macro_sql": "{% macro generate_secondary_calculation_alias(metric_name, calc_config, grain, is_multiple_metrics) %}\n\n {{ return(adapter.dispatch('generate_secondary_calculation_alias', 'metrics')(metric_name, calc_config, grain, is_multiple_metrics)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__generate_secondary_calculation_alias" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.1983564, "supported_languages": null }, "macro.metrics.default__generate_secondary_calculation_alias": { "unique_id": "macro.metrics.default__generate_secondary_calculation_alias", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/secondary_calculations/generate_secondary_calculation_alias.sql", "original_file_path": "macros/secondary_calculations/generate_secondary_calculation_alias.sql", "name": "default__generate_secondary_calculation_alias", "macro_sql": "{% macro default__generate_secondary_calculation_alias(metric_name, calc_config, grain, is_multiple_metrics) %}\n {%- if calc_config.alias -%}\n {%- if is_multiple_metrics -%}\n {%- do return(metric_name ~ \"_\" ~ calc_config.alias) -%}\n {%- else -%}\n {% do return(calc_config.alias) %}\n {%- endif -%}\n {%- endif -%}\n \n {%- set calc_type = calc_config.calculation -%}\n {%- if calc_type == 'period_over_period' -%}\n {%- if is_multiple_metrics -%}\n {%- do return(metric_name ~ \"_\" ~ calc_config.comparison_strategy ~ \"_to_\" ~ calc_config.interval ~ \"_\" ~ grain ~ \"_ago\") %}\n {%- else -%}\n {%- do return(calc_config.comparison_strategy ~ \"_to_\" ~ calc_config.interval ~ \"_\" ~ grain ~ \"_ago\") %}\n {%- endif -%}\n \n {%- elif calc_type == 'rolling' %}\n {%- if is_multiple_metrics -%}\n {%- if calc_config.interval -%}\n {%- do return(metric_name ~ \"_\" ~ \"rolling_\" ~ calc_config.aggregate ~ \"_\" ~ calc_config.interval ~ \"_\" ~ grain) %}\n {%- else -%}\n {%- do return(metric_name ~ \"_\" ~ \"rolling_\" ~ calc_config.aggregate) %}\n {%- endif -%}\n {%- else -%}\n {%- if calc_config.interval -%}\n {%- do return(\"rolling_\" ~ calc_config.aggregate ~ \"_\" ~ calc_config.interval ~ \"_\" ~ grain) %}\n {%- else -%}\n {%- do return(\"rolling_\" ~ calc_config.aggregate) %}\n {%- endif -%}\n {%- endif -%}\n \n {%- elif calc_type == 'period_to_date' %}\n {% if is_multiple_metrics %}\n {%- do return(metric_name ~ \"_\" ~ calc_config.aggregate ~ \"_for_\" ~ calc_config.period) %}\n {% else %}\n {%- do return(calc_config.aggregate ~ \"_for_\" ~ calc_config.period) %}\n {% endif %}\n \n {%- elif calc_type == 'prior' %}\n {% if is_multiple_metrics %}\n {%- do return(metric_name ~ \"_\" ~ calc_config.interval ~ \"_\" ~ grain ~ \"s_prior\") %}\n {% else %}\n {%- do return(calc_config.interval ~ \"_\" ~ grain ~ \"s_prior\") %}\n {% endif %}\n\n {%- else %}\n {%- do exceptions.raise_compiler_error(\"Can't generate alias for unknown secondary calculation: \" ~ calc_type ~ \". calc_config: \" ~ calc_config) %} \n {%- endif %}\n\n {{ calc_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2024035, "supported_languages": null }, "macro.metrics.get_metric_tree": { "unique_id": "macro.metrics.get_metric_tree", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/variables/get_metric_tree.sql", "original_file_path": "macros/variables/get_metric_tree.sql", "name": "get_metric_tree", "macro_sql": "{% macro get_metric_tree(metric_list)%}\n\n{# We are creating the metric tree here - this includes all the leafs (first level parents)\n, the derived metrics, and the full combination of them both #}\n\n{# This line creates the metric tree dictionary and the full_set key. \nFull Set contains ALL metrics that are referenced, which includes metrics in the macro\nAND all parent/derived metrics. #}\n{%- set metric_tree = {'full_set':[]} %}\n{# The parent set is a list of parent metrics that are NOT derived metrics. IE if \nmetric C is built off of metric A and B, A and B would be the parent metrics because they \nare both upstream of Metric C AND not derived metrics themselves. #}\n{%- do metric_tree.update({'parent_set':[]}) -%}\n{# The derived set is a list of derived metrics. This includes all derived metrics referenced\nin the macro itself OR upstream of the metrics referenced in the macro #}\n{%- do metric_tree.update({'expression_set':[]}) -%}\n{# The base set is the list of metrics that are provided into the macro #}\n{%- do metric_tree.update({'base_set':[]}) -%}\n{# The ordered derived set is the list of derived metrics that are ordered based on their\nnode depth. So if Metric C were downstream of Metric A and B, which were also derived metrics,\nMetric C would have the value of 999 (max depth) and A and B would have 998, representing that they\nare one depth upstream #}\n{%- do metric_tree.update({'ordered_expression_set':{}}) -%}\n\n{# {% if metric_list is iterable and (metric_list is not string and metric_list is not mapping) %} #}\n{% set base_set_list = []%}\n{% for metric in metric_list %}\n {%- do base_set_list.append(metric.name) -%}\n {# TODO #47 its not really GETTING the metric tree as much as operating. re-name that #}\n {%- set metric_tree = metrics.update_metric_tree(metric ,metric_tree) -%}\n{% endfor %}\n{%- do metric_tree.update({'base_set':base_set_list}) -%}\n\n{# Now we will iterate over the metric tree and make it a unique list to account for duplicates #}\n{% set full_set = [] %}\n{% set parent_set = [] %}\n{% set expression_set = [] %}\n{% set base_set = [] %}\n\n{# TODO See if this unique filtering logic can live in the operate on metric tree macro #}\n{# TODO rename to metric_name for all of the unique filters #}\n{% for metric_name in metric_tree['full_set']|unique%}\n {% do full_set.append(metric_name)%}\n{% endfor %}\n{%- do metric_tree.update({'full_set':full_set}) -%}\n\n{% for metric_name in metric_tree['parent_set']|unique%}\n {% do parent_set.append(metric_name)%}\n{% endfor %}\n{%- do metric_tree.update({'parent_set':parent_set}) -%}\n\n{% for metric_name in metric_tree['expression_set']|unique%}\n {% do expression_set.append(metric_name)%}\n{% endfor %}\n{%- do metric_tree.update({'expression_set':expression_set}) -%}\n\n{% for metric in metric_tree['parent_set']|unique%}\n {%- do metric_tree['ordered_expression_set'].pop(metric) -%}\n{% endfor %}\n\n{# This section overrides the derived set by ordering the metrics on their depth so they \ncan be correctly referenced in the downstream sql query #}\n{% set ordered_expression_list = []%}\n{% for item in metric_tree['ordered_expression_set']|dictsort(false, 'value') %}\n {% if item[0] in metric_tree[\"expression_set\"]%}\n {% do ordered_expression_list.append(item[0])%}\n {% endif %}\n{% endfor %}\n{%- do metric_tree.update({'expression_set':ordered_expression_list}) -%}\n\n{%- do return(metric_tree) -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.update_metric_tree" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2082982, "supported_languages": null }, "macro.metrics.get_calendar_dimensions": { "unique_id": "macro.metrics.get_calendar_dimensions", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/variables/get_calendar_dimensions.sql", "original_file_path": "macros/variables/get_calendar_dimensions.sql", "name": "get_calendar_dimensions", "macro_sql": "{% macro get_calendar_dimensions(dimensions) %}\n \n {% set approved_calendar_dimensions = var('custom_calendar_dimension_list',[]) %}\n\n {# Here we set the calendar as either being the default provided by the package\n or the variable provided in the project #}\n {% set calendar_dimensions = [] %}\n {% for dim in dimensions %}\n {%- if dim in approved_calendar_dimensions -%}\n {%- do calendar_dimensions.append(dim | lower) -%}\n {%- endif -%}\n {% endfor %}\n {%- do return(calendar_dimensions) -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2096536, "supported_languages": null }, "macro.metrics.get_metric_allowlist": { "unique_id": "macro.metrics.get_metric_allowlist", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/variables/get_metric_allowlist.sql", "original_file_path": "macros/variables/get_metric_allowlist.sql", "name": "get_metric_allowlist", "macro_sql": "{% macro get_metric_allowlist() %}\n {{ return(adapter.dispatch('get_metric_allowlist', 'metrics')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__get_metric_allowlist" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.210606, "supported_languages": null }, "macro.metrics.default__get_metric_allowlist": { "unique_id": "macro.metrics.default__get_metric_allowlist", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/variables/get_metric_allowlist.sql", "original_file_path": "macros/variables/get_metric_allowlist.sql", "name": "default__get_metric_allowlist", "macro_sql": "{% macro default__get_metric_allowlist() %}\n {# Keys are the primary aggregation, values are the permitted aggregations to run in secondary calculations. #}\n {% do return ({\n \"average\": ['min', 'max'],\n \"count\": ['min', 'max', 'sum', 'average'],\n \"count_distinct\": ['min', 'max', 'sum', 'average'],\n \"sum\": ['min', 'max', 'sum', 'average'],\n \"max\": ['min', 'max', 'sum', 'average'],\n \"min\": ['min', 'max', 'sum', 'average'],\n \"derived\": ['min', 'max', 'sum'],\n }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2119074, "supported_languages": null }, "macro.metrics.get_metric_unique_id_list": { "unique_id": "macro.metrics.get_metric_unique_id_list", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/variables/get_metric_unique_id_list.sql", "original_file_path": "macros/variables/get_metric_unique_id_list.sql", "name": "get_metric_unique_id_list", "macro_sql": "{%- macro get_metric_unique_id_list(metric) %}\n\n {%- if metric.metrics | length > 0 %}\n\n {# First we get the list of nodes that this metric is dependent on. This is inclusive \n of all parent metrics and SHOULD only contain parent metrics #}\n {%- set node_list = metric.depends_on.nodes -%}\n {%- set metric_list = [] -%}\n\n {# This part is suboptimal - we're looping through the dependent nodes and extracting\n the model name from the idenitfier. Ideally we'd just use the metrics attribute but \n right now its a list of lists #}\n {%- for node in node_list -%} \n {%- if node.split('.')[0] == 'metric' -%}\n {% do metric_list.append(node.split('.')[2]) %} \n {%- endif -%}\n {%- endfor -%}\n\n {% else %}\n\n {# For non-derived metrics, we just need the relation of the base model ie \n the model that its built. Then we append it to the metric list name so the same\n variable used in derived metrics can be used below #}\n {%- set metric_list = [] -%}\n\n {%- endif %}\n\n {% do return(metric_list) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.213739, "supported_languages": null }, "macro.metrics.update_metric_tree": { "unique_id": "macro.metrics.update_metric_tree", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/variables/update_metric_tree.sql", "original_file_path": "macros/variables/update_metric_tree.sql", "name": "update_metric_tree", "macro_sql": "{% macro update_metric_tree(metric,metric_tree,metric_count=999)%}\n \n {# Now we see if the node already exists in the metric tree and return that if \n it does so that we're not creating duplicates #}\n {%- if metric.name not in metric_tree|map(attribute=\"full_set\") -%}\n\n {%- set full_set = metric_tree[\"full_set\"] -%}\n {%- do full_set.append(metric.name) -%}\n {%- do metric_tree.update({'full_set':full_set}) -%}\n\n {%- endif -%}\n\n {%- do metric_tree[\"ordered_expression_set\"].update({metric.name:metric_count}) -%}\n {%- set metric_count = metric_count - 1 -%}\n\n {# Here we create two sets, sets being the same as lists but they account for uniqueness. \n One is the full set, which contains all of the parent metrics and the other is the leaf\n set, which we'll use to determine the leaf, or base metrics. #}\n\n {# We define parent nodes as being the parent nodes that begin with metric, which lets\n us filter out model nodes #}\n {%- set parent_metrics = metrics.get_metric_unique_id_list(metric) -%}\n\n {# We set an if condition based on if parent nodes. If there are none, then this metric\n is a leaf node and any recursive loop should end #}\n {%- if parent_metrics | length > 0 -%}\n\n {# Now we finally recurse through the nodes. We begin by filtering the overall list we\n recurse through by limiting it to depending on metric nodes and not ALL nodes #}\n {%- for parent_id in parent_metrics -%}\n\n {# Then we add the parent_id of the metric to the full set. If it already existed\n then it won't make an impact but we want to make sure it is represented #}\n {# {%- do full_set.append(parent_id) -%} #}\n {%- set full_set_plus = metric_tree[\"full_set\"] -%}\n {%- if parent_id in metric_tree|map(attribute=\"full_set\") -%}\n {%- do full_set_plus.append(parent_id) -%}\n {%- endif -%}\n {%- do metric_tree.update({'full_set':full_set_plus}) -%}\n {# The parent_id variable here is a mapping back to the provided manifest and doesn't \n allow for string parsing. So we create this variable to use instead #}\n {# {%- set parent_metric_name = (parent_id | string).split('.')[2] -%} #}\n\n {# And here we re-run the current macro but fill in the parent_id so that we loop again\n with that metric information. You may be wondering, why are you using parent_id? Doesn't \n the DAG always go from parent to child? Normally, yes! With this, no! We're reversing the \n DAG and going up to parents to find the leaf nodes that are really parent nodes. #}\n {%- set new_parent = metrics.get_metric_relation(parent_id) -%}\n\n {%- set metric_tree = metrics.update_metric_tree(new_parent,metric_tree,metric_count) -%}\n\n {%- endfor -%}\n \n {%- else -%}\n\n {%- set parent_set_plus = metric_tree[\"parent_set\"] -%}\n {%- if parent_id in metric_tree|map(attribute=\"full_set\") -%}\n {%- do parent_set_plus.append(metric.name) -%}\n {%- endif -%}\n {%- do metric_tree.update({'parent_set':parent_set_plus}) -%}\n\n {%- endif -%}\n\n {%- set expression_set_plus = ( metric_tree[\"full_set\"] | reject('in',metric_tree[\"parent_set\"]) | list) -%}\n {%- do metric_tree.update({'expression_set':expression_set_plus}) -%}\n\n {%- do return(metric_tree) -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.get_metric_unique_id_list", "macro.metrics.get_metric_relation", "macro.metrics.update_metric_tree" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2185104, "supported_languages": null }, "macro.metrics.update_faux_metric_tree": { "unique_id": "macro.metrics.update_faux_metric_tree", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/variables/update_faux_metric_tree.sql", "original_file_path": "macros/variables/update_faux_metric_tree.sql", "name": "update_faux_metric_tree", "macro_sql": "{% macro update_faux_metric_tree(metric_definition, metric_tree, develop_yml, metric_count=999)%}\n \n\n {# Now we see if the node already exists in the metric tree and return that if \n it does so that we're not creating duplicates #}\n {%- if metric_definition.name not in metric_tree|map(attribute=\"full_set\") -%}\n\n {%- set full_set = metric_tree[\"full_set\"] -%}\n {%- do full_set.append(metric_definition.name) -%}\n {%- do metric_tree.update({'full_set':full_set}) -%}\n\n {%- endif -%}\n\n {# Here we're starting with the highest level and assigning the metric tree that first level\n value. This is used before de-duping in get_faux_metric_tree #}\n {%- do metric_tree[\"ordered_expression_set\"].update({metric_definition.name:metric_count}) -%}\n {%- set metric_count = metric_count - 1 -%}\n\n {# Here we create two sets, sets being the same as lists but they account for uniqueness. \n One is the full set, which contains all of the parent metrics and the other is the leaf\n set, which we'll use to determine the leaf, or base metrics. #}\n\n {% set develop_metric_list = [] %}\n {% for develop_metric_name in develop_yml %}\n {% do develop_metric_list.append(develop_metric_name) %}\n {% endfor %}\n\n {# We define parent nodes as being the parent nodes that begin with metric, which lets\n us filter out model nodes #}\n {%- set parent_metrics = metrics.get_develop_unique_metric_id_list(metric_definition) -%}\n {# We set an if condition based on if parent nodes. If there are none, then this metric\n is a leaf node and any recursive loop should end #}\n {%- if parent_metrics | length > 0 -%}\n\n {# Now we finally recurse through the nodes. We begin by filtering the overall list we\n recurse through by limiting it to depending on metric nodes and not ALL nodes #}\n {%- for parent_metric_name in parent_metrics -%}\n\n {# Then we add the parent_id of the metric to the full set. If it already existed\n then it won't make an impact but we want to make sure it is represented. Will dedupe\n in final macro #}\n {%- set full_set_plus = metric_tree[\"full_set\"] -%}\n {%- if parent_metric_name in metric_tree|map(attribute=\"full_set\") -%}\n {%- do full_set_plus.append(parent_metric_name) -%}\n {%- endif -%}\n {%- do metric_tree.update({'full_set':full_set_plus}) -%}\n\n {# And here we re-run the current macro but fill in the parent_id so that we loop again\n with that metric information. You may be wondering, why are you using parent_id? Doesn't \n the DAG always go from parent to child? Normally, yes! With this, no! We're reversing the \n DAG and going up to parents to find the leaf nodes that are really parent nodes. #}\n \n {# So here we need to test if the parent id/metric name exists in the manifest OR in\n the develop yml. Manifest takes priority and then defaults back to yml if not present #}\n {% if parent_metric_name in develop_metric_list and parent_metric_name is not none %}\n {% set parent_metric_definition = develop_yml[parent_metric_name] %}\n {% else %}\n {%- set parent_metric_definition = metrics.get_metric_relation(parent_metric_name) -%}\n {% endif %}\n\n {%- set metric_tree = metrics.update_faux_metric_tree(parent_metric_definition, metric_tree, develop_yml, metric_count) -%}\n\n {%- endfor -%}\n \n {%- else -%}\n\n {%- set parent_set_plus = metric_tree[\"parent_set\"] -%}\n {%- do parent_set_plus.append(metric_definition.name) -%}\n {%- do metric_tree.update({'parent_set':parent_set_plus}) -%}\n\n {%- endif -%}\n\n {%- set expression_set_plus = ( metric_tree[\"full_set\"] | reject('in',metric_tree[\"parent_set\"]) | list) -%}\n {%- do metric_tree.update({'expression_set':expression_set_plus}) -%}\n\n {%- do return(metric_tree) -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.get_develop_unique_metric_id_list", "macro.metrics.get_metric_relation", "macro.metrics.update_faux_metric_tree" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2243357, "supported_languages": null }, "macro.metrics.get_faux_metric_tree": { "unique_id": "macro.metrics.get_faux_metric_tree", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/variables/get_faux_metric_tree.sql", "original_file_path": "macros/variables/get_faux_metric_tree.sql", "name": "get_faux_metric_tree", "macro_sql": "{% macro get_faux_metric_tree(metric_list,develop_yml)%}\n\n {%- set metric_tree = {'full_set':[]} %}\n {%- do metric_tree.update({'parent_set':[]}) -%}\n {%- do metric_tree.update({'expression_set':[]}) -%}\n {%- do metric_tree.update({'base_set':metric_list}) -%}\n {%- do metric_tree.update({'ordered_expression_set':{}}) -%}\n\n {% for metric_name in metric_list %}\n {% set metric_definition = develop_yml[metric_name]%}\n {%- set metric_tree = metrics.update_faux_metric_tree(metric_definition, metric_tree, develop_yml) -%}\n {% endfor %}\n\n {%- do metric_tree.update({'full_set':set(metric_tree['full_set'])}) -%}\n {%- do metric_tree.update({'parent_set':set(metric_tree['parent_set'])}) -%}\n {%- do metric_tree.update({'expression_set':set(metric_tree['expression_set'])}) -%}\n\n {% for metric_name in metric_tree['parent_set']|unique%}\n {%- do metric_tree['ordered_expression_set'].pop(metric_name) -%}\n {% endfor %}\n\n {# This section overrides the derived set by ordering the metrics on their depth so they \n can be correctly referenced in the downstream sql query #}\n {% set ordered_expression_list = []%}\n {% for item in metric_tree['ordered_expression_set']|dictsort(false, 'value') %}\n {% if item[0] in metric_tree[\"expression_set\"]%}\n {% do ordered_expression_list.append(item[0])%}\n {% endif %}\n {% endfor %}\n {%- do metric_tree.update({'expression_set':ordered_expression_list}) -%}\n\n {%- do return(metric_tree) -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.update_faux_metric_tree" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2284772, "supported_languages": null }, "macro.metrics.get_develop_unique_metric_id_list": { "unique_id": "macro.metrics.get_develop_unique_metric_id_list", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/variables/get_develop_unique_metric_id_list.sql", "original_file_path": "macros/variables/get_develop_unique_metric_id_list.sql", "name": "get_develop_unique_metric_id_list", "macro_sql": "{%- macro get_develop_unique_metric_id_list(metric_definition) %}\n\n {% set re = modules.re %}\n\n {%- set metric_list = [] -%}\n\n {%- if metric_definition.calculation_method == 'derived' %}\n\n {# First we get the list of nodes that this metric is dependent on. This is inclusive \n of all parent metrics and SHOULD only contain parent metrics #}\n {%- set dependency_metrics = re.findall(\"'[^']+'\",metric_definition.expression) -%}\n\n {# This part is suboptimal - we're looping through the dependent nodes and extracting\n the model name from the idenitfier. Ideally we'd just use the metrics attribute but \n right now its a list of lists #}\n {%- for metric_name in dependency_metrics -%} \n= {% do metric_list.append(metric_name.replace('\\'','')) %} \n {%- endfor -%}\n\n {%- endif %}\n\n {% do return(metric_list) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.replace" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.230083, "supported_languages": null }, "macro.metrics.get_metric_definition": { "unique_id": "macro.metrics.get_metric_definition", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/variables/get_metric_definition.sql", "original_file_path": "macros/variables/get_metric_definition.sql", "name": "get_metric_definition", "macro_sql": "{% macro get_metric_definition(metric_definition) %}\n\n {% set metrics_dictionary_dict = {} %}\n\n {% do metrics_dictionary_dict.update({'name': metric_definition.name})%}\n {% do metrics_dictionary_dict.update({'calculation_method': metric_definition.calculation_method})%}\n {% do metrics_dictionary_dict.update({'timestamp': metric_definition.timestamp})%}\n {% do metrics_dictionary_dict.update({'time_grains': metric_definition.time_grains})%}\n {% do metrics_dictionary_dict.update({'dimensions': metric_definition.dimensions})%}\n {% do metrics_dictionary_dict.update({'filters': metric_definition.filters})%}\n {% do metrics_dictionary_dict.update({'config': metric_definition.config})%}\n {% if metric_definition.calculation_method != 'derived' %}\n {% set metric_model_name = metrics.get_metric_model_name(metric_model=metric_definition.model) %}\n {% do metrics_dictionary_dict.update({'metric_model': metrics.get_model_relation(metric_model_name, metric_name)}) %}\n {% endif %}\n\n {# Behavior specific to develop #}\n {% if metric_definition is mapping %}\n {# We need to do some cleanup for metric parsing #}\n {% set metric_expression = metric_definition.expression | replace(\"metric(\",\"\") | replace(\")\",\"\") | replace(\"{{\",\"\") | replace(\"}}\",\"\") | replace(\"'\",\"\") | replace('\"',\"\") %}\n {% do metrics_dictionary_dict.update({'expression': metric_expression})%} \n {% if metric_definition.window %}\n {% do metrics_dictionary_dict.update({'window': metric_definition.window}) %}\n {% else %}\n {% do metrics_dictionary_dict.update({'window': None}) %}\n {% endif %}\n {# Behavior specific to calculate #}\n {% else %}\n {% do metrics_dictionary_dict.update({'expression': metric_definition.expression})%} \n {% do metrics_dictionary_dict.update({'window': metric_definition.window})%}\n {% endif %}\n\n {% do return(metrics_dictionary_dict) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.get_metric_model_name", "macro.metrics.get_model_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2349772, "supported_languages": null }, "macro.metrics.get_metric_list": { "unique_id": "macro.metrics.get_metric_list", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/variables/get_metric_list.sql", "original_file_path": "macros/variables/get_metric_list.sql", "name": "get_metric_list", "macro_sql": "{%- macro get_metric_list(metric) %}\n\n {%- if metric.metrics | length > 0 %}\n\n {# First we get the list of nodes that this metric is dependent on. This is inclusive \n of all parent metrics and SHOULD only contain parent metrics #}\n {%- set node_list = metric.depends_on.nodes -%}\n {%- set metric_list = [] -%}\n\n {# This part is suboptimal - we're looping through the dependent nodes and extracting\n the model name from the idenitfier. Ideally we'd just use the metrics attribute but \n right now its a list of lists #}\n {%- for node in node_list -%} \n {% set metric_name = node.split('.')[2] %}\n {% do metric_list.append(metric_name) %}\n {%- endfor -%}\n\n {% else %}\n\n {# For non-derived metrics, we just need the relation of the base model ie \n the model that its built. Then we append it to the metric list name so the same\n variable used in derived metrics can be used below #}\n {%- set metric_list = [] -%}\n {% do metric_list.append(metric.name) %}\n\n {%- endif %}\n\n {% do return(metric_list) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2368317, "supported_languages": null }, "macro.metrics.get_non_calendar_dimension_list": { "unique_id": "macro.metrics.get_non_calendar_dimension_list", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/variables/get_non_calendar_dimension_list.sql", "original_file_path": "macros/variables/get_non_calendar_dimension_list.sql", "name": "get_non_calendar_dimension_list", "macro_sql": "{% macro get_non_calendar_dimension_list(dimensions,calendar_dimensions) %}\n \n {% set calendar_dims = calendar_dimensions %}\n\n {# Here we set the calendar as either being the default provided by the package\n or the variable provided in the project #}\n {% set dimension_list = [] %}\n {% for dim in dimensions %}\n {%- if dim not in calendar_dimensions -%}\n {%- do dimension_list.append(dim | lower) -%}\n {%- endif -%}\n {% endfor %}\n {%- do return(dimension_list) -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2381003, "supported_languages": null }, "macro.metrics.get_metrics_dictionary": { "unique_id": "macro.metrics.get_metrics_dictionary", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/variables/get_metrics_dictionary.sql", "original_file_path": "macros/variables/get_metrics_dictionary.sql", "name": "get_metrics_dictionary", "macro_sql": "{% macro get_metrics_dictionary(metric_tree, develop_yml = none) %}\n\n {% set metrics_dictionary = {} %}\n\n {% for metric_name in metric_tree.full_set %}\n {% if develop_yml is not none %}\n {% set metric_object = develop_yml[metric_name]%}\n {% else %}\n {% set metric_object = metrics.get_metric_relation(metric_name) %}\n {% endif %}\n {% set metric_definition = metrics.get_metric_definition(metric_object) %}\n {% if not metric_definition.config %}\n {% do metric_definition.update({'config':{}}) %}\n {% endif %}\n {% do metrics_dictionary.update({metric_name:{}})%}\n {% do metrics_dictionary.update({metric_name:metric_definition})%}\n {% endfor %}\n\n {% do return(metrics_dictionary) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.get_metric_relation", "macro.metrics.get_metric_definition" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2405753, "supported_languages": null }, "macro.metrics.get_grain_order": { "unique_id": "macro.metrics.get_grain_order", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/variables/get_grain_order.sql", "original_file_path": "macros/variables/get_grain_order.sql", "name": "get_grain_order", "macro_sql": "{% macro get_grain_order() %}\n {{ return(adapter.dispatch('get_grain_order', 'metrics')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.metrics.default__get_grain_order" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2413306, "supported_languages": null }, "macro.metrics.default__get_grain_order": { "unique_id": "macro.metrics.default__get_grain_order", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/variables/get_grain_order.sql", "original_file_path": "macros/variables/get_grain_order.sql", "name": "default__get_grain_order", "macro_sql": "{% macro default__get_grain_order() %}\n {% do return (['day', 'week', 'month', 'quarter', 'year']) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.241739, "supported_languages": null }, "macro.metrics.get_metric_model_name": { "unique_id": "macro.metrics.get_metric_model_name", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/variables/get_metric_model_name.sql", "original_file_path": "macros/variables/get_metric_model_name.sql", "name": "get_metric_model_name", "macro_sql": "{% macro get_metric_model_name(metric_model) %}\n\n {% set metric_model_name = metric_model.replace('\"','\\'').split('\\'')[1] %}\n\n {% do return(metric_model_name) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.replace" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.24267, "supported_languages": null }, "macro.metrics.get_base_metrics": { "unique_id": "macro.metrics.get_base_metrics", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/variables/get_base_metrics.sql", "original_file_path": "macros/variables/get_base_metrics.sql", "name": "get_base_metrics", "macro_sql": "{% macro get_base_metrics(metric) %}\n\n -- this checks whether it is a relation or a list\n {%- if (metric is mapping and metric.get('metadata', {}).get('calculation_method', '').endswith('Relation')) %}\n\n {%- for child in metric recursive -%}\n\n {%- if metric.metrics | length > 0 %}\n\n {# First we get the list of nodes that this metric is dependent on. This is inclusive \n of all parent metrics and SHOULD only contain parent metrics #}\n {%- set node_list = metric.depends_on.nodes -%}\n {%- set metric_list = [] -%}\n {# This part is suboptimal - we're looping through the dependent nodes and extracting\n the metric name from the idenitfier. Ideally we'd just use the metrics attribute but \n right now its a list of lists #}\n {%- for node in node_list -%} \n {% set metric_name = node.split('.')[2] %}\n {% do metric_list.append(metric_name) %}\n {%- endfor -%}\n {%- endif -%}\n {%- endfor -%}\n\n {% else %}\n\n {# For non-derived metrics, we just need the relation of the base model ie \n the model that its built. Then we append it to the metric list name so the same\n variable used in derived metrics can be used below #}\n {%- set metric_list = [] -%}\n {% do metric_list.append(metric.name) %}\n\n {%- endif %}\n\n {% do return(metric_list) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2451317, "supported_languages": null }, "macro.metrics.get_relevent_periods": { "unique_id": "macro.metrics.get_relevent_periods", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/variables/get_relevent_periods.sql", "original_file_path": "macros/variables/get_relevent_periods.sql", "name": "get_relevent_periods", "macro_sql": "{%- macro get_relevent_periods(grain, secondary_calculations) %}\n\n {%- set relevant_periods = [] %}\n {%- for calc_config in secondary_calculations if calc_config.period and calc_config.period not in relevant_periods and calc_config.period != grain %}\n {%- do relevant_periods.append(calc_config.period) %}\n {%- endfor -%}\n\n {%- do return(relevant_periods)-%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.246289, "supported_languages": null }, "macro.metrics.get_metric_relation": { "unique_id": "macro.metrics.get_metric_relation", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/graph_parsing/get_metric_relation.sql", "original_file_path": "macros/graph_parsing/get_metric_relation.sql", "name": "get_metric_relation", "macro_sql": "{% macro get_metric_relation(ref_name) %}\n \n {% if execute %}\n {% set relation = metric(ref_name)%}\n {% do return(relation) %}\n {% else %}\n {% do return(api.Relation.create()) %}\n {% endif %} \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.247434, "supported_languages": null }, "macro.metrics.get_model_relation": { "unique_id": "macro.metrics.get_model_relation", "package_name": "metrics", "root_path": "/tmp/jobs/137931897/target/dbt_packages/metrics", "path": "macros/graph_parsing/get_model_relation.sql", "original_file_path": "macros/graph_parsing/get_model_relation.sql", "name": "get_model_relation", "macro_sql": "{% macro get_model_relation(ref_name, metric_name) %}\n {% if execute %}\n {% set model_ref_node = graph.nodes.values() | selectattr('name', 'equalto', ref_name) | first %}\n {% if model_ref_node | length == 0 %}\n {%- do exceptions.raise_compiler_error(\"The metric \" ~ metric_name ~ \" is referencing the model \" ~ ref_name ~ \", which does not exist.\") %}\n {% endif %}\n\n {% set relation = api.Relation.create(\n database = model_ref_node.database,\n schema = model_ref_node.schema,\n identifier = model_ref_node.alias\n )\n %}\n\n {% do return(relation) %}\n\n {% else %}\n {% do return(api.Relation.create()) %}\n {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.249493, "supported_languages": null }, "macro.dbt_external_tables.stage_external_sources": { "unique_id": "macro.dbt_external_tables.stage_external_sources", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/common/stage_external_sources.sql", "original_file_path": "macros/common/stage_external_sources.sql", "name": "stage_external_sources", "macro_sql": "{% macro stage_external_sources(select=none) %}\n\n {% set sources_to_stage = [] %}\n \n {% set source_nodes = graph.sources.values() if graph.sources else [] %}\n \n {% for node in source_nodes %}\n {% if node.external %}\n \n {% if select %}\n \n {% for src in select.split(' ') %}\n \n {% if '.' in src %}\n {% set src_s = src.split('.') %}\n {% if src_s[0] == node.source_name and src_s[1] == node.name %}\n {% do sources_to_stage.append(node) %}\n {% endif %}\n {% else %}\n {% if src == node.source_name %}\n {% do sources_to_stage.append(node) %}\n {% endif %}\n {% endif %}\n \n {% endfor %}\n \n {% else %}\n \n {% do sources_to_stage.append(node) %}\n \n {% endif %}\n {% endif %}\n \n {% endfor %}\n \n {% if sources_to_stage|length == 0 %}\n {% do log('No external sources selected', info = true) %}\n {% endif %}\n \n {% for node in sources_to_stage %}\n\n {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\n\n {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\n \n {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\n \n {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\n {% set width = flags.PRINTER_WIDTH %}\n \n {% for q in run_queue %}\n \n {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\n {% set q_log = q_msg[:width] ~ '... ' if q_msg|length > width else q_msg %}\n \n {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\n {% set exit_txn = dbt_external_tables.exit_transaction() %}\n \n {% call statement('runner', fetch_result = True, auto_begin = False) %}\n {{ exit_txn }} {{ q }}\n {% endcall %}\n \n {% set runner = load_result('runner') %}\n {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\n {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\n \n {% endfor %}\n \n {% endfor %}\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_external_tables.get_external_build_plan", "macro.dbt_external_tables.exit_transaction", "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2588644, "supported_languages": null }, "macro.dbt_external_tables.create_external_schema": { "unique_id": "macro.dbt_external_tables.create_external_schema", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/common/create_external_schema.sql", "original_file_path": "macros/common/create_external_schema.sql", "name": "create_external_schema", "macro_sql": "{% macro create_external_schema(source_node) %}\n {{ adapter.dispatch('create_external_schema', 'dbt_external_tables')(source_node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_external_tables.default__create_external_schema" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2597036, "supported_languages": null }, "macro.dbt_external_tables.default__create_external_schema": { "unique_id": "macro.dbt_external_tables.default__create_external_schema", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/common/create_external_schema.sql", "original_file_path": "macros/common/create_external_schema.sql", "name": "default__create_external_schema", "macro_sql": "{% macro default__create_external_schema(source_node) %}\n {% set ddl %}\n create schema if not exists {{ source_node.schema }}\n {% endset %}\n\n {{return(ddl)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2601428, "supported_languages": null }, "macro.dbt_external_tables.create_external_table": { "unique_id": "macro.dbt_external_tables.create_external_table", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "name": "create_external_table", "macro_sql": "{% macro create_external_table(source_node) %}\n {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_external_tables.snowflake__create_external_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2608805, "supported_languages": null }, "macro.dbt_external_tables.default__create_external_table": { "unique_id": "macro.dbt_external_tables.default__create_external_table", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "name": "default__create_external_table", "macro_sql": "{% macro default__create_external_table(source_node) %}\n {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2611723, "supported_languages": null }, "macro.dbt_external_tables.get_external_build_plan": { "unique_id": "macro.dbt_external_tables.get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "name": "get_external_build_plan", "macro_sql": "{% macro get_external_build_plan(source_node) %}\n {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_external_tables.snowflake__get_external_build_plan" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.261947, "supported_languages": null }, "macro.dbt_external_tables.default__get_external_build_plan": { "unique_id": "macro.dbt_external_tables.default__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "name": "default__get_external_build_plan", "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\n {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2622435, "supported_languages": null }, "macro.dbt_external_tables.refresh_external_table": { "unique_id": "macro.dbt_external_tables.refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "name": "refresh_external_table", "macro_sql": "{% macro refresh_external_table(source_node) %}\n {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_external_tables.snowflake__refresh_external_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2630544, "supported_languages": null }, "macro.dbt_external_tables.default__refresh_external_table": { "unique_id": "macro.dbt_external_tables.default__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "name": "default__refresh_external_table", "macro_sql": "{% macro default__refresh_external_table(source_node) %}\n {% do return([]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.263365, "supported_languages": null }, "macro.dbt_external_tables.exit_transaction": { "unique_id": "macro.dbt_external_tables.exit_transaction", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "name": "exit_transaction", "macro_sql": "{% macro exit_transaction() %}\n {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_external_tables.default__exit_transaction" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2641115, "supported_languages": null }, "macro.dbt_external_tables.default__exit_transaction": { "unique_id": "macro.dbt_external_tables.default__exit_transaction", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "name": "default__exit_transaction", "macro_sql": "{% macro default__exit_transaction() %}\n {{ return('') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.264376, "supported_languages": null }, "macro.dbt_external_tables.dropif": { "unique_id": "macro.dbt_external_tables.dropif", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "name": "dropif", "macro_sql": "{% macro dropif(node) %}\n {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_external_tables.default__dropif" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2651205, "supported_languages": null }, "macro.dbt_external_tables.default__dropif": { "unique_id": "macro.dbt_external_tables.default__dropif", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "name": "default__dropif", "macro_sql": "{% macro default__dropif() %}\n {{ exceptions.raise_compiler_error(\n \"Dropping external tables is not implemented for the default adapter\"\n ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2654028, "supported_languages": null }, "macro.dbt_external_tables.bigquery__create_external_table": { "unique_id": "macro.dbt_external_tables.bigquery__create_external_table", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/bigquery/create_external_table.sql", "original_file_path": "macros/plugins/bigquery/create_external_table.sql", "name": "bigquery__create_external_table", "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\n\n {%- set columns = source_node.columns.values() -%}\n {%- set external = source_node.external -%}\n {%- set partitions = external.partitions -%}\n {%- set options = external.options -%}\n \n {%- set uris = [] -%}\n {%- if options is mapping and options.get('uris', none) -%}\n {%- set uris = external.options.get('uris') -%}\n {%- else -%}\n {%- set uris = [external.location] -%}\n {%- endif -%}\n\n create or replace external table {{source(source_node.source_name, source_node.name)}}\n {%- if columns -%}(\n {% for column in columns %}\n {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n {{column_quoted}} {{column.data_type}} {{- ',' if not loop.last -}}\n {%- endfor -%}\n )\n {% endif %}\n {% if options and options.get('hive_partition_uri_prefix', none) %}\n with partition columns {%- if partitions %} (\n {%- for partition in partitions %}\n {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\n {%- endfor -%}\n ) {% endif -%}\n {% endif %}\n options (\n uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\n {%- if options is mapping -%}\n {%- for key, value in options.items() if key != 'uris' %}\n {%- if value is string -%}\n , {{key}} = '{{value}}'\n {%- else -%}\n , {{key}} = {{value}}\n {%- endif -%}\n {%- endfor -%}\n {%- endif -%}\n )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2710373, "supported_languages": null }, "macro.dbt_external_tables.bigquery__get_external_build_plan": { "unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/bigquery/get_external_build_plan.sql", "original_file_path": "macros/plugins/bigquery/get_external_build_plan.sql", "name": "bigquery__get_external_build_plan", "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\n\n {% set build_plan = [] %}\n \n {% set old_relation = adapter.get_relation(\n database = source_node.database,\n schema = source_node.schema,\n identifier = source_node.identifier\n ) %}\n \n {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n {% if create_or_replace %}\n {% set build_plan = build_plan + [\n dbt_external_tables.create_external_schema(source_node),\n dbt_external_tables.create_external_table(source_node)\n ] %}\n {% else %}\n {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n {% endif %}\n\n {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.273041, "supported_languages": null }, "macro.dbt_external_tables.snowflake__create_external_table": { "unique_id": "macro.dbt_external_tables.snowflake__create_external_table", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/create_external_table.sql", "original_file_path": "macros/plugins/snowflake/create_external_table.sql", "name": "snowflake__create_external_table", "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\n\n {%- set columns = source_node.columns.values() -%}\n {%- set external = source_node.external -%}\n {%- set partitions = external.partitions -%}\n\n {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\n\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\n{# This assumes you have already created an external stage #}\n create or replace external table {{source(source_node.source_name, source_node.name)}}\n {%- if columns or partitions -%}\n (\n {%- if partitions -%}{%- for partition in partitions %}\n {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 -}}\n {%- endfor -%}{%- endif -%}\n {%- for column in columns %}\n {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n {%- set col_expression -%}\n {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column_quoted -%}\n (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n {%- endset %}\n {{column_quoted}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\n {{- ',' if not loop.last -}}\n {% endfor %}\n )\n {%- endif -%}\n {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\n location = {{external.location}} {# stage #}\n {% if external.auto_refresh in (true, false) -%}\n auto_refresh = {{external.auto_refresh}}\n {%- endif %}\n {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\n file_format = {{external.file_format}}\n {% if external.table_format -%} table_format = '{{external.table_format}}' {%- endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_external_tables.is_csv" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.27795, "supported_languages": null }, "macro.dbt_external_tables.snowflake__get_external_build_plan": { "unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/get_external_build_plan.sql", "original_file_path": "macros/plugins/snowflake/get_external_build_plan.sql", "name": "snowflake__get_external_build_plan", "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\n\n {% set build_plan = [] %}\n \n {% set old_relation = adapter.get_relation(\n database = source_node.database,\n schema = source_node.schema,\n identifier = source_node.identifier\n ) %}\n \n {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n {% if source_node.external.get('snowpipe', none) is not none %}\n \n {% if create_or_replace %}\n {% set build_plan = build_plan + [\n dbt_external_tables.create_external_schema(source_node),\n dbt_external_tables.snowflake_create_empty_table(source_node),\n dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\n dbt_external_tables.snowflake_create_snowpipe(source_node)\n ] %}\n {% else %}\n {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\n {% endif %}\n \n {% else %}\n \n {% if create_or_replace %}\n {% set build_plan = build_plan + [\n dbt_external_tables.create_external_schema(source_node),\n dbt_external_tables.create_external_table(source_node)\n ] %}\n {% else %}\n {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n {% endif %}\n \n {% endif %}\n\n {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.snowflake_create_empty_table", "macro.dbt_external_tables.snowflake_get_copy_sql", "macro.dbt_external_tables.snowflake_create_snowpipe", "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2814157, "supported_languages": null }, "macro.dbt_external_tables.snowflake__refresh_external_table": { "unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/refresh_external_table.sql", "original_file_path": "macros/plugins/snowflake/refresh_external_table.sql", "name": "snowflake__refresh_external_table", "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\n\n {% set external = source_node.external %}\n {% set snowpipe = source_node.external.get('snowpipe', none) %}\n \n {% set auto_refresh = external.get('auto_refresh', false) %}\n {% set partitions = external.get('partitions', none) %}\n \n {% set manual_refresh = (partitions and not auto_refresh) %}\n \n {% if manual_refresh %}\n\n {% set ddl %}\n begin;\n alter external table {{source(source_node.source_name, source_node.name)}} refresh;\n commit;\n {% endset %}\n \n {% do return([ddl]) %}\n \n {% else %}\n \n {% do return([]) %}\n \n {% endif %}\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.283634, "supported_languages": null }, "macro.dbt_external_tables.is_csv": { "unique_id": "macro.dbt_external_tables.is_csv", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/helpers/is_csv.sql", "original_file_path": "macros/plugins/snowflake/helpers/is_csv.sql", "name": "is_csv", "macro_sql": "{% macro is_csv(file_format) %}\n\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\n\nImportant: The external table does not inherit the file format, if any, in the \nstage definition. You must explicitly specify any file format options for the \nexternal table using the FILE_FORMAT parameter.\n\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \nyou should only specify one or the other when creating an external table.\n\n#}\n\n {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\n\n {% if 'type=' in ff_ltrimmed %}\n \n {% if 'type=csv' in ff_ltrimmed %}\n\n {{return(true)}}\n\n {% else %}\n\n {{return(false)}}\n \n {% endif %}\n \n {% else %}\n \n {% set ff_standardized = ff_ltrimmed\n | replace('(','') | replace(')','')\n | replace('format_name=','') %}\n {% set fqn = ff_standardized.split('.') %}\n \n {% if fqn | length == 3 %}\n {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\n {% elif fqn | length == 2 %}\n {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\n {% else %}\n {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\n {% endif %}\n \n {% call statement('get_file_format', fetch_result = True) %}\n show file formats in {{ff_database}}.{{ff_schema}}\n {% endcall %}\n \n {% set ffs = load_result('get_file_format').table %}\n \n {% for ff in ffs %}\n \n {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\n \n {{return(true)}}\n \n {% endif %}\n \n {% endfor %}\n \n {{return(false)}} \n \n {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2887683, "supported_languages": null }, "macro.dbt_external_tables.snowflake_get_copy_sql": { "unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "name": "snowflake_get_copy_sql", "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\n{# This assumes you have already created an external stage #}\n\n {%- set columns = source_node.columns.values() -%}\n {%- set external = source_node.external -%}\n {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\n {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\n \n {%- if explicit_transaction -%} begin; {%- endif %}\n \n copy into {{source(source_node.source_name, source_node.name)}}\n from ( \n select\n {% if columns|length == 0 %}\n $1::variant as value,\n {% else -%}\n {%- for column in columns -%}\n {%- set col_expression -%}\n {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\n {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\n {%- endif -%}\n {%- endset -%}\n {{col_expression}}::{{column.data_type}} as {{column.name}},\n {% endfor -%}\n {% endif %}\n metadata$filename::varchar as metadata_filename,\n metadata$file_row_number::bigint as metadata_file_row_number,\n current_timestamp::timestamp as _dbt_copied_at\n from {{external.location}} {# stage #}\n )\n file_format = {{external.file_format}}\n {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n {% if copy_options %} {{copy_options}} {% endif %};\n \n {% if explicit_transaction -%} commit; {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_external_tables.is_csv" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.292054, "supported_languages": null }, "macro.dbt_external_tables.snowflake_refresh_snowpipe": { "unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "name": "snowflake_refresh_snowpipe", "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\n\n {% set snowpipe = source_node.external.snowpipe %}\n {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\n \n {% if auto_ingest is true %}\n \n {% do return([]) %}\n \n {% else %}\n \n {% set ddl %}\n alter pipe {{source(source_node.source_name, source_node.name)}} refresh\n {% endset %}\n \n {{ return([ddl]) }}\n \n {% endif %}\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2936924, "supported_languages": null }, "macro.dbt_external_tables.snowflake_create_snowpipe": { "unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "name": "snowflake_create_snowpipe", "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\n\n {%- set external = source_node.external -%}\n {%- set snowpipe = external.snowpipe -%}\n\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\n create or replace pipe {{source(source_node.source_name, source_node.name)}}\n {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\n {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\n {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\n {% if snowpipe.error_integration -%} error_integration = '{{snowpipe.error_integration}}' {%- endif %}\n as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_external_tables.snowflake_get_copy_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2956178, "supported_languages": null }, "macro.dbt_external_tables.snowflake_create_empty_table": { "unique_id": "macro.dbt_external_tables.snowflake_create_empty_table", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "name": "snowflake_create_empty_table", "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\n\n {%- set columns = source_node.columns.values() %}\n\n create or replace table {{source(source_node.source_name, source_node.name)}} (\n {% if columns|length == 0 %}\n value variant,\n {% else -%}\n {%- for column in columns -%}\n {{column.name}} {{column.data_type}},\n {% endfor -%}\n {% endif %}\n metadata_filename varchar,\n metadata_file_row_number bigint,\n _dbt_copied_at timestamp\n );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.2970178, "supported_languages": null }, "macro.dbt_external_tables.spark__create_external_table": { "unique_id": "macro.dbt_external_tables.spark__create_external_table", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/create_external_table.sql", "original_file_path": "macros/plugins/spark/create_external_table.sql", "name": "spark__create_external_table", "macro_sql": "{% macro spark__create_external_table(source_node) %}\n\n {%- set columns = source_node.columns.values() -%}\n {%- set external = source_node.external -%}\n {%- set partitions = external.partitions -%}\n {%- set options = external.options -%}\n\n {%- set columns_and_partitions = columns | list -%}\n {%- if partitions -%}\n {%- for i in partitions -%}\n {%- if i.name not in columns_and_partitions | list | map(attribute='name') -%}\n {%- do columns_and_partitions.append(i) -%}\n {%- endif -%}\n {%- endfor -%}\n {%- endif -%}\n\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\n create table {{source(source_node.source_name, source_node.name)}} \n {%- if columns | length > 0 %} (\n {% for column in columns_and_partitions %}\n {{column.name}} {{column.data_type}}\n {{- ',' if not loop.last -}}\n {% endfor %}\n ) {% endif -%}\n {% if external.using %} using {{external.using}} {%- endif %}\n {% if options -%} options (\n {%- for key, value in options.items() -%}\n '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\n {%- endfor -%}\n ) {%- endif %}\n {% if partitions -%} partitioned by (\n {%- for partition in partitions -%}\n {{partition.name}}{{', ' if not loop.last}}\n {%- endfor -%}\n ) {%- endif %}\n {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n {% if external.location -%} location '{{external.location}}' {%- endif %}\n {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.3019023, "supported_languages": null }, "macro.dbt_external_tables.spark__get_external_build_plan": { "unique_id": "macro.dbt_external_tables.spark__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/get_external_build_plan.sql", "original_file_path": "macros/plugins/spark/get_external_build_plan.sql", "name": "spark__get_external_build_plan", "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\n\n {% set build_plan = [] %}\n\n {% set old_relation = adapter.get_relation(\n database = none,\n schema = source_node.schema,\n identifier = source_node.identifier\n ) %}\n\n {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n {% if create_or_replace %}\n {% set build_plan = build_plan + [\n dbt_external_tables.create_external_schema(source_node),\n dbt_external_tables.dropif(source_node), \n dbt_external_tables.create_external_table(source_node)\n ] %}\n {% else %}\n {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n {% endif %}\n\n {% set recover_partitions = dbt_external_tables.recover_partitions(source_node) %}\n {% if recover_partitions %}\n {% set build_plan = build_plan + [\n recover_partitions\n ] %}\n {% endif %}\n\n {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table", "macro.dbt_external_tables.recover_partitions" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.3045263, "supported_languages": null }, "macro.dbt_external_tables.spark__refresh_external_table": { "unique_id": "macro.dbt_external_tables.spark__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/refresh_external_table.sql", "original_file_path": "macros/plugins/spark/refresh_external_table.sql", "name": "spark__refresh_external_table", "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\n \n {% set refresh %}\n refresh table {{source(source_node.source_name, source_node.name)}}\n {% endset %}\n \n {% do return([refresh]) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.3054454, "supported_languages": null }, "macro.dbt_external_tables.spark__recover_partitions": { "unique_id": "macro.dbt_external_tables.spark__recover_partitions", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "name": "spark__recover_partitions", "macro_sql": "{% macro spark__recover_partitions(source_node) %}\n {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\n\n {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\n {% set ddl %}\n ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\n {% endset %}\n {%- else -%}\n {% set ddl = none %}\n {%- endif -%}\n\n {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.307016, "supported_languages": null }, "macro.dbt_external_tables.recover_partitions": { "unique_id": "macro.dbt_external_tables.recover_partitions", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "name": "recover_partitions", "macro_sql": "{% macro recover_partitions(source_node) %}\n {{ return(adapter.dispatch('recover_partitions', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_external_tables.default__recover_partitions" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.3074384, "supported_languages": null }, "macro.dbt_external_tables.default__recover_partitions": { "unique_id": "macro.dbt_external_tables.default__recover_partitions", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "name": "default__recover_partitions", "macro_sql": "{% macro default__recover_partitions(source_node) %}\n /*{# \n We're dispatching this macro so that users can override it if required on other adapters\n but this will work for spark/databricks. \n #}*/\n\n {{ exceptions.raise_not_implemented('recover_partitions macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.3078372, "supported_languages": null }, "macro.dbt_external_tables.spark__dropif": { "unique_id": "macro.dbt_external_tables.spark__dropif", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/helpers/dropif.sql", "original_file_path": "macros/plugins/spark/helpers/dropif.sql", "name": "spark__dropif", "macro_sql": "{% macro spark__dropif(node) %}\n \n {% set ddl %}\n drop table if exists {{source(node.source_name, node.name)}}\n {% endset %}\n \n {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.3087041, "supported_languages": null }, "macro.dbt_external_tables.redshift__create_external_table": { "unique_id": "macro.dbt_external_tables.redshift__create_external_table", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/create_external_table.sql", "original_file_path": "macros/plugins/redshift/create_external_table.sql", "name": "redshift__create_external_table", "macro_sql": "{% macro redshift__create_external_table(source_node) %}\n\n {%- set columns = source_node.columns.values() -%}\n {%- set external = source_node.external -%}\n {%- set partitions = external.partitions -%}\n\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\n{# This assumes you have already created an external schema #}\n\n create external table {{source(source_node.source_name, source_node.name)}} (\n {% for column in columns %}\n {{adapter.quote(column.name)}} {{column.data_type}}\n {{- ',' if not loop.last -}}\n {% endfor %}\n )\n {% if partitions -%} partitioned by (\n {%- for partition in partitions -%}\n {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\n {%- endfor -%}\n ) {%- endif %}\n {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n {% if external.location -%} location '{{external.location}}' {%- endif %}\n {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.31196, "supported_languages": null }, "macro.dbt_external_tables.redshift__get_external_build_plan": { "unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/get_external_build_plan.sql", "original_file_path": "macros/plugins/redshift/get_external_build_plan.sql", "name": "redshift__get_external_build_plan", "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\n\n {% set build_plan = [] %}\n \n {% set create_or_replace = (var('ext_full_refresh', false) or not redshift_is_ext_tbl(source_node)) %}\n \n {% if create_or_replace %}\n\n {% set build_plan = [\n dbt_external_tables.dropif(source_node),\n dbt_external_tables.create_external_table(source_node)\n ] + dbt_external_tables.refresh_external_table(source_node) \n %}\n \n {% else %}\n \n {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\n \n {% endif %}\n \n {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_external_tables.redshift_is_ext_tbl", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.3136752, "supported_languages": null }, "macro.dbt_external_tables.redshift__refresh_external_table": { "unique_id": "macro.dbt_external_tables.redshift__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/refresh_external_table.sql", "original_file_path": "macros/plugins/redshift/refresh_external_table.sql", "name": "redshift__refresh_external_table", "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\n\n {%- set partitions = source_node.external.get('partitions',[]) -%}\n\n {%- if partitions -%}\n \n {%- set part_len = partitions|length -%}\n \n {%- set get_partitions_sql -%}\n \n select README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests from\n \n {%- for partition in partitions %} (\n \n {%- set part_num = loop.index -%}\n \n {%- if partition.vals.macro -%}\n {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\n {%- elif partition.vals is string -%}\n {%- set vals = [partition.vals] -%}\n {%- else -%}\n {%- set vals = partition.vals -%}\n {%- endif -%}\n \n {%- for val in vals %}\n \n select\n '\"{{ partition.name }}\"' as name_{{ part_num }},\n '\"{{ val }}\"' as val_{{ part_num }},\n '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\n \n {{ 'union all' if not loop.last else ') ' }}\n \n {%- endfor -%}\n \n {{ 'cross join' if not loop.last }}\n \n {%- endfor -%}\n \n {%- endset -%}\n \n {%- set finals = [] -%}\n \n {%- if execute -%}\n {%- set results = run_query(get_partitions_sql) -%}\n {%- for row in results -%}\n \n {%- set partition_parts = [] -%}\n {%- set path_parts = [] -%}\n \n {%- for i in range(0, part_len) -%}\n {%- do partition_parts.append({\n 'name': row[i README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests 3][1:-1],\n 'value': row[i README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests 3 + 1][1:-1]\n }) -%}\n {%- do path_parts.append(row[i README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests 3 + 2][1:-1]) -%}\n {%- endfor -%}\n \n {%- set construct = {\n 'partition_by': partition_parts,\n 'path': path_parts | join('/')\n } -%}\n \n {% do finals.append(construct) %}\n {%- endfor -%}\n {%- endif -%}\n \n {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\n {{ return(ddl) }}\n \n {% else %}\n \n {% do return([]) %}\n \n {% endif %}\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_external_tables.render_from_context", "macro.dbt.run_query", "macro.dbt_external_tables.redshift_alter_table_add_partitions" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.3218713, "supported_languages": null }, "macro.dbt_external_tables.redshift__exit_transaction": { "unique_id": "macro.dbt_external_tables.redshift__exit_transaction", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/transaction.sql", "original_file_path": "macros/plugins/redshift/helpers/transaction.sql", "name": "redshift__exit_transaction", "macro_sql": "{% macro redshift__exit_transaction() %}\n {{ return('begin; commit;') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.3225114, "supported_languages": null }, "macro.dbt_external_tables.redshift_is_ext_tbl": { "unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "original_file_path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "name": "redshift_is_ext_tbl", "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\n\n {% set existing_relation = load_relation(node) %}\n \n {# external tables don't appear in information_schema.tables,\n so dbt doesn't cache them #}\n {% if existing_relation is none %}\n\n {% set find_ext_tbl %}\n \n select count(*) from svv_external_tables\n where schemaname = '{{node.schema}}'\n and tablename = '{{node.identifier}}'\n \n {% endset %}\n \n {% if execute %}\n {% set result = run_query(find_ext_tbl)[0][0] %}\n {% else %}\n {% set result = 0 %}\n {% endif %}\n\n {% set is_ext_tbl = (result > 0) %}\n {% do return(is_ext_tbl) %}\n \n {% else %}\n \n {% do return(false) %}\n \n {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.load_relation", "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.3246791, "supported_languages": null }, "macro.dbt_external_tables.redshift_alter_table_add_partitions": { "unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/add_partitions.sql", "original_file_path": "macros/plugins/redshift/helpers/add_partitions.sql", "name": "redshift_alter_table_add_partitions", "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\n\n {{ log(\"Generating ADD PARTITION statement for partition set between \" \n ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\n\n {% set ddl = [] %}\n \n {% if partitions|length > 0 %}\n \n {% set alter_table_add %}\n alter table {{source(source_node.source_name, source_node.name)}} add if not exists \n {% endset %}\n \n {%- set alters -%}\n\n {{ alter_table_add }}\n\n {%- for partition in partitions -%}\n\n {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\n\n ; {{ alter_table_add }}\n\n {%- endif -%}\n\n partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\n location '{{ source_node.external.location }}/{{ partition.path }}/'\n\n {% endfor -%}\n \n {%- endset -%}\n \n {% set ddl = ddl + alters.split(';') %}\n\n {% else %}\n\n {{ log(\"No partitions to be added\") }}\n\n {% endif %}\n \n {% do return(ddl) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.3281384, "supported_languages": null }, "macro.dbt_external_tables.render_from_context": { "unique_id": "macro.dbt_external_tables.render_from_context", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/render_macro.sql", "original_file_path": "macros/plugins/redshift/helpers/render_macro.sql", "name": "render_from_context", "macro_sql": "{% macro render_from_context(name) -%}\n{% set original_name = name %}\n {% if '.' in name %}\n {% set package_name, name = name.split(\".\", 1) %}\n {% else %}\n {% set package_name = none %}\n {% endif %}\n\n {% if package_name is none %}\n {% set package_context = context %}\n {% elif package_name in context %}\n {% set package_context = context[package_name] %}\n {% else %}\n {% set error_msg %}\n Could not find package '{{package_name}}', called by macro '{{original_name}}'\n {% endset %}\n {{ exceptions.raise_compiler_error(error_msg | trim) }}\n {% endif %}\n \n {{ return(package_context[name](*varargs, **kwargs)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.3305137, "supported_languages": null }, "macro.dbt_external_tables.year_month_day": { "unique_id": "macro.dbt_external_tables.year_month_day", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "year_month_day", "macro_sql": "{% macro year_month_day(name, value) %}\n {% set path = value.replace('-','/') %}\n {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt.replace" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.3314908, "supported_languages": null }, "macro.dbt_external_tables.key_value": { "unique_id": "macro.dbt_external_tables.key_value", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "key_value", "macro_sql": "{% macro key_value(name, value) %}\n {% set path = name ~ '=' ~ value %}\n {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.3319364, "supported_languages": null }, "macro.dbt_external_tables.value_only": { "unique_id": "macro.dbt_external_tables.value_only", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "value_only", "macro_sql": "{% macro value_only(name, value) %}\n {% set path = value %}\n {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.3323147, "supported_languages": null }, "macro.dbt_external_tables.redshift__dropif": { "unique_id": "macro.dbt_external_tables.redshift__dropif", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/dropif.sql", "original_file_path": "macros/plugins/redshift/helpers/dropif.sql", "name": "redshift__dropif", "macro_sql": "{% macro redshift__dropif(node) %}\n \n {% set ddl %}\n drop table if exists {{source(node.source_name, node.name)}} cascade\n {% endset %}\n \n {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.333186, "supported_languages": null }, "macro.dbt_external_tables.sqlserver__create_external_schema": { "unique_id": "macro.dbt_external_tables.sqlserver__create_external_schema", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/create_external_schema.sql", "original_file_path": "macros/plugins/sqlserver/create_external_schema.sql", "name": "sqlserver__create_external_schema", "macro_sql": "{% macro sqlserver__create_external_schema(source_node) %}\n {# https://learn.microsoft.com/en-us/sql/t-sql/statements/create-schema-transact-sql?view=sql-server-ver16 #}\n\n {% set ddl %}\n IF NOT EXISTS (SELECT README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests FROM sys.schemas WHERE name = '{{ source_node.schema }}')\n BEGIN\n EXEC('CREATE SCHEMA [{{ source_node.schema }}]')\n END \n {% endset %}\n\n {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.3340895, "supported_languages": null }, "macro.dbt_external_tables.sqlserver__create_external_table": { "unique_id": "macro.dbt_external_tables.sqlserver__create_external_table", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/create_external_table.sql", "original_file_path": "macros/plugins/sqlserver/create_external_table.sql", "name": "sqlserver__create_external_table", "macro_sql": "{% macro sqlserver__create_external_table(source_node) %}\n\n {%- set columns = source_node.columns.values() -%}\n {%- set external = source_node.external -%}\n\n {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\n {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\n\n create external table {{source(source_node.source_name, source_node.name)}} (\n {% for column in columns %}\n {# TODO set nullity based on schema tests?? #}\n {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\n {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\n {{- ',' if not loop.last -}}\n {% endfor %}\n )\n WITH (\n {# remove keys that are None (i.e. not defined for a given source) #}\n {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\n {{key}} = \n {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\n '{{value}}'\n {% elif key in [\"data_source\",\"file_format\"] -%}\n [{{value}}]\n {% else -%}\n {{value}}\n {%- endif -%}\n {{- ',' if not loop.last -}}\n {%- endfor -%}\n )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.3373904, "supported_languages": null }, "macro.dbt_external_tables.sqlserver__get_external_build_plan": { "unique_id": "macro.dbt_external_tables.sqlserver__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/get_external_build_plan.sql", "original_file_path": "macros/plugins/sqlserver/get_external_build_plan.sql", "name": "sqlserver__get_external_build_plan", "macro_sql": "{% macro sqlserver__get_external_build_plan(source_node) %}\n\n {% set build_plan = [] %}\n\n {% set old_relation = adapter.get_relation(\n database = source_node.database,\n schema = source_node.schema,\n identifier = source_node.identifier\n ) %}\n\n {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n {% if create_or_replace %}\n {% set build_plan = build_plan + [ \n dbt_external_tables.create_external_schema(source_node),\n dbt_external_tables.dropif(source_node), \n dbt_external_tables.create_external_table(source_node)\n ] %}\n {% else %}\n {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n {% endif %}\n {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [ "macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.339543, "supported_languages": null }, "macro.dbt_external_tables.sqlserver__dropif": { "unique_id": "macro.dbt_external_tables.sqlserver__dropif", "package_name": "dbt_external_tables", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/helpers/dropif.sql", "original_file_path": "macros/plugins/sqlserver/helpers/dropif.sql", "name": "sqlserver__dropif", "macro_sql": "{% macro sqlserver__dropif(node) %}\n \n {% set ddl %}\n if object_id ('{{source(node.source_name, node.name)}}') is not null\n begin\n drop external table {{source(node.source_name, node.name)}}\n end\n {% endset %}\n \n {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1680812390.3406024, "supported_languages": null } }, "docs": { "tpch.__dbt_utils__": { "unique_id": "tpch.__dbt_utils__", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "overview.md", "original_file_path": "models/overview.md", "name": "__dbt_utils__", "block_contents": "# Utility macros\nThis package is maintained by dbt Labs.\n\nOur dbt project heavily uses this suite of utility macros, especially:\n- `surrogate_key`\n- `test_equality`\n- `pivot`\n\nfor more info, please check [dbt_utils](https://hub.getdbt.com/dbt-labs/dbt_utils/latest/)" }, "tpch.__codegen__": { "unique_id": "tpch.__codegen__", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "overview.md", "original_file_path": "models/overview.md", "name": "__codegen__", "block_contents": "# codegen\nThis package is maintained by dbt Labs.\n\nIt provides macros that are especially helpful in creating yml files and base models quickly.\n\nfor more info, please check [codgen](https://hub.getdbt.com/dbt-labs/codegen/latest/)" }, "tpch.__snowflake_spend__": { "unique_id": "tpch.__snowflake_spend__", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "overview.md", "original_file_path": "models/overview.md", "name": "__snowflake_spend__", "block_contents": "# snowflake_spend\nThis package is provided by the community -- created by gitlabhq. \n\nThe intent of this package is to understand the cost your Snowflake Data Warehouse is accruing\n\nfor more info, please check [snowflake_spend](https://hub.getdbt.com/gitlabhq/snowflake_spend/latest/)" }, "tpch.__dbt_external_tables__": { "unique_id": "tpch.__dbt_external_tables__", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "overview.md", "original_file_path": "models/overview.md", "name": "__dbt_external_tables__", "block_contents": "# dbt_external_tables\nThis package is maintained by dbt Labs.\n\nIt provides macros to create/replace external tables and refresh their partitions, using the metadata provided in your .yml file source definitions\n\nfor more info, please check [dbt_external_tables](https://hub.getdbt.com/dbt-labs/dbt_external_tables/latest/)" }, "tpch.tpch_source": { "unique_id": "tpch.tpch_source", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "name": "tpch_source", "block_contents": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)" }, "tpch.order_item_key": { "unique_id": "tpch.order_item_key", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "name": "order_item_key", "block_contents": "surrogate key for the model -- combo of order_key + line_number" }, "tpch.line_number": { "unique_id": "tpch.line_number", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "name": "line_number", "block_contents": "sequence of the order items within the order" }, "tpch.return_flag": { "unique_id": "tpch.return_flag", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "name": "return_flag", "block_contents": "letter determining the status of the return" }, "tpch.ship_date": { "unique_id": "tpch.ship_date", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "name": "ship_date", "block_contents": "the date the order item is being shipped" }, "tpch.commit_date": { "unique_id": "tpch.commit_date", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "name": "commit_date", "block_contents": "the date the order item is being commited" }, "tpch.receipt_date": { "unique_id": "tpch.receipt_date", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "name": "receipt_date", "block_contents": "the receipt date of the order item" }, "tpch.ship_mode": { "unique_id": "tpch.ship_mode", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "name": "ship_mode", "block_contents": "method of shipping" }, "tpch.comment": { "unique_id": "tpch.comment", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "name": "comment", "block_contents": "additional commentary" }, "tpch.extended_price": { "unique_id": "tpch.extended_price", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "name": "extended_price", "block_contents": "line item price" }, "tpch.discount_percentage": { "unique_id": "tpch.discount_percentage", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "name": "discount_percentage", "block_contents": "percentage of the discount" }, "tpch.supplier_name": { "unique_id": "tpch.supplier_name", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "name": "supplier_name", "block_contents": "id of the supplier" }, "tpch.supplier_address": { "unique_id": "tpch.supplier_address", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "name": "supplier_address", "block_contents": "address of the supplier" }, "tpch.phone_number": { "unique_id": "tpch.phone_number", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "name": "phone_number", "block_contents": "phone number of the supplier" }, "tpch.account_balance": { "unique_id": "tpch.account_balance", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "name": "account_balance", "block_contents": "raw account balance" }, "tpch.retail_price": { "unique_id": "tpch.retail_price", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "name": "retail_price", "block_contents": "raw retail price" }, "tpch.available_quantity": { "unique_id": "tpch.available_quantity", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "name": "available_quantity", "block_contents": "raw available quantity" }, "tpch.cost": { "unique_id": "tpch.cost", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "name": "cost", "block_contents": "raw cost" }, "tpch.base_price": { "unique_id": "tpch.base_price", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "name": "base_price", "block_contents": "since extended_price is the line item total, we back out the price per item" }, "tpch.discounted_price": { "unique_id": "tpch.discounted_price", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "name": "discounted_price", "block_contents": "factoring in the discount_percentage, the line item discount total" }, "tpch.tax_rate": { "unique_id": "tpch.tax_rate", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "name": "tax_rate", "block_contents": "tax rate of the order item" }, "tpch.gross_item_sales_amount": { "unique_id": "tpch.gross_item_sales_amount", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "name": "gross_item_sales_amount", "block_contents": "same as extended_price" }, "tpch.discounted_item_sales_amount": { "unique_id": "tpch.discounted_item_sales_amount", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "name": "discounted_item_sales_amount", "block_contents": "line item (includes quantity) discount amount" }, "tpch.item_discount_amount": { "unique_id": "tpch.item_discount_amount", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "name": "item_discount_amount", "block_contents": "item level discount amount. this is always a negative number" }, "tpch.item_tax_amount": { "unique_id": "tpch.item_tax_amount", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "name": "item_tax_amount", "block_contents": "item level tax total" }, "tpch.net_item_sales_amount": { "unique_id": "tpch.net_item_sales_amount", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "name": "net_item_sales_amount", "block_contents": "the net total which factors in discount and tax" }, "dbt.__overview__": { "unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion" }, "dbt_artifacts.command_invocation_id": { "unique_id": "dbt_artifacts.command_invocation_id", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "command_invocation_id", "block_contents": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation." }, "dbt_artifacts.node_id": { "unique_id": "dbt_artifacts.node_id", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "node_id", "block_contents": "Unique node identifier." }, "dbt_artifacts.name": { "unique_id": "dbt_artifacts.name", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "name", "block_contents": "Name of the node." }, "dbt_artifacts.schema": { "unique_id": "dbt_artifacts.schema", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "schema", "block_contents": "Configured schema for the node." }, "dbt_artifacts.package_name": { "unique_id": "dbt_artifacts.package_name", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "package_name", "block_contents": "Name of the dbt package which contains the node." }, "dbt_artifacts.total_node_runtime": { "unique_id": "dbt_artifacts.total_node_runtime", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "total_node_runtime", "block_contents": "Total time spent executing this node (seconds)." }, "dbt_artifacts.compile_started_at": { "unique_id": "dbt_artifacts.compile_started_at", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "compile_started_at", "block_contents": "Timestamp when the node started compiling." }, "dbt_artifacts.depends_on_nodes": { "unique_id": "dbt_artifacts.depends_on_nodes", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "depends_on_nodes", "block_contents": "Array of node identifiers that this node depends on in the execution graph." }, "dbt_artifacts.status": { "unique_id": "dbt_artifacts.status", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "status", "block_contents": "Represents the execution status of a node, can be success, failure, or error." }, "dbt_artifacts.query_completed_at": { "unique_id": "dbt_artifacts.query_completed_at", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "query_completed_at", "block_contents": "Timestamp when the node's SQL query completed." }, "dbt_artifacts.materialization": { "unique_id": "dbt_artifacts.materialization", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "materialization", "block_contents": "The materialization of the model." }, "dbt_artifacts.database": { "unique_id": "dbt_artifacts.database", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "database", "block_contents": "The configured database for the node." }, "dbt_artifacts.rows_affected": { "unique_id": "dbt_artifacts.rows_affected", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "rows_affected", "block_contents": "Number of rows affected by the model execution." }, "dbt_artifacts.bytes_processed": { "unique_id": "dbt_artifacts.bytes_processed", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "bytes_processed", "block_contents": "Number of bytes processed by the model execution." }, "dbt_artifacts.thread_id": { "unique_id": "dbt_artifacts.thread_id", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "thread_id", "block_contents": "Which thread executed this node? E.g. Thread-1" }, "dbt_artifacts.path": { "unique_id": "dbt_artifacts.path", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "path", "block_contents": "Path to the model on the local filesystem." }, "dbt_artifacts.was_full_refresh": { "unique_id": "dbt_artifacts.was_full_refresh", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "was_full_refresh", "block_contents": "Boolean flag indicating whether the nodes run was a full refresh or not." }, "dbt_artifacts.checksum": { "unique_id": "dbt_artifacts.checksum", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "checksum", "block_contents": "Checksum of the model." }, "dbt_artifacts.seed_execution_id": { "unique_id": "dbt_artifacts.seed_execution_id", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "seed_execution_id", "block_contents": "Execution ID of the seed node." }, "dbt_artifacts.test_execution_id": { "unique_id": "dbt_artifacts.test_execution_id", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "test_execution_id", "block_contents": "Execution ID of the test node." }, "dbt_artifacts.snapshot_execution_id": { "unique_id": "dbt_artifacts.snapshot_execution_id", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "snapshot_execution_id", "block_contents": "Execution ID of the snapshot node." }, "dbt_artifacts.model_execution_id": { "unique_id": "dbt_artifacts.model_execution_id", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "model_execution_id", "block_contents": "Execution ID of the model node." }, "dbt_artifacts.loader": { "unique_id": "dbt_artifacts.loader", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "loader", "block_contents": "Describes the tool that loads this source into your warehouse." }, "dbt_artifacts.freshness": { "unique_id": "dbt_artifacts.freshness", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "freshness", "block_contents": "The specified freshness of the source model." }, "dbt_artifacts.url": { "unique_id": "dbt_artifacts.url", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "url", "block_contents": "The URL of the BI tool where the data defined by the exposure can be viewed." }, "dbt_artifacts.identifier": { "unique_id": "dbt_artifacts.identifier", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "identifier", "block_contents": "Source identifier." }, "dbt_artifacts.source_name": { "unique_id": "dbt_artifacts.source_name", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "source_name", "block_contents": "Source name." }, "dbt_artifacts.test_path": { "unique_id": "dbt_artifacts.test_path", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "test_path", "block_contents": "Path to the yaml (SQL in case of a singular test) file describing the test." }, "dbt_artifacts.tags": { "unique_id": "dbt_artifacts.tags", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "tags", "block_contents": "Tags used in resource selection associated with the node." }, "dbt_artifacts.strategy": { "unique_id": "dbt_artifacts.strategy", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "strategy", "block_contents": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt — timestamp\nand check." }, "dbt_artifacts.failures": { "unique_id": "dbt_artifacts.failures", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "failures", "block_contents": "Test failures. Value is 1 if the test failed, 0 if successful." }, "dbt_artifacts.loaded_at_field": { "unique_id": "dbt_artifacts.loaded_at_field", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "loaded_at_field", "block_contents": "A column name (or expression) that returns a timestamp indicating freshness." }, "dbt_artifacts.type": { "unique_id": "dbt_artifacts.type", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "type", "block_contents": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)" }, "dbt_artifacts.description": { "unique_id": "dbt_artifacts.description", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "description", "block_contents": "Node description." }, "dbt_artifacts.maturity": { "unique_id": "dbt_artifacts.maturity", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "maturity", "block_contents": "Exposure maturity; one of high, medium, low." }, "dbt_artifacts.owner": { "unique_id": "dbt_artifacts.owner", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "owner", "block_contents": "Owner of the exposure, usually an email address." }, "dbt_artifacts.source_execution_id": { "unique_id": "dbt_artifacts.source_execution_id", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "source_execution_id", "block_contents": "Execution ID of the source node." }, "dbt_artifacts.exposure_execution_id": { "unique_id": "dbt_artifacts.exposure_execution_id", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "exposure_execution_id", "block_contents": "Execution ID of the exposure node." }, "dbt_artifacts.dbt_version": { "unique_id": "dbt_artifacts.dbt_version", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_version", "block_contents": "Installed version of dbt that is currently running." }, "dbt_artifacts.project_name": { "unique_id": "dbt_artifacts.project_name", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "project_name", "block_contents": "Name for the root-level project which is being run by dbt." }, "dbt_artifacts.run_started_at": { "unique_id": "dbt_artifacts.run_started_at", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "run_started_at", "block_contents": "The start timestamp of the dbt execution which generated the record." }, "dbt_artifacts.dbt_command": { "unique_id": "dbt_artifacts.dbt_command", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_command", "block_contents": "dbt command of this run." }, "dbt_artifacts.full_refresh_flag": { "unique_id": "dbt_artifacts.full_refresh_flag", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "full_refresh_flag", "block_contents": "Boolean flag indicating whether the dbt run was in full refresh mode or not." }, "dbt_artifacts.target_profile_name": { "unique_id": "dbt_artifacts.target_profile_name", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "target_profile_name", "block_contents": "The name of the active profile." }, "dbt_artifacts.target_name": { "unique_id": "dbt_artifacts.target_name", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "target_name", "block_contents": "The name of the active target." }, "dbt_artifacts.target_schema": { "unique_id": "dbt_artifacts.target_schema", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "target_schema", "block_contents": "The name of the target dbt schema." }, "dbt_artifacts.target_threads": { "unique_id": "dbt_artifacts.target_threads", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "target_threads", "block_contents": "The number of threads in use by dbt." }, "dbt_artifacts.dbt_cloud_project_id": { "unique_id": "dbt_artifacts.dbt_cloud_project_id", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_cloud_project_id", "block_contents": "The ID of the dbt Cloud Project for this run." }, "dbt_artifacts.dbt_cloud_job_id": { "unique_id": "dbt_artifacts.dbt_cloud_job_id", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_cloud_job_id", "block_contents": "The ID of the dbt Cloud Job for this run." }, "dbt_artifacts.dbt_cloud_run_id": { "unique_id": "dbt_artifacts.dbt_cloud_run_id", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_cloud_run_id", "block_contents": "The ID of this particular run." }, "dbt_artifacts.dbt_cloud_run_reason_category": { "unique_id": "dbt_artifacts.dbt_cloud_run_reason_category", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_cloud_run_reason_category", "block_contents": "The \"category\" of the trigger for this run." }, "dbt_artifacts.dbt_cloud_run_reason": { "unique_id": "dbt_artifacts.dbt_cloud_run_reason", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_cloud_run_reason", "block_contents": "The specific trigger for this run." }, "dbt_artifacts.env_vars": { "unique_id": "dbt_artifacts.env_vars", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "env_vars", "block_contents": "Key-value pairs of environment variables to be capture." }, "dbt_artifacts.dbt_vars": { "unique_id": "dbt_artifacts.dbt_vars", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_vars", "block_contents": "Key-value pairs of project variables to be capture." }, "dbt_artifacts.last_full_refresh_run_completed_at": { "unique_id": "dbt_artifacts.last_full_refresh_run_completed_at", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_full_refresh_run_completed_at", "block_contents": "Timestamp when the node's SQL query completed on the last full (non-incremental) run." }, "dbt_artifacts.last_full_refresh_run_rows_affected": { "unique_id": "dbt_artifacts.last_full_refresh_run_rows_affected", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_full_refresh_run_rows_affected", "block_contents": "Number of rows affected by the node's last full (non-incremental) run." }, "dbt_artifacts.last_full_refresh_run_bytes_processed": { "unique_id": "dbt_artifacts.last_full_refresh_run_bytes_processed", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_full_refresh_run_bytes_processed", "block_contents": "Number of bytes processed by the node's last full (non-incremental) run." }, "dbt_artifacts.last_full_refresh_run_total_runtime": { "unique_id": "dbt_artifacts.last_full_refresh_run_total_runtime", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_full_refresh_run_total_runtime", "block_contents": "Total time spent executing the node's last full (non-incremental) run (seconds)." }, "dbt_artifacts.last_run_completed_at": { "unique_id": "dbt_artifacts.last_run_completed_at", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_run_completed_at", "block_contents": "Timestamp when the node's SQL query completed on the last run." }, "dbt_artifacts.last_run_rows_affected": { "unique_id": "dbt_artifacts.last_run_rows_affected", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_run_rows_affected", "block_contents": "Number of rows affected by the node's last run." }, "dbt_artifacts.last_run_bytes_processed": { "unique_id": "dbt_artifacts.last_run_bytes_processed", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_run_bytes_processed", "block_contents": "Number of bytes processed by the node's last run." }, "dbt_artifacts.last_run_total_runtime": { "unique_id": "dbt_artifacts.last_run_total_runtime", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_run_total_runtime", "block_contents": "Total time spent executing the node's last run (seconds)." }, "dbt_artifacts.meta": { "unique_id": "dbt_artifacts.meta", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "meta", "block_contents": "The meta field of the config associated with the node." }, "dbt_artifacts.invocation_args": { "unique_id": "dbt_artifacts.invocation_args", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "invocation_args", "block_contents": "Key-value pairs of args passed to invocation." }, "dbt_artifacts.dbt_custom_envs": { "unique_id": "dbt_artifacts.dbt_custom_envs", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_custom_envs", "block_contents": "Key-value pairs of environment variables passed to invocation that have the prefix DBT_ENV_CUSTOM_ENV_" }, "dbt_artifacts.alias": { "unique_id": "dbt_artifacts.alias", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/137931897/target/dbt_packages/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "alias", "block_contents": "Alias of the node." } }, "exposures": { "exposure.tpch.sales_by_region": { "fqn": [ "tpch", "marts", "aggregates", "sales_by_region" ], "unique_id": "exposure.tpch.sales_by_region", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "marts/aggregates/exposures.yml", "original_file_path": "models/marts/aggregates/exposures.yml", "name": "sales_by_region", "type": "dashboard", "owner": { "email": "doug.guthrie@dbtlabs.com", "name": "Doug Guthrie" }, "resource_type": "exposure", "description": "# An h1 header\n============\n\nParagraphs are separated by a blank line.\n\n2nd paragraph. *Italic*, **bold**, and `monospace`\nItemized lists look like:\n README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests this one\n README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests that one\n README.md analyses assets dbt_project.yml macros models packages.yml prod requirements.txt scripts seeds snapshots tests the other one\n", "label": null, "maturity": "high", "meta": {}, "tags": [], "config": { "enabled": true }, "unrendered_config": {}, "url": "https://10az.online.tableau.com/#/site/dbtlabspartner/views/SalesWorkbook/Dashboard1", "depends_on": { "macros": [], "nodes": [ "model.tpch.fct_orders" ] }, "refs": [ [ "fct_orders" ] ], "sources": [], "created_at": 1680812392.332181 } }, "metrics": { "metric.tpch.total_revenue": { "fqn": [ "tpch", "metrics", "total_revenue" ], "unique_id": "metric.tpch.total_revenue", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "metrics/metrics.yml", "original_file_path": "models/metrics/metrics.yml", "name": "total_revenue", "description": "Total income from all orders", "label": "Total Revenue", "calculation_method": "sum", "timestamp": "order_date", "expression": "gross_item_sales_amount", "filters": [], "time_grains": [ "day", "week", "month", "quarter", "year" ], "dimensions": [ "return_flag", "order_item_status_code", "supplier_key", "ship_mode" ], "window": null, "model": "ref('fct_order_items')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "config": { "enabled": true }, "unrendered_config": {}, "sources": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.fct_order_items" ] }, "refs": [ [ "fct_order_items" ] ], "metrics": [], "created_at": 1680812392.2605047 }, "metric.tpch.total_customers": { "fqn": [ "tpch", "metrics", "total_customers" ], "unique_id": "metric.tpch.total_customers", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "metrics/metrics.yml", "original_file_path": "models/metrics/metrics.yml", "name": "total_customers", "description": "Total customers with an order", "label": "Total Customers", "calculation_method": "count_distinct", "timestamp": "order_date", "expression": "customer_key", "filters": [], "time_grains": [ "day", "week", "month", "quarter", "year" ], "dimensions": [ "return_flag", "order_item_status_code", "supplier_key", "ship_mode" ], "window": null, "model": "ref('fct_order_items')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "config": { "enabled": true }, "unrendered_config": {}, "sources": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.fct_order_items" ] }, "refs": [ [ "fct_order_items" ] ], "metrics": [], "created_at": 1680812392.2683232 }, "metric.tpch.total_expenses": { "fqn": [ "tpch", "metrics", "total_expenses" ], "unique_id": "metric.tpch.total_expenses", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "metrics/metrics.yml", "original_file_path": "models/metrics/metrics.yml", "name": "total_expenses", "description": "Total expenses from all orders", "label": "Total Expenses", "calculation_method": "sum", "timestamp": "order_date", "expression": "supplier_cost", "filters": [], "time_grains": [ "day", "week", "month", "quarter", "year" ], "dimensions": [ "return_flag", "order_item_status_code", "supplier_key", "ship_mode" ], "window": null, "model": "ref('fct_order_items')", "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "config": { "enabled": true }, "unrendered_config": {}, "sources": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.fct_order_items" ] }, "refs": [ [ "fct_order_items" ] ], "metrics": [], "created_at": 1680812392.276053 }, "metric.tpch.total_profit": { "fqn": [ "tpch", "metrics", "total_profit" ], "unique_id": "metric.tpch.total_profit", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "metrics/metrics.yml", "original_file_path": "models/metrics/metrics.yml", "name": "total_profit", "description": "Total profit from all orders", "label": "Total Profit", "calculation_method": "derived", "timestamp": "order_date", "expression": "total_revenue - total_expenses", "filters": [], "time_grains": [ "day", "week", "month", "quarter", "year" ], "dimensions": [ "return_flag", "order_item_status_code", "supplier_key", "ship_mode" ], "window": null, "model": null, "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "config": { "enabled": true }, "unrendered_config": {}, "sources": [], "depends_on": { "macros": [], "nodes": [ "metric.tpch.total_revenue", "metric.tpch.total_expenses" ] }, "refs": [], "metrics": [ [ "total_revenue" ], [ "total_expenses" ] ], "created_at": 1680812392.2833347 }, "metric.tpch.average_revenue_per_customer": { "fqn": [ "tpch", "metrics", "average_revenue_per_customer" ], "unique_id": "metric.tpch.average_revenue_per_customer", "package_name": "tpch", "root_path": "/tmp/jobs/137931897/target", "path": "metrics/metrics.yml", "original_file_path": "models/metrics/metrics.yml", "name": "average_revenue_per_customer", "description": "The average revenue received per customer", "label": "Average Revenue Per Customer", "calculation_method": "derived", "timestamp": "order_date", "expression": "total_revenue / total_customers", "filters": [], "time_grains": [ "day", "week", "month", "quarter", "year" ], "dimensions": [ "return_flag", "order_item_status_code", "supplier_key", "ship_mode" ], "window": null, "model": null, "model_unique_id": null, "resource_type": "metric", "meta": {}, "tags": [], "config": { "enabled": true }, "unrendered_config": {}, "sources": [], "depends_on": { "macros": [], "nodes": [ "metric.tpch.total_revenue", "metric.tpch.total_customers" ] }, "refs": [], "metrics": [ [ "total_revenue" ], [ "total_customers" ] ], "created_at": 1680812392.2907941 } }, "selectors": {}, "disabled": {}, "parent_map": { "model.tpch.stg_yahooquery__link_clicked": [ "source.tpch.yahooquery.link_clicked" ], "model.tpch.stg_yahooquery__pages": [ "source.tpch.yahooquery.pages" ], "model.tpch.stg_yahooquery__tracks": [ "source.tpch.yahooquery.tracks" ], "model.tpch.stg_dbtc__link_clicked": [ "source.tpch.dbtc.link_clicked" ], "model.tpch.stg_dbtc__tracks": [ "source.tpch.dbtc.tracks" ], "model.tpch.stg_dbtc__pages": [ "source.tpch.dbtc.pages" ], "model.tpch.stg_tpch_line_items": [ "source.tpch.tpch.lineitem" ], "model.tpch.stg_tpch_nations": [ "source.tpch.tpch.nation" ], "model.tpch.stg_tpch_customers": [ "source.tpch.tpch.customer" ], "model.tpch.stg_tpch_parts": [ "source.tpch.tpch.part" ], "model.tpch.stg_tpch_regions": [ "source.tpch.tpch.region" ], "model.tpch.stg_tpch_suppliers": [ "source.tpch.tpch.supplier" ], "model.tpch.stg_tpch_part_suppliers": [ "source.tpch.tpch.partsupp" ], "model.tpch.stg_tpch_orders": [ "source.tpch.tpch.orders" ], "model.tpch.all_days": [], "model.tpch.revenue_weekly_by_ship_mode": [ "metric.tpch.total_revenue", "model.metrics.dbt_metrics_default_calendar" ], "model.tpch.order_items": [ "model.tpch.stg_tpch_line_items", "model.tpch.stg_tpch_orders" ], "model.tpch.part_suppliers": [ "model.tpch.stg_tpch_part_suppliers", "model.tpch.stg_tpch_parts", "model.tpch.stg_tpch_suppliers" ], "model.tpch.agg_ship_modes_hardcoded_pivot": [ "model.tpch.fct_order_items" ], "model.tpch.agg_ship_modes_dynamic_pivot": [ "model.tpch.fct_order_items" ], "model.tpch.dim_customers": [ "model.tpch.stg_tpch_customers", "model.tpch.stg_tpch_nations", "model.tpch.stg_tpch_regions" ], "model.tpch.dim_suppliers": [ "model.tpch.stg_tpch_nations", "model.tpch.stg_tpch_regions", "model.tpch.stg_tpch_suppliers" ], "model.tpch.dim_parts": [ "model.tpch.stg_tpch_parts" ], "model.tpch.fct_orders": [ "model.tpch.order_items", "model.tpch.stg_tpch_orders" ], "model.tpch.fct_orders_stats_sql": [ "model.tpch.fct_orders" ], "model.tpch.fct_order_items": [ "model.tpch.order_items", "model.tpch.part_suppliers" ], "model.tpch.int_segment__tracks": [ "model.tpch.stg_dbtc__tracks", "model.tpch.stg_yahooquery__tracks" ], "model.tpch.int_segment__pages": [ "model.tpch.stg_dbtc__pages", "model.tpch.stg_yahooquery__pages" ], "model.tpch.int_segment__link_clicked": [ "model.tpch.stg_dbtc__link_clicked", "model.tpch.stg_yahooquery__link_clicked" ], "model.tpch.use_variables": [ "model.tpch.fct_order_items", "model.tpch.fct_order_items" ], "model.tpch.materialization_incremental": [ "source.tpch.tpch.customer" ], "model.tpch.forecast_score_py": [ "model.tpch.forecast_train_py" ], "model.tpch.forecast_train_py": [ "model.tpch.revenue_weekly_by_ship_mode" ], "model.tpch.fct_orders_stats_py": [ "model.tpch.fct_orders" ], "snapshot.tpch.tpch_customer_snapshot": [ "source.tpch.tpch.customer" ], "snapshot.tpch.tpch_supplier_snapshot": [ "source.tpch.tpch.supplier" ], "snapshot.tpch.tpch_part_snapshot": [ "source.tpch.tpch.part" ], "test.tpch.stg_tpch_orders_assert_positive_price": [ "model.tpch.stg_tpch_orders" ], "test.tpch.macro_stg_tpch_orders_assert_pos_price": [ "model.tpch.stg_tpch_orders" ], "test.tpch.macro_stg_tphc_suppliers_assert_pos_acct_bal": [ "model.tpch.stg_tpch_suppliers" ], "seed.tpch.country_codes": [], "seed.tpch.snowflake_contract_rates": [], "model.dbt_artifacts.dim_dbt__models": [ "model.dbt_artifacts.stg_dbt__models" ], "model.dbt_artifacts.fct_dbt__model_executions": [ "model.dbt_artifacts.stg_dbt__model_executions" ], "model.dbt_artifacts.fct_dbt__snapshot_executions": [ "model.dbt_artifacts.stg_dbt__snapshot_executions" ], "model.dbt_artifacts.fct_dbt__seed_executions": [ "model.dbt_artifacts.stg_dbt__seed_executions" ], "model.dbt_artifacts.fct_dbt__test_executions": [ "model.dbt_artifacts.stg_dbt__test_executions" ], "model.dbt_artifacts.dim_dbt__tests": [ "model.dbt_artifacts.stg_dbt__tests" ], "model.dbt_artifacts.dim_dbt__current_models": [ "model.dbt_artifacts.stg_dbt__model_executions", "model.dbt_artifacts.stg_dbt__models" ], "model.dbt_artifacts.dim_dbt__exposures": [ "model.dbt_artifacts.stg_dbt__exposures" ], "model.dbt_artifacts.dim_dbt__seeds": [ "model.dbt_artifacts.stg_dbt__seeds" ], "model.dbt_artifacts.fct_dbt__invocations": [ "model.dbt_artifacts.stg_dbt__invocations" ], "model.dbt_artifacts.dim_dbt__snapshots": [ "model.dbt_artifacts.stg_dbt__snapshots" ], "model.dbt_artifacts.dim_dbt__sources": [ "model.dbt_artifacts.stg_dbt__sources" ], "model.dbt_artifacts.stg_dbt__exposures": [ "model.dbt_artifacts.exposures" ], "model.dbt_artifacts.stg_dbt__seed_executions": [ "model.dbt_artifacts.seed_executions" ], "model.dbt_artifacts.stg_dbt__tests": [ "model.dbt_artifacts.tests" ], "model.dbt_artifacts.stg_dbt__seeds": [ "model.dbt_artifacts.seeds" ], "model.dbt_artifacts.stg_dbt__snapshot_executions": [ "model.dbt_artifacts.snapshot_executions" ], "model.dbt_artifacts.stg_dbt__test_executions": [ "model.dbt_artifacts.test_executions" ], "model.dbt_artifacts.stg_dbt__sources": [ "model.dbt_artifacts.sources" ], "model.dbt_artifacts.stg_dbt__model_executions": [ "model.dbt_artifacts.model_executions" ], "model.dbt_artifacts.stg_dbt__invocations": [ "model.dbt_artifacts.invocations" ], "model.dbt_artifacts.stg_dbt__snapshots": [ "model.dbt_artifacts.snapshots" ], "model.dbt_artifacts.stg_dbt__models": [ "model.dbt_artifacts.models" ], "model.dbt_artifacts.invocations": [], "model.dbt_artifacts.seed_executions": [], "model.dbt_artifacts.sources": [], "model.dbt_artifacts.seeds": [], "model.dbt_artifacts.tests": [], "model.dbt_artifacts.snapshots": [], "model.dbt_artifacts.model_executions": [], "model.dbt_artifacts.test_executions": [], "model.dbt_artifacts.exposures": [], "model.dbt_artifacts.models": [], "model.dbt_artifacts.snapshot_executions": [], "model.metrics.dbt_metrics_default_calendar": [], "test.tpch.unique_stg_tpch_customers_customer_key.7f1a18b1a4": [ "model.tpch.stg_tpch_customers" ], "test.tpch.not_null_stg_tpch_customers_customer_key.a10e15535a": [ "model.tpch.stg_tpch_customers" ], "test.tpch.unique_stg_tpch_line_items_order_item_key.c819d91e0a": [ "model.tpch.stg_tpch_line_items" ], "test.tpch.not_null_stg_tpch_line_items_order_item_key.cd47c7a679": [ "model.tpch.stg_tpch_line_items" ], "test.tpch.unique_stg_tpch_nations_nation_key.9e3675553d": [ "model.tpch.stg_tpch_nations" ], "test.tpch.not_null_stg_tpch_nations_nation_key.d0c2fe32ed": [ "model.tpch.stg_tpch_nations" ], "test.tpch.unique_stg_tpch_orders_order_key.bd29f13cc9": [ "model.tpch.stg_tpch_orders" ], "test.tpch.not_null_stg_tpch_orders_order_key.bb22e75ae8": [ "model.tpch.stg_tpch_orders" ], "test.tpch.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae": [ "model.tpch.stg_tpch_part_suppliers" ], "test.tpch.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e": [ "model.tpch.stg_tpch_part_suppliers" ], "test.tpch.unique_stg_tpch_parts_part_key.afbc7ad489": [ "model.tpch.stg_tpch_parts" ], "test.tpch.not_null_stg_tpch_parts_part_key.cc8e610420": [ "model.tpch.stg_tpch_parts" ], "test.tpch.unique_stg_tpch_regions_region_key.b2bd891bb5": [ "model.tpch.stg_tpch_regions" ], "test.tpch.not_null_stg_tpch_regions_region_key.869fa0b326": [ "model.tpch.stg_tpch_regions" ], "test.tpch.unique_stg_tpch_suppliers_supplier_key.6215308464": [ "model.tpch.stg_tpch_suppliers" ], "test.tpch.not_null_stg_tpch_suppliers_supplier_key.97c31a786d": [ "model.tpch.stg_tpch_suppliers" ], "test.tpch.unique_order_items_order_item_key.43a40b2837": [ "model.tpch.order_items" ], "test.tpch.not_null_order_items_order_item_key.44b9fa7311": [ "model.tpch.order_items" ], "test.tpch.unique_part_suppliers_part_supplier_key.909477afa8": [ "model.tpch.part_suppliers" ], "test.tpch.not_null_part_suppliers_part_supplier_key.b8b2022ed3": [ "model.tpch.part_suppliers" ], "test.tpch.unique_dim_customers_customer_key.ad8156656e": [ "model.tpch.dim_customers" ], "test.tpch.not_null_dim_customers_customer_key.4bebfb3411": [ "model.tpch.dim_customers" ], "test.tpch.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69": [ "model.tpch.dim_customers" ], "test.tpch.unique_dim_parts_part_key.712df18d58": [ "model.tpch.dim_parts" ], "test.tpch.not_null_dim_parts_part_key.4358f880d9": [ "model.tpch.dim_parts" ], "test.tpch.unique_dim_suppliers_supplier_key.58fc3e4770": [ "model.tpch.dim_suppliers" ], "test.tpch.not_null_dim_suppliers_supplier_key.4315350956": [ "model.tpch.dim_suppliers" ], "test.tpch.unique_fct_order_items_order_item_key.4d6426a255": [ "model.tpch.fct_order_items" ], "test.tpch.not_null_fct_order_items_order_item_key.47516a6371": [ "model.tpch.fct_order_items" ], "test.tpch.unique_fct_orders_order_key.f5e7a90273": [ "model.tpch.fct_orders" ], "test.tpch.not_null_fct_orders_order_key.6a6f83ab15": [ "model.tpch.fct_orders" ], "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b": [ "model.tpch.dim_customers", "model.tpch.fct_orders" ], "test.tpch.unique_materialization_incremental_customer_key.325783f327": [ "model.tpch.materialization_incremental" ], "test.tpch.not_null_materialization_incremental_customer_key.e2b95d8009": [ "model.tpch.materialization_incremental" ], "test.tpch.unique_use_variables_order_item_key.fb5576fe0e": [ "model.tpch.use_variables" ], "test.tpch.not_null_use_variables_order_item_key.c2bd602686": [ "model.tpch.use_variables" ], "test.tpch.source_not_null_dbtc_link_clicked_link.f7c8e69ba4": [ "source.tpch.dbtc.link_clicked" ], "test.tpch.source_not_null_dbtc_link_clicked_id.9028bfe6aa": [ "source.tpch.dbtc.link_clicked" ], "test.tpch.source_unique_dbtc_link_clicked_id.6a057563bc": [ "source.tpch.dbtc.link_clicked" ], "test.tpch.source_not_null_dbtc_link_clicked_event.7882b2f4f6": [ "source.tpch.dbtc.link_clicked" ], "test.tpch.source_not_null_dbtc_link_clicked_sent_at.39cf8a9ef9": [ "source.tpch.dbtc.link_clicked" ], "test.tpch.source_not_null_dbtc_pages_id.f6b6a8c945": [ "source.tpch.dbtc.pages" ], "test.tpch.source_unique_dbtc_pages_id.8457cf34c6": [ "source.tpch.dbtc.pages" ], "test.tpch.source_not_null_dbtc_pages_sent_at.485c11a73d": [ "source.tpch.dbtc.pages" ], "test.tpch.source_not_null_dbtc_tracks_event_text.80a027ce56": [ "source.tpch.dbtc.tracks" ], "test.tpch.source_not_null_dbtc_tracks_id.a88be3eab6": [ "source.tpch.dbtc.tracks" ], "test.tpch.source_unique_dbtc_tracks_id.d4b89ee628": [ "source.tpch.dbtc.tracks" ], "test.tpch.source_not_null_dbtc_tracks_event.1fd1e17274": [ "source.tpch.dbtc.tracks" ], "test.tpch.source_not_null_dbtc_tracks_sent_at.1ad9794804": [ "source.tpch.dbtc.tracks" ], "test.tpch.source_not_null_yahooquery_link_clicked_link.3620c522a2": [ "source.tpch.yahooquery.link_clicked" ], "test.tpch.source_not_null_yahooquery_link_clicked_id.c548e15a7c": [ "source.tpch.yahooquery.link_clicked" ], "test.tpch.source_unique_yahooquery_link_clicked_id.8d33aca289": [ "source.tpch.yahooquery.link_clicked" ], "test.tpch.source_not_null_yahooquery_link_clicked_event.71e08699a9": [ "source.tpch.yahooquery.link_clicked" ], "test.tpch.source_not_null_yahooquery_link_clicked_sent_at.8b7ef7ad21": [ "source.tpch.yahooquery.link_clicked" ], "test.tpch.source_not_null_yahooquery_pages_id.9f283dcda5": [ "source.tpch.yahooquery.pages" ], "test.tpch.source_unique_yahooquery_pages_id.6bf98eb61d": [ "source.tpch.yahooquery.pages" ], "test.tpch.source_not_null_yahooquery_pages_sent_at.318734adee": [ "source.tpch.yahooquery.pages" ], "test.tpch.source_not_null_yahooquery_tracks_event_text.700c8cdeb6": [ "source.tpch.yahooquery.tracks" ], "test.tpch.source_not_null_yahooquery_tracks_id.621874b412": [ "source.tpch.yahooquery.tracks" ], "test.tpch.source_unique_yahooquery_tracks_id.7c22f538c9": [ "source.tpch.yahooquery.tracks" ], "test.tpch.source_not_null_yahooquery_tracks_event.70b5c344c0": [ "source.tpch.yahooquery.tracks" ], "test.tpch.source_not_null_yahooquery_tracks_sent_at.e5fa5c0d96": [ "source.tpch.yahooquery.tracks" ], "test.tpch.source_not_null_tpch_orders_o_orderkey.ebd571817b": [ "source.tpch.tpch.orders" ], "test.tpch.source_unique_tpch_orders_o_orderkey.374f048af2": [ "source.tpch.tpch.orders" ], "test.tpch.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67": [ "source.tpch.tpch.customer", "source.tpch.tpch.orders" ], "test.tpch.source_not_null_tpch_customer_c_custkey.a95b6298b5": [ "source.tpch.tpch.customer" ], "test.tpch.source_unique_tpch_customer_c_custkey.048e97fc25": [ "source.tpch.tpch.customer" ], "test.tpch.source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_.c9281c341d": [ "source.tpch.tpch.customer", "source.tpch.tpch.nation" ], "test.tpch.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d": [ "source.tpch.tpch.lineitem", "source.tpch.tpch.orders" ], "test.tpch.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8": [ "source.tpch.tpch.lineitem", "source.tpch.tpch.part" ], "test.tpch.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2": [ "source.tpch.tpch.lineitem", "source.tpch.tpch.supplier" ], "test.tpch.source_not_null_tpch_nation_n_nationkey.5ac5d27298": [ "source.tpch.tpch.nation" ], "test.tpch.source_unique_tpch_nation_n_nationkey.3bd4153064": [ "source.tpch.tpch.nation" ], "test.tpch.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da": [ "source.tpch.tpch.nation", "source.tpch.tpch.region" ], "test.tpch.source_not_null_tpch_part_p_partkey.9543847190": [ "source.tpch.tpch.part" ], "test.tpch.source_unique_tpch_part_p_partkey.30b171988e": [ "source.tpch.tpch.part" ], "test.tpch.dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0.534c6e22cc": [ "source.tpch.tpch.part" ], "test.tpch.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f": [ "source.tpch.tpch.part", "source.tpch.tpch.partsupp" ], "test.tpch.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e": [ "source.tpch.tpch.partsupp", "source.tpch.tpch.supplier" ], "test.tpch.source_not_null_tpch_region_r_regionkey.8f6ee68076": [ "source.tpch.tpch.region" ], "test.tpch.source_unique_tpch_region_r_regionkey.d8eeced103": [ "source.tpch.tpch.region" ], "test.tpch.source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST.0e96b086b2": [ "source.tpch.tpch.region" ], "test.tpch.source_not_null_tpch_supplier_s_suppkey.94660e6dab": [ "source.tpch.tpch.supplier" ], "test.tpch.source_unique_tpch_supplier_s_suppkey.1a36cf4370": [ "source.tpch.tpch.supplier" ], "test.tpch.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da": [ "source.tpch.tpch.nation", "source.tpch.tpch.supplier" ], "test.tpch.source_unique_tpch_snapshot_customer_snapshot_src_c_custkey.463ab9515e": [ "source.tpch.tpch_snapshot.customer_snapshot_src" ], "test.tpch.source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey.e3f0c54a96": [ "source.tpch.tpch_snapshot.customer_snapshot_src" ], "source.tpch.dbtc.link_clicked": [], "source.tpch.dbtc.pages": [], "source.tpch.dbtc.tracks": [], "source.tpch.yahooquery.link_clicked": [], "source.tpch.yahooquery.pages": [], "source.tpch.yahooquery.tracks": [], "source.tpch.tpch.orders": [], "source.tpch.tpch.customer": [], "source.tpch.tpch.lineitem": [], "source.tpch.tpch.nation": [], "source.tpch.tpch.part": [], "source.tpch.tpch.partsupp": [], "source.tpch.tpch.region": [], "source.tpch.tpch.supplier": [], "source.tpch.tpch_snapshot.customer_snapshot_src": [], "source.tpch.test_eqrx_s3.dummy_data": [], "source.tpch.deutsche_boerse.trading_data": [], "exposure.tpch.sales_by_region": [ "model.tpch.fct_orders" ], "metric.tpch.total_revenue": [ "model.tpch.fct_order_items" ], "metric.tpch.total_customers": [ "model.tpch.fct_order_items" ], "metric.tpch.total_expenses": [ "model.tpch.fct_order_items" ], "metric.tpch.total_profit": [ "metric.tpch.total_expenses", "metric.tpch.total_revenue" ], "metric.tpch.average_revenue_per_customer": [ "metric.tpch.total_customers", "metric.tpch.total_revenue" ] }, "child_map": { "model.tpch.stg_yahooquery__link_clicked": [ "model.tpch.int_segment__link_clicked" ], "model.tpch.stg_yahooquery__pages": [ "model.tpch.int_segment__pages" ], "model.tpch.stg_yahooquery__tracks": [ "model.tpch.int_segment__tracks" ], "model.tpch.stg_dbtc__link_clicked": [ "model.tpch.int_segment__link_clicked" ], "model.tpch.stg_dbtc__tracks": [ "model.tpch.int_segment__tracks" ], "model.tpch.stg_dbtc__pages": [ "model.tpch.int_segment__pages" ], "model.tpch.stg_tpch_line_items": [ "model.tpch.order_items", "test.tpch.not_null_stg_tpch_line_items_order_item_key.cd47c7a679", "test.tpch.unique_stg_tpch_line_items_order_item_key.c819d91e0a" ], "model.tpch.stg_tpch_nations": [ "model.tpch.dim_customers", "model.tpch.dim_suppliers", "test.tpch.not_null_stg_tpch_nations_nation_key.d0c2fe32ed", "test.tpch.unique_stg_tpch_nations_nation_key.9e3675553d" ], "model.tpch.stg_tpch_customers": [ "model.tpch.dim_customers", "test.tpch.not_null_stg_tpch_customers_customer_key.a10e15535a", "test.tpch.unique_stg_tpch_customers_customer_key.7f1a18b1a4" ], "model.tpch.stg_tpch_parts": [ "model.tpch.dim_parts", "model.tpch.part_suppliers", "test.tpch.not_null_stg_tpch_parts_part_key.cc8e610420", "test.tpch.unique_stg_tpch_parts_part_key.afbc7ad489" ], "model.tpch.stg_tpch_regions": [ "model.tpch.dim_customers", "model.tpch.dim_suppliers", "test.tpch.not_null_stg_tpch_regions_region_key.869fa0b326", "test.tpch.unique_stg_tpch_regions_region_key.b2bd891bb5" ], "model.tpch.stg_tpch_suppliers": [ "model.tpch.dim_suppliers", "model.tpch.part_suppliers", "test.tpch.macro_stg_tphc_suppliers_assert_pos_acct_bal", "test.tpch.not_null_stg_tpch_suppliers_supplier_key.97c31a786d", "test.tpch.unique_stg_tpch_suppliers_supplier_key.6215308464" ], "model.tpch.stg_tpch_part_suppliers": [ "model.tpch.part_suppliers", "test.tpch.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e", "test.tpch.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae" ], "model.tpch.stg_tpch_orders": [ "model.tpch.fct_orders", "model.tpch.order_items", "test.tpch.macro_stg_tpch_orders_assert_pos_price", "test.tpch.not_null_stg_tpch_orders_order_key.bb22e75ae8", "test.tpch.stg_tpch_orders_assert_positive_price", "test.tpch.unique_stg_tpch_orders_order_key.bd29f13cc9" ], "model.tpch.all_days": [], "model.tpch.revenue_weekly_by_ship_mode": [ "model.tpch.forecast_train_py" ], "model.tpch.order_items": [ "model.tpch.fct_order_items", "model.tpch.fct_orders", "test.tpch.not_null_order_items_order_item_key.44b9fa7311", "test.tpch.unique_order_items_order_item_key.43a40b2837" ], "model.tpch.part_suppliers": [ "model.tpch.fct_order_items", "test.tpch.not_null_part_suppliers_part_supplier_key.b8b2022ed3", "test.tpch.unique_part_suppliers_part_supplier_key.909477afa8" ], "model.tpch.agg_ship_modes_hardcoded_pivot": [], "model.tpch.agg_ship_modes_dynamic_pivot": [], "model.tpch.dim_customers": [ "test.tpch.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69", "test.tpch.not_null_dim_customers_customer_key.4bebfb3411", "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b", "test.tpch.unique_dim_customers_customer_key.ad8156656e" ], "model.tpch.dim_suppliers": [ "test.tpch.not_null_dim_suppliers_supplier_key.4315350956", "test.tpch.unique_dim_suppliers_supplier_key.58fc3e4770" ], "model.tpch.dim_parts": [ "test.tpch.not_null_dim_parts_part_key.4358f880d9", "test.tpch.unique_dim_parts_part_key.712df18d58" ], "model.tpch.fct_orders": [ "exposure.tpch.sales_by_region", "model.tpch.fct_orders_stats_py", "model.tpch.fct_orders_stats_sql", "test.tpch.not_null_fct_orders_order_key.6a6f83ab15", "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b", "test.tpch.unique_fct_orders_order_key.f5e7a90273" ], "model.tpch.fct_orders_stats_sql": [], "model.tpch.fct_order_items": [ "metric.tpch.total_customers", "metric.tpch.total_expenses", "metric.tpch.total_revenue", "model.tpch.agg_ship_modes_dynamic_pivot", "model.tpch.agg_ship_modes_hardcoded_pivot", "model.tpch.use_variables", "model.tpch.use_variables", "test.tpch.not_null_fct_order_items_order_item_key.47516a6371", "test.tpch.unique_fct_order_items_order_item_key.4d6426a255" ], "model.tpch.int_segment__tracks": [], "model.tpch.int_segment__pages": [], "model.tpch.int_segment__link_clicked": [], "model.tpch.use_variables": [ "test.tpch.not_null_use_variables_order_item_key.c2bd602686", "test.tpch.unique_use_variables_order_item_key.fb5576fe0e" ], "model.tpch.materialization_incremental": [ "test.tpch.not_null_materialization_incremental_customer_key.e2b95d8009", "test.tpch.unique_materialization_incremental_customer_key.325783f327" ], "model.tpch.forecast_score_py": [], "model.tpch.forecast_train_py": [ "model.tpch.forecast_score_py" ], "model.tpch.fct_orders_stats_py": [], "snapshot.tpch.tpch_customer_snapshot": [], "snapshot.tpch.tpch_supplier_snapshot": [], "snapshot.tpch.tpch_part_snapshot": [], "test.tpch.stg_tpch_orders_assert_positive_price": [], "test.tpch.macro_stg_tpch_orders_assert_pos_price": [], "test.tpch.macro_stg_tphc_suppliers_assert_pos_acct_bal": [], "seed.tpch.country_codes": [], "seed.tpch.snowflake_contract_rates": [], "model.dbt_artifacts.dim_dbt__models": [], "model.dbt_artifacts.fct_dbt__model_executions": [], "model.dbt_artifacts.fct_dbt__snapshot_executions": [], "model.dbt_artifacts.fct_dbt__seed_executions": [], "model.dbt_artifacts.fct_dbt__test_executions": [], "model.dbt_artifacts.dim_dbt__tests": [], "model.dbt_artifacts.dim_dbt__current_models": [], "model.dbt_artifacts.dim_dbt__exposures": [], "model.dbt_artifacts.dim_dbt__seeds": [], "model.dbt_artifacts.fct_dbt__invocations": [], "model.dbt_artifacts.dim_dbt__snapshots": [], "model.dbt_artifacts.dim_dbt__sources": [], "model.dbt_artifacts.stg_dbt__exposures": [ "model.dbt_artifacts.dim_dbt__exposures" ], "model.dbt_artifacts.stg_dbt__seed_executions": [ "model.dbt_artifacts.fct_dbt__seed_executions" ], "model.dbt_artifacts.stg_dbt__tests": [ "model.dbt_artifacts.dim_dbt__tests" ], "model.dbt_artifacts.stg_dbt__seeds": [ "model.dbt_artifacts.dim_dbt__seeds" ], "model.dbt_artifacts.stg_dbt__snapshot_executions": [ "model.dbt_artifacts.fct_dbt__snapshot_executions" ], "model.dbt_artifacts.stg_dbt__test_executions": [ "model.dbt_artifacts.fct_dbt__test_executions" ], "model.dbt_artifacts.stg_dbt__sources": [ "model.dbt_artifacts.dim_dbt__sources" ], "model.dbt_artifacts.stg_dbt__model_executions": [ "model.dbt_artifacts.dim_dbt__current_models", "model.dbt_artifacts.fct_dbt__model_executions" ], "model.dbt_artifacts.stg_dbt__invocations": [ "model.dbt_artifacts.fct_dbt__invocations" ], "model.dbt_artifacts.stg_dbt__snapshots": [ "model.dbt_artifacts.dim_dbt__snapshots" ], "model.dbt_artifacts.stg_dbt__models": [ "model.dbt_artifacts.dim_dbt__current_models", "model.dbt_artifacts.dim_dbt__models" ], "model.dbt_artifacts.invocations": [ "model.dbt_artifacts.stg_dbt__invocations" ], "model.dbt_artifacts.seed_executions": [ "model.dbt_artifacts.stg_dbt__seed_executions" ], "model.dbt_artifacts.sources": [ "model.dbt_artifacts.stg_dbt__sources" ], "model.dbt_artifacts.seeds": [ "model.dbt_artifacts.stg_dbt__seeds" ], "model.dbt_artifacts.tests": [ "model.dbt_artifacts.stg_dbt__tests" ], "model.dbt_artifacts.snapshots": [ "model.dbt_artifacts.stg_dbt__snapshots" ], "model.dbt_artifacts.model_executions": [ "model.dbt_artifacts.stg_dbt__model_executions" ], "model.dbt_artifacts.test_executions": [ "model.dbt_artifacts.stg_dbt__test_executions" ], "model.dbt_artifacts.exposures": [ "model.dbt_artifacts.stg_dbt__exposures" ], "model.dbt_artifacts.models": [ "model.dbt_artifacts.stg_dbt__models" ], "model.dbt_artifacts.snapshot_executions": [ "model.dbt_artifacts.stg_dbt__snapshot_executions" ], "model.metrics.dbt_metrics_default_calendar": [ "model.tpch.revenue_weekly_by_ship_mode" ], "test.tpch.unique_stg_tpch_customers_customer_key.7f1a18b1a4": [], "test.tpch.not_null_stg_tpch_customers_customer_key.a10e15535a": [], "test.tpch.unique_stg_tpch_line_items_order_item_key.c819d91e0a": [], "test.tpch.not_null_stg_tpch_line_items_order_item_key.cd47c7a679": [], "test.tpch.unique_stg_tpch_nations_nation_key.9e3675553d": [], "test.tpch.not_null_stg_tpch_nations_nation_key.d0c2fe32ed": [], "test.tpch.unique_stg_tpch_orders_order_key.bd29f13cc9": [], "test.tpch.not_null_stg_tpch_orders_order_key.bb22e75ae8": [], "test.tpch.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae": [], "test.tpch.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e": [], "test.tpch.unique_stg_tpch_parts_part_key.afbc7ad489": [], "test.tpch.not_null_stg_tpch_parts_part_key.cc8e610420": [], "test.tpch.unique_stg_tpch_regions_region_key.b2bd891bb5": [], "test.tpch.not_null_stg_tpch_regions_region_key.869fa0b326": [], "test.tpch.unique_stg_tpch_suppliers_supplier_key.6215308464": [], "test.tpch.not_null_stg_tpch_suppliers_supplier_key.97c31a786d": [], "test.tpch.unique_order_items_order_item_key.43a40b2837": [], "test.tpch.not_null_order_items_order_item_key.44b9fa7311": [], "test.tpch.unique_part_suppliers_part_supplier_key.909477afa8": [], "test.tpch.not_null_part_suppliers_part_supplier_key.b8b2022ed3": [], "test.tpch.unique_dim_customers_customer_key.ad8156656e": [], "test.tpch.not_null_dim_customers_customer_key.4bebfb3411": [], "test.tpch.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69": [], "test.tpch.unique_dim_parts_part_key.712df18d58": [], "test.tpch.not_null_dim_parts_part_key.4358f880d9": [], "test.tpch.unique_dim_suppliers_supplier_key.58fc3e4770": [], "test.tpch.not_null_dim_suppliers_supplier_key.4315350956": [], "test.tpch.unique_fct_order_items_order_item_key.4d6426a255": [], "test.tpch.not_null_fct_order_items_order_item_key.47516a6371": [], "test.tpch.unique_fct_orders_order_key.f5e7a90273": [], "test.tpch.not_null_fct_orders_order_key.6a6f83ab15": [], "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b": [], "test.tpch.unique_materialization_incremental_customer_key.325783f327": [], "test.tpch.not_null_materialization_incremental_customer_key.e2b95d8009": [], "test.tpch.unique_use_variables_order_item_key.fb5576fe0e": [], "test.tpch.not_null_use_variables_order_item_key.c2bd602686": [], "test.tpch.source_not_null_dbtc_link_clicked_link.f7c8e69ba4": [], "test.tpch.source_not_null_dbtc_link_clicked_id.9028bfe6aa": [], "test.tpch.source_unique_dbtc_link_clicked_id.6a057563bc": [], "test.tpch.source_not_null_dbtc_link_clicked_event.7882b2f4f6": [], "test.tpch.source_not_null_dbtc_link_clicked_sent_at.39cf8a9ef9": [], "test.tpch.source_not_null_dbtc_pages_id.f6b6a8c945": [], "test.tpch.source_unique_dbtc_pages_id.8457cf34c6": [], "test.tpch.source_not_null_dbtc_pages_sent_at.485c11a73d": [], "test.tpch.source_not_null_dbtc_tracks_event_text.80a027ce56": [], "test.tpch.source_not_null_dbtc_tracks_id.a88be3eab6": [], "test.tpch.source_unique_dbtc_tracks_id.d4b89ee628": [], "test.tpch.source_not_null_dbtc_tracks_event.1fd1e17274": [], "test.tpch.source_not_null_dbtc_tracks_sent_at.1ad9794804": [], "test.tpch.source_not_null_yahooquery_link_clicked_link.3620c522a2": [], "test.tpch.source_not_null_yahooquery_link_clicked_id.c548e15a7c": [], "test.tpch.source_unique_yahooquery_link_clicked_id.8d33aca289": [], "test.tpch.source_not_null_yahooquery_link_clicked_event.71e08699a9": [], "test.tpch.source_not_null_yahooquery_link_clicked_sent_at.8b7ef7ad21": [], "test.tpch.source_not_null_yahooquery_pages_id.9f283dcda5": [], "test.tpch.source_unique_yahooquery_pages_id.6bf98eb61d": [], "test.tpch.source_not_null_yahooquery_pages_sent_at.318734adee": [], "test.tpch.source_not_null_yahooquery_tracks_event_text.700c8cdeb6": [], "test.tpch.source_not_null_yahooquery_tracks_id.621874b412": [], "test.tpch.source_unique_yahooquery_tracks_id.7c22f538c9": [], "test.tpch.source_not_null_yahooquery_tracks_event.70b5c344c0": [], "test.tpch.source_not_null_yahooquery_tracks_sent_at.e5fa5c0d96": [], "test.tpch.source_not_null_tpch_orders_o_orderkey.ebd571817b": [], "test.tpch.source_unique_tpch_orders_o_orderkey.374f048af2": [], "test.tpch.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67": [], "test.tpch.source_not_null_tpch_customer_c_custkey.a95b6298b5": [], "test.tpch.source_unique_tpch_customer_c_custkey.048e97fc25": [], "test.tpch.source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_.c9281c341d": [], "test.tpch.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d": [], "test.tpch.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8": [], "test.tpch.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2": [], "test.tpch.source_not_null_tpch_nation_n_nationkey.5ac5d27298": [], "test.tpch.source_unique_tpch_nation_n_nationkey.3bd4153064": [], "test.tpch.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da": [], "test.tpch.source_not_null_tpch_part_p_partkey.9543847190": [], "test.tpch.source_unique_tpch_part_p_partkey.30b171988e": [], "test.tpch.dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0.534c6e22cc": [], "test.tpch.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f": [], "test.tpch.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e": [], "test.tpch.source_not_null_tpch_region_r_regionkey.8f6ee68076": [], "test.tpch.source_unique_tpch_region_r_regionkey.d8eeced103": [], "test.tpch.source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST.0e96b086b2": [], "test.tpch.source_not_null_tpch_supplier_s_suppkey.94660e6dab": [], "test.tpch.source_unique_tpch_supplier_s_suppkey.1a36cf4370": [], "test.tpch.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da": [], "test.tpch.source_unique_tpch_snapshot_customer_snapshot_src_c_custkey.463ab9515e": [], "test.tpch.source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey.e3f0c54a96": [], "source.tpch.dbtc.link_clicked": [ "model.tpch.stg_dbtc__link_clicked", "test.tpch.source_not_null_dbtc_link_clicked_event.7882b2f4f6", "test.tpch.source_not_null_dbtc_link_clicked_id.9028bfe6aa", "test.tpch.source_not_null_dbtc_link_clicked_link.f7c8e69ba4", "test.tpch.source_not_null_dbtc_link_clicked_sent_at.39cf8a9ef9", "test.tpch.source_unique_dbtc_link_clicked_id.6a057563bc" ], "source.tpch.dbtc.pages": [ "model.tpch.stg_dbtc__pages", "test.tpch.source_not_null_dbtc_pages_id.f6b6a8c945", "test.tpch.source_not_null_dbtc_pages_sent_at.485c11a73d", "test.tpch.source_unique_dbtc_pages_id.8457cf34c6" ], "source.tpch.dbtc.tracks": [ "model.tpch.stg_dbtc__tracks", "test.tpch.source_not_null_dbtc_tracks_event.1fd1e17274", "test.tpch.source_not_null_dbtc_tracks_event_text.80a027ce56", "test.tpch.source_not_null_dbtc_tracks_id.a88be3eab6", "test.tpch.source_not_null_dbtc_tracks_sent_at.1ad9794804", "test.tpch.source_unique_dbtc_tracks_id.d4b89ee628" ], "source.tpch.yahooquery.link_clicked": [ "model.tpch.stg_yahooquery__link_clicked", "test.tpch.source_not_null_yahooquery_link_clicked_event.71e08699a9", "test.tpch.source_not_null_yahooquery_link_clicked_id.c548e15a7c", "test.tpch.source_not_null_yahooquery_link_clicked_link.3620c522a2", "test.tpch.source_not_null_yahooquery_link_clicked_sent_at.8b7ef7ad21", "test.tpch.source_unique_yahooquery_link_clicked_id.8d33aca289" ], "source.tpch.yahooquery.pages": [ "model.tpch.stg_yahooquery__pages", "test.tpch.source_not_null_yahooquery_pages_id.9f283dcda5", "test.tpch.source_not_null_yahooquery_pages_sent_at.318734adee", "test.tpch.source_unique_yahooquery_pages_id.6bf98eb61d" ], "source.tpch.yahooquery.tracks": [ "model.tpch.stg_yahooquery__tracks", "test.tpch.source_not_null_yahooquery_tracks_event.70b5c344c0", "test.tpch.source_not_null_yahooquery_tracks_event_text.700c8cdeb6", "test.tpch.source_not_null_yahooquery_tracks_id.621874b412", "test.tpch.source_not_null_yahooquery_tracks_sent_at.e5fa5c0d96", "test.tpch.source_unique_yahooquery_tracks_id.7c22f538c9" ], "source.tpch.tpch.orders": [ "model.tpch.stg_tpch_orders", "test.tpch.source_not_null_tpch_orders_o_orderkey.ebd571817b", "test.tpch.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d", "test.tpch.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67", "test.tpch.source_unique_tpch_orders_o_orderkey.374f048af2" ], "source.tpch.tpch.customer": [ "model.tpch.materialization_incremental", "model.tpch.stg_tpch_customers", "snapshot.tpch.tpch_customer_snapshot", "test.tpch.source_not_null_tpch_customer_c_custkey.a95b6298b5", "test.tpch.source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_.c9281c341d", "test.tpch.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67", "test.tpch.source_unique_tpch_customer_c_custkey.048e97fc25" ], "source.tpch.tpch.lineitem": [ "model.tpch.stg_tpch_line_items", "test.tpch.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d", "test.tpch.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8", "test.tpch.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2" ], "source.tpch.tpch.nation": [ "model.tpch.stg_tpch_nations", "test.tpch.source_not_null_tpch_nation_n_nationkey.5ac5d27298", "test.tpch.source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_.c9281c341d", "test.tpch.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da", "test.tpch.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da", "test.tpch.source_unique_tpch_nation_n_nationkey.3bd4153064" ], "source.tpch.tpch.part": [ "model.tpch.stg_tpch_parts", "snapshot.tpch.tpch_part_snapshot", "test.tpch.dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0.534c6e22cc", "test.tpch.source_not_null_tpch_part_p_partkey.9543847190", "test.tpch.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8", "test.tpch.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f", "test.tpch.source_unique_tpch_part_p_partkey.30b171988e" ], "source.tpch.tpch.partsupp": [ "model.tpch.stg_tpch_part_suppliers", "test.tpch.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f", "test.tpch.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e" ], "source.tpch.tpch.region": [ "model.tpch.stg_tpch_regions", "test.tpch.source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST.0e96b086b2", "test.tpch.source_not_null_tpch_region_r_regionkey.8f6ee68076", "test.tpch.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da", "test.tpch.source_unique_tpch_region_r_regionkey.d8eeced103" ], "source.tpch.tpch.supplier": [ "model.tpch.stg_tpch_suppliers", "snapshot.tpch.tpch_supplier_snapshot", "test.tpch.source_not_null_tpch_supplier_s_suppkey.94660e6dab", "test.tpch.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2", "test.tpch.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e", "test.tpch.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da", "test.tpch.source_unique_tpch_supplier_s_suppkey.1a36cf4370" ], "source.tpch.tpch_snapshot.customer_snapshot_src": [ "test.tpch.source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey.e3f0c54a96", "test.tpch.source_unique_tpch_snapshot_customer_snapshot_src_c_custkey.463ab9515e" ], "source.tpch.test_eqrx_s3.dummy_data": [], "source.tpch.deutsche_boerse.trading_data": [], "exposure.tpch.sales_by_region": [], "metric.tpch.total_revenue": [ "metric.tpch.average_revenue_per_customer", "metric.tpch.total_profit", "model.tpch.revenue_weekly_by_ship_mode" ], "metric.tpch.total_customers": [ "metric.tpch.average_revenue_per_customer" ], "metric.tpch.total_expenses": [ "metric.tpch.total_profit" ], "metric.tpch.total_profit": [], "metric.tpch.average_revenue_per_customer": [] } }
